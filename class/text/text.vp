(import 'sys/func.inc)
(import 'gui/gui.inc)
(import 'gui/font.inc)
(import 'class/vector/vector.inc)
(import 'class/text/text.inc)
(import 'class/string/string.inc)

(gen-new 'text)
(gen-create 'text)
(gen-class 'text)

(def-func 'class/text/init)
	;inputs
	;r0 = text object
	;r1 = vtable pointer
	;outputs
	;r1 = 0 if error, else ok

	;init parent
	(s-call 'text 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		(vp-push r0)

		;init myself
		(f-call 'gui_font 'open '("fonts/OpenSans-Regular.ttf" 18) '(r0))
		(assert '(r0 != 0))
		(vp-cpy-ir r4 0 r1)
		(vp-cpy-ri r0 r1 text_font)
		(vp-xor-rr r0 r0)
		(vp-cpy-ri r0 r1 text_string)
		(vp-cpy-ri-i r0 r1 text_text_color)
		(vp-cpy-ri r0 r1 text_words)

		(vp-pop r0)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/text/deinit)
	;inputs
	;r0 = text object
	;trashes
	;all but r0, r4

	;save object
	(vp-push r0)

	;deref any string and words objects
	(vp-cpy-ir r0 text_string r0)
	(vpif '(r0 != 0))
		(f-call 'string 'deref '(r0))
		(vp-cpy-ir r4 0 r0)
		(f-call 'vector 'deref '((r0 text_words)))
	(endif)

	;deinit parent
	(vp-pop r0)
	(s-jmp 'text 'deinit '(r0))

(def-func-end)

(def-func 'class/text/draw)
	;inputs
	;r0 = view object
	;r1 = ctx object
	;trashes
	;all but r0, r4

	(ptr 'this 'ctx 'txt)
	(pptr 'words 'words_end)
	(int 'x)
	(uint 'length)

	;save inputs
	(push-scope)
	(f-entry 'text 'draw {this, ctx})

	;draw text
	(vpif {this->text_string && this->text_font})
		(assign {this->text_words->array_array} {words})
		(d-call 'vector 'get_length {this->text_words} {_, length})
		(assign {&words[length * ptr_size]} {words_end})
		(assign {0} {x})
		(loop-start)
			(f-call 'gui_font 'text {this->text_font, *words} {txt})
			(vpif {txt})
				(f-call 'gui_ctx 'blit {ctx, txt->ft_text_texture, this->text_text_color, x, 0, txt->ft_text_width, txt->ft_text_height})
				(assign {x + txt->ft_text_width + (txt->ft_text_height >> 2)} {x})
			(endif)
			(assign {words + ptr_size} {words})
		(loop-until {words == words_end})
	(endif)

	(f-exit 'text 'draw {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/text/ref_text)
	;inputs
	;r0 = text object
	;outputs
	;r0 = text object
	;r1 = 0 else, string object
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(f-entry 'text 'ref_text '((r4 local_this)))

	;reference the string
	(vp-cpy-ir r0 text_string r0)
	(f-call 'string 'ref_if '(r0) '(r0))

	(f-exit 'text 'ref_text '((r4 local_this) r0))
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/text/pref_size)
	;inputs
	;r0 = text object
	;outputs
	;r10 = prefered width
	;r11 = prefered height
	;trashes
	;all but r0, r4

	(ptr 'this)
	(pptr 'words 'words_end)
	(uint 'width 'height 'length 'word_w)

	;save inputs
	(push-scope)
	(f-entry 'text 'pref_size {this})

	;bounds of text
	(assign {0, 0} {width, height})
	(vpif {this->text_string && this->text_font})
		(assign {this->text_words->array_array} {words})
		(d-call 'vector 'get_length {this->text_words} {_, length})
		(assign {&words[length * ptr_size]} {words_end})
		(loop-start)
			(f-call 'gui_font 'bounds {this->text_font, *words} {word_w, height})
			(assign {words + ptr_size} {words})
			(assign {width + word_w} {width})
		(loop-until {words == words_end})
		(assign {width + (length - 1) * (height >> 2)} {width})
	(endif)

	(f-exit 'text 'pref_size {this, width, height})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/text/set_font)
	;inputs
	;r0 = text object
	;r1 = font name
	;r2 = point size
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(f-entry 'text 'set_font '((r4 local_this) r1 r2))

	;open font
	(f-call 'gui_font 'open '(r1 r2) '(r1))

	(vp-cpy-ir r4 local_this r0)
	(vp-cpy-ri r1 r0 text_font)

	(f-exit 'text 'set_font '(r0))
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/text/set_text)
	;inputs
	;r0 = text object
	;r1 = 0, else string object
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'this)
		(long 'string)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(f-entry 'text 'set_text '((r4 local_this) (r4 local_string)))

	;deref the old string and words
	(vp-cpy-ir r0 text_string r0)
	(vpif '(r0 != 0))
		(f-call 'string 'deref '(r0))
		(vp-cpy-ir r4 local_this r0)
		(vp-cpy-ir r0 text_words r1)
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 r0 text_words)
		(f-call 'string 'deref '(r1))
	(endif)

	;transfer reference to new string
	(vp-cpy-ir r4 local_this r0)
	(vp-cpy-ir r4 local_string r1)
	(vp-cpy-ri r1 r0 text_string)
	(vpif '(r1 != 0))
		(f-call 'string 'split '(r1 char_space) '(_ r1))
		(vp-cpy-ir r4 local_this r0)
		(vp-cpy-ri r1 r0 text_words)
	(endif)

	(f-exit 'text 'set_text '(r0))
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)
