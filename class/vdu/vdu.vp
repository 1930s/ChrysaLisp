(import 'sys/func.inc)
(import 'gui/gui.inc)
(import 'gui/ctx/ctx.inc)
(import 'gui/region/region.inc)
(import 'class/font/font.inc)
(import 'class/texture/texture.inc)
(import 'class/symbol/symbol.inc)
(import 'class/vdu/vdu.inc)
(import 'class/vector/vector.inc)

(gen-new 'vdu)
(gen-create 'vdu)
(gen-class 'vdu)

(def-func 'class/vdu/init)
	;inputs
	;r0 = vdu object
	;r1 = vtable pointer
	;outputs
	;r0 = vdu object
	;r1 = 0 if error, else ok

	;init parent
	(s-call 'vdu 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		(vp-push r0)

		;init myself
		(vp-cpy-rr r0 r4)
		(vp-xor-rr r0 r0)
		(assign '(r0 r0 r0 r0) '((r4 vdu_font) (r4 vdu_chars) (r4 vdu_cursor_x i) (r4 vdu_cursor_y i)))
		(assign '(r0 r0) '((r4 vdu_width i) (r4 vdu_height i)))
		(f-call 'vector 'create '() '((r4 vdu_textures)))
		(f-call 'vector 'set_capacity '((r4 vdu_textures) 128))

		(vp-pop r0)
		(vp-cpy-cr 1 r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/vdu/deinit)
	;inputs
	;r0 = vdu object
	;trashes
	;all but r0

	;save object
	(vp-push r0)

	(f-call 'sys_mem 'free '((r0 vdu_chars)))
	(vp-cpy-ir rsp 0 r0)
	(f-call 'vector 'deref '((r0 vdu_textures)))

	;deinit parent
	(vp-pop r0)
	(s-jmp 'vdu 'deinit '(r0))

(def-func-end)

(def-func 'class/vdu/draw)
	;inputs
	;r0 = view object
	;r1 = ctx object
	;trashes
	;all but r0

	(ptr 'this 'ctx 'txt 'font)
	(ulong 'handle)
	(int 'x 'char 'bx 'by 'bx1 'by1)
	(uint 'w 'h 'col)

	;save inputs
	(push-scope)
	(f-entry 'vdu 'draw {this, ctx})

	;get properties, do checks for any changes
	(f-call 'vdu 'get_long_prop {this, prop_text_color} {_, col})
	(f-call 'vdu 'get_long_prop {this, prop_vdu_width} {_, w})
	(f-call 'vdu 'get_long_prop {this, prop_vdu_height} {_, h})
	(f-call 'vdu 'ref_obj_prop {this, prop_font} {_, font})
	(vpif {font && font != this->vdu_font})
		(assign {font} {this->vdu_font})
		(f-call 'vdu 'switch_font {this})
	(endif)
	(vpif {w != this->vdu_width || h != this->vdu_height})
		(assign {w, h} {this->vdu_width, this->vdu_height})
		(f-call 'vdu 'switch_size {this})
	(endif)

	;draw vdu chars
	(vpif {this->vdu_font && this->vdu_chars})
		(f-call 'gui_region 'bounds {ctx->gui_ctx_dirty_region} {bx, by, bx1, by1})
		(assign {(bx - ctx->gui_ctx_x) / this->vdu_char_width} {bx})
		(assign {(bx1 - ctx->gui_ctx_x - 1) / this->vdu_char_width} {bx1})
		(assign {(by - ctx->gui_ctx_y) / this->vdu_char_height} {by})
		(assign {(by1 - ctx->gui_ctx_y - 1) / this->vdu_char_height} {by1})
		(vpif {bx1 >= this->vdu_width})
			(assign {this->vdu_width - 1} {bx1})
		(endif)
		(vpif {by1 >= this->vdu_height})
			(assign {this->vdu_height - 1} {by1})
		(endif)
		(loop-while {by <= by1})
			(assign {bx} {x})
			(loop-while {x <= bx1})
				(assign {(this->vdu_chars)[by * this->vdu_width + x]} {char})
				(vpif {char > 32 && char < 127})
					(f-call 'vector 'get_element {this->vdu_textures, char - 33} {_, txt})
					(f-call 'texture 'get_metrics {txt} {_, handle, w ,h})
					(vpif {handle})
						(f-call 'gui_ctx 'blit {ctx, handle, col, x * this->vdu_char_width, by * this->vdu_char_height, w, h})
					(endif)
				(endif)
				(assign {x + 1} {x})
			(loop-end)
			(assign {by + 1} {by})
		(loop-end)
		(f-call 'gui_ctx 'set_color {ctx, col})
		(f-call 'gui_ctx 'filled_box {ctx, this->vdu_cursor_x * this->vdu_char_width, this->vdu_cursor_y * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})
	(endif)

	(f-call 'font 'deref_if {font})

	(f-exit 'vdu 'draw {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/vdu/pref_size)
	;inputs
	;r0 = vdu object
	;outputs
	;r9 = preferred width
	;r10 = preferred height
	;trashes
	;all but r0

	(ptr 'this 'font)
	(uint 'w 'h)

	;save inputs
	(push-scope)
	(f-entry 'vdu 'pref_size {this})

	;get properties, do checks for any changes
	(f-call 'vdu 'get_long_prop {this, prop_vdu_width} {_, w})
	(f-call 'vdu 'get_long_prop {this, prop_vdu_height} {_, h})
	(f-call 'vdu 'ref_obj_prop {this, prop_font} {_, font})
	(vpif {font && font != this->vdu_font})
		(assign {font} {this->vdu_font})
		(f-call 'vdu 'switch_font {this})
	(endif)
	(vpif {w != this->vdu_width || h != this->vdu_height})
		(assign {w, h} {this->vdu_width, this->vdu_height})
		(f-call 'vdu 'switch_size {this})
	(endif)
	(f-call 'font 'deref_if {font})

	(f-exit 'vdu 'pref_size {this, this->vdu_width * this->vdu_char_width,
		this->vdu_height * this->vdu_char_height})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/vdu/switch_font)
	;inputs
	;r0 = vdu object
	;trashes
	;all but r0

	(ptr 'this 'word 'txt)
	(uint 'code)

	;save inputs
	(push-scope)
	(f-entry 'vdu 'switch_font {this})

	;set char size
	(f-call 'font 'get_metrics {this->vdu_font} {_, _, _, this->vdu_char_height})
	(assign {this->vdu_char_height * 9 >> 4} {this->vdu_char_width})

	;cache char textures
	(d-call 'vector 'clear {this->vdu_textures})
	(assign {33} {code})
	(loop-start)
		(f-call 'symbol 'intern_cstr {&code} {word})
		(f-call 'font 'ref_word {this->vdu_font, word} {_, txt})
		(f-call 'vector 'push_back {this->vdu_textures, txt})
		(f-call 'symbol 'deref {word})
		(assign {code + 1} {code})
	(loop-until {code == 127})

	(f-exit 'vdu 'switch_font {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/vdu/switch_size)
	;inputs
	;r0 = vdu object
	;trashes
	;all but r0

	(ptr 'this)
	(ulong 'size)

	;save inputs
	(push-scope)
	(f-entry 'vdu 'switch_size {this})

	(f-call 'sys_mem 'free {this->vdu_chars})
	(f-call 'sys_mem 'alloc {this->vdu_width * this->vdu_height} {this->vdu_chars, size})
	(f-call 'sys_mem 'fill {this->vdu_chars, size, char_space})

	(f-exit 'vdu 'switch_size {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/vdu/print_char)
	;inputs
	;r0 = vdu object
	;r1 = char
	;outputs
	;r0 = vdu object

	(ptr 'this)
	(uint 'char)

	;save inputs
	(push-scope)
	(f-entry 'vdu 'print_char {this, char})

	(vpif {this->vdu_chars})
		;dirty old cursor area
		(f-call 'vdu 'add_dirty {this, this->vdu_cursor_x * this->vdu_char_width,
			this->vdu_cursor_y * this->vdu_char_height,
			this->vdu_char_width, this->vdu_char_height})

		;wrap cursor, maybe scroll
		(vpif {this->vdu_cursor_x >= this->vdu_width})
			(assign {0} {this->vdu_cursor_x})
			(assign {this->vdu_cursor_y + 1} {this->vdu_cursor_y})
		(endif)
		(vpif {this->vdu_cursor_y >= this->vdu_height})
			(assign {0} {this->vdu_cursor_x})
			(assign {this->vdu_height - 1} {this->vdu_cursor_y})
			(f-call 'sys_mem 'copy {this->vdu_chars + this->vdu_width, this->vdu_chars, (this->vdu_height - 1) * this->vdu_width})
			(f-call 'sys_mem 'fill {this->vdu_chars + (this->vdu_height - 1) * this->vdu_width, this->vdu_width, char_space})
			(f-call 'vdu 'dirty {this})
		(endif)

		(vpif {char == char_lf})
			;line feed
			(assign {0} {this->vdu_cursor_x})
			(assign {this->vdu_cursor_y + 1} {this->vdu_cursor_y})
		(elseif {char == char_tab})
			;tab
			(assign {4 - (this->vdu_cursor_x & 3)} {char})
			(loop-start)
				(f-call 'vdu 'print_char {this, 32})
				(assign {char - 1} {char})
			(loop-untilnot {char})
		(elseif {char == char_backspace})
			;backspace
			(vpif {this->vdu_cursor_x})
				(assign {this->vdu_cursor_x - 1} {this->vdu_cursor_x})
				(assign {32} {(this->vdu_chars)[this->vdu_cursor_y * this->vdu_width + this->vdu_cursor_x]})
				(f-call 'vdu 'add_dirty {this, this->vdu_cursor_x * this->vdu_char_width,
					this->vdu_cursor_y * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})
			(endif)
		(elseif {char == 129})
			;clear line
			(vpif {this->vdu_cursor_x})
				(f-call 'sys_mem 'fill {this->vdu_chars + this->vdu_cursor_y * this->vdu_width, this->vdu_width, char_space})
				(f-call 'vdu 'add_dirty {this, 0, this->vdu_cursor_y * this->vdu_char_height,
					this->vdu_cursor_x * this->vdu_char_width, this->vdu_char_height})
				(assign {0} {this->vdu_cursor_x})
			(endif)
		(elseif {char >= char_space && char < 127})
			;printable char
			(assign {char} {(this->vdu_chars)[this->vdu_cursor_y * this->vdu_width + this->vdu_cursor_x]})
			(f-call 'vdu 'add_dirty {this, this->vdu_cursor_x * this->vdu_char_width,
				this->vdu_cursor_y * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})
			(assign {this->vdu_cursor_x + 1} {this->vdu_cursor_x})
		(endif)

		;dirty new cursor area
		(f-call 'vdu 'add_dirty {this, this->vdu_cursor_x * this->vdu_char_width,
			this->vdu_cursor_y * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})
	(endif)

	(f-exit 'vdu 'print_char {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/vdu/print_cstr)
	;inputs
	;r0 = vdu object
	;r1 = c string pointer
	;outputs
	;r0 = vdu object

	(ptr 'this)
	(pubyte 'charp)

	;save inputs
	(push-scope)
	(f-entry 'vdu 'print_cstr {this, charp})

	;print chars
	(loop-while {*charp})
		(f-call 'vdu 'print_char {this, *charp})
		(assign {charp + 1} {charp})
	(loop-end)

	(f-exit 'vdu 'print_cstr {this})
	(pop-scope)
	(return)

(def-func-end)
