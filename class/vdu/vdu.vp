(import 'sys/func.inc)
(import 'gui/gui.inc)
(import 'class/font/font.inc)
(import 'class/symbol/symbol.inc)
(import 'class/vdu/vdu.inc)
(import 'class/text/text.inc)

(gen-new 'vdu)
(gen-create 'vdu)
(gen-class 'vdu)

(def-func 'class/vdu/init)
	;inputs
	;r0 = vdu object
	;r1 = vtable pointer
	;outputs
	;r0 = vdu object
	;r1 = 0 if error, else ok

	;init parent
	(s-call 'vdu 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		(vp-push r0)

		;init myself
		(vp-cpy-rr r0 r4)
		(vp-xor-rr r0 r0)
		(assign '(r0 r0 r0 r0) '((r4 vdu_font) (r4 vdu_text_color i) (r4 vdu_cursor_x i) (r4 vdu_cursor_y i)))
		(vp-cpy-cr vdu_default_width r0)
		(vp-cpy-ri-i r0 r4 vdu_width)
		(vp-cpy-cr vdu_default_height r0)
		(vp-cpy-ri-i r0 r4 vdu_height)
		(f-call 'sys_mem 'alloc '((mul vdu_default_width vdu_default_height)) '(r0 r1))
		(vp-cpy-ri r0 r4 vdu_chars)
		(f-call 'sys_mem 'fill '(r0 r1 char_space))
		(f-call 'sys_mem 'alloc '((mul 128 vdu_txt_size)) '((r4 vdu_textures) _))

		(vp-pop r0)
		(f-call 'vdu 'set_font '(r0 "fonts/Hack-Regular.ttf" 16))
		(vp-cpy-cr 1 r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/vdu/deinit)
	;inputs
	;r0 = vdu object
	;trashes
	;all but r0

	;save object
	(vp-push r0)

	(f-call 'sys_mem 'free '((r0 vdu_chars)))
	(vp-cpy-ir rsp 0 r0)
	(f-call 'sys_mem 'free '((r0 vdu_textures)))
	(vp-cpy-ir rsp 0 r0)
	(f-call 'font 'deref_if '((r0 vdu_font)))

	;deinit parent
	(vp-pop r0)
	(s-jmp 'vdu 'deinit '(r0))

(def-func-end)

(def-func 'class/vdu/draw)
	;inputs
	;r0 = view object
	;r1 = ctx object
	;trashes
	;all but r0

	(ptr 'this 'ctx 'txt)
	(int 'x 'char 'bx 'by 'bx1 'by1)

	;save inputs
	(push-scope)
	(f-entry 'vdu 'draw {this, ctx})

	;draw vdu chars
	(vpif {this->vdu_font})
		(f-call 'gui_region 'bounds {ctx->gui_ctx_dirty_region} {bx, by, bx1, by1})
		(assign {(bx - ctx->gui_ctx_x) / this->vdu_char_width} {bx})
		(assign {(bx1 - ctx->gui_ctx_x - 1) / this->vdu_char_width} {bx1})
		(assign {(by - ctx->gui_ctx_y) / this->vdu_char_height} {by})
		(assign {(by1 - ctx->gui_ctx_y - 1) / this->vdu_char_height} {by1})
		(vpif {bx1 >= this->vdu_width})
			(assign {this->vdu_width - 1} {bx1})
		(endif)
		(vpif {by1 >= this->vdu_height})
			(assign {this->vdu_height - 1} {by1})
		(endif)
		(loop-while {by <= by1})
			(assign {bx} {x})
			(loop-while {x <= bx1})
				(assign {(this->vdu_chars)[by * this->vdu_width + x]} {char})
				(vpif {char > 32 && char < 127})
					(assign {&(this->vdu_textures)[vdu_txt_size * (char - 33)]} {txt})
					(vpif {txt})
						(f-call 'gui_ctx 'blit {ctx, txt->vdu_txt_handle, this->vdu_text_color, x * this->vdu_char_width, by * this->vdu_char_height, txt->vdu_txt_width, txt->vdu_txt_height})
					(endif)
				(endif)
				(assign {x + 1} {x})
			(loop-end)
			(assign {by + 1} {by})
		(loop-end)
		(f-call 'gui_ctx 'set_color {ctx, this->vdu_text_color})
		(f-call 'gui_ctx 'filled_box {ctx, this->vdu_cursor_x * this->vdu_char_width, this->vdu_cursor_y * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})
	(endif)

	(f-exit 'vdu 'draw {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/vdu/pref_size)
	;inputs
	;r0 = vdu object
	;outputs
	;r9 = preferred width
	;r10 = preferred height
	;trashes
	;all but r0

	(ptr 'this)
	(uint 'width 'height)

	;save inputs
	(push-scope)
	(f-entry 'vdu 'pref_size {this})

	;bounds of vdu
	(assign {this->vdu_width * this->vdu_char_width, this->vdu_height * this->vdu_char_height} {width, height})

	(f-exit 'vdu 'pref_size {this, width, height})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/vdu/set_font)
	;inputs
	;r0 = vdu object
	;r1 = font name
	;r2 = point size
	;trashes
	;all but r0

	(ptr 'this 'name 'word 'txt)
	(uint 'points 'code)

	;save inputs
	(push-scope)
	(f-entry 'vdu 'set_font {this, name, points})

	;set char size
	(assign {points + (points >> 2)} {this->vdu_char_height})
	(assign {points * 10 >> 4} {this->vdu_char_width})

	;open new font
	(f-call 'font 'deref_if {this->vdu_font})
	(f-call 'font 'open {name, points} {this->vdu_font})

	;cache char textures
	(vpif {this->vdu_font})
		(assign {33} {code})
		(loop-start)
			(f-call 'symbol 'intern_cstr {&code} {word})
			(assign {&(this->vdu_textures)[vdu_txt_size * (code - 33)]} {txt})
			(f-call 'font 'get_word {this->vdu_font, word} {_, txt->vdu_txt_handle, txt->vdu_txt_width, txt->vdu_txt_height})
			(f-call 'symbol 'deref {word})
			(assign {code + 1} {code})
		(loop-until {code == 127})
	(endif)

	(f-exit 'vdu 'set_font {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/vdu/print_char)
	;inputs
	;r0 = vdu object
	;r1 = char
	;outputs
	;r0 = vdu object

	(ptr 'this)
	(uint 'char)

	;save inputs
	(push-scope)
	(f-entry 'vdu 'print_char {this, char})

	;dirty old cursor area
	(f-call 'vdu 'add_dirty {this, this->vdu_cursor_x * this->vdu_char_width, this->vdu_cursor_y * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})

	;wrap cursor, maybe scroll
	(vpif {this->vdu_cursor_x >= this->vdu_width})
		(assign {0} {this->vdu_cursor_x})
		(assign {this->vdu_cursor_y + 1} {this->vdu_cursor_y})
	(endif)
	(vpif {this->vdu_cursor_y >= this->vdu_height})
		(assign {0} {this->vdu_cursor_x})
		(assign {this->vdu_height - 1} {this->vdu_cursor_y})
		(f-call 'sys_mem 'copy {this->vdu_chars + this->vdu_width, this->vdu_chars, (this->vdu_height - 1) * this->vdu_width})
		(f-call 'sys_mem 'fill {this->vdu_chars + (this->vdu_height - 1) * this->vdu_width, this->vdu_width, char_space})
		(f-call 'vdu 'dirty {this})
	(endif)

	(vpif {char == char_lf})
		;line feed
		(assign {0} {this->vdu_cursor_x})
		(assign {this->vdu_cursor_y + 1} {this->vdu_cursor_y})
	(elseif {char == char_tab})
		;tab
		(assign {4 - (this->vdu_cursor_x & 3)} {char})
		(loop-start)
			(f-call 'vdu 'print_char {this, 32})
			(assign {char - 1} {char})
		(loop-untilnot {char})
	(elseif {char == char_backspace})
		;backspace
		(vpif {this->vdu_cursor_x})
			(assign {this->vdu_cursor_x - 1} {this->vdu_cursor_x})
			(assign {32} {(this->vdu_chars)[this->vdu_cursor_y * this->vdu_width + this->vdu_cursor_x]})
			(f-call 'vdu 'add_dirty {this, this->vdu_cursor_x * this->vdu_char_width, this->vdu_cursor_y * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})
		(endif)
	(elseif {char == 129})
		;clear line
		(vpif {this->vdu_cursor_x})
			(f-call 'sys_mem 'fill {this->vdu_chars + this->vdu_cursor_y * this->vdu_width, this->vdu_width, char_space})
			(f-call 'vdu 'add_dirty {this, 0, this->vdu_cursor_y * this->vdu_char_height, this->vdu_cursor_x * this->vdu_char_width, this->vdu_char_height})
			(assign {0} {this->vdu_cursor_x})
		(endif)
	(elseif {char >= char_space && char < 127})
		;printable char
		(assign {char} {(this->vdu_chars)[this->vdu_cursor_y * this->vdu_width + this->vdu_cursor_x]})
		(f-call 'vdu 'add_dirty {this, this->vdu_cursor_x * this->vdu_char_width, this->vdu_cursor_y * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})
		(assign {this->vdu_cursor_x + 1} {this->vdu_cursor_x})
	(endif)

	;dirty new cursor area
	(f-call 'vdu 'add_dirty {this, this->vdu_cursor_x * this->vdu_char_width, this->vdu_cursor_y * this->vdu_char_height, this->vdu_char_width, this->vdu_char_height})

	(f-exit 'vdu 'print_char {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/vdu/print_cstr)
	;inputs
	;r0 = vdu object
	;r1 = c string pointer
	;outputs
	;r0 = vdu object

	(ptr 'this)
	(pubyte 'charp)

	;save inputs
	(push-scope)
	(f-entry 'vdu 'print_cstr {this, charp})

	;print chars
	(loop-while {*charp})
		(f-call 'vdu 'print_char {this, *charp})
		(assign {charp + 1} {charp})
	(loop-end)

	(f-exit 'vdu 'print_cstr {this})
	(pop-scope)
	(return)

(def-func-end)
