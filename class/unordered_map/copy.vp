(import 'inc/func.inc)
(import 'class/class_unordered_map.inc)
(import 'class/class_pair.inc)
(import 'class/class_vector.inc)

(def-func 'class/unordered_map/copy)
	;inputs
	;r0 = unordered_map object
	;r1 = num buckets
	;outputs
	;r0 = unordered_map object
	;r1 = unordered_map copy
	;trashes
	;all but r0, r4

	(vp-cpy-rr r0 r9)
	f_call unordered_map, create, {[r0 + unordered_set_key_callback], r1}, {r0}
	vp_push r0
	f_call unordered_map, for_each, {r9, $callback, r4}, {_, _}
	vp_pop r1
	(vp-cpy-ir r0 unordered_set_length r2)
	(vp-cpy-ri r2 r1 unordered_set_length)
	(vp-ret)

callback:
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-ir r0 r2)
	f_call ref, ref, {[r1]}
	vp_push r0
	f_call unordered_map, get_bucket, {r2, [r0 + pair_first]}, {r0}
	vp_pop r1
	(f-jmp 'vector 'push_back '(r0, r1))

(def-func-end)
