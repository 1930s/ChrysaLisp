(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/pair/pair.inc)
(import 'class/unordered_map/unordered_map.inc)

(class-macro-new 'unordered_map)
(class-macro-create 'unordered_map 2)

(def-func 'class/unordered_map/init)
	;inputs
	;r0 = unordered_map object
	;r1 = vtable pointer
	;r2 = key compare callback
	;r3 = num_buckets
	;outputs
	;r1 = 0 if error, else ok
	;trashes
	;r2-r3, r5-r8

	;init parent
	(s-call 'unordered_map 'init '(r0 r1 r2 r3) '(r1))
	(vpif '(r1 != 0))
		;init myself
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 r0 unordered_map_parent)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/unordered_map/deinit)
	;inputs
	;r0 = unordered_map object
	;trashes
	;all but r0, r4

	(vp-push r0)
	(f-call 'unordered_map 'deref_if '((r0 unordered_map_parent)))
	(vp-pop r0)
	(s-jmp 'unordered_map 'deinit '(r0))

(def-func-end)

(def-func 'class/unordered_map/copy)
	;inputs
	;r0 = unordered_map object
	;r1 = num buckets
	;outputs
	;r0 = unordered_map object
	;r1 = unordered_map copy
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_obj)	;must be first
		(ptr 'local_inst)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0) '((r4 local_inst)))

	(f-call 'unordered_map 'create '((r0 unordered_set_key_callback) r1) '((r4 local_obj)))
	(f-call 'unordered_map 'get_parent '((r4 local_inst)) '(r2))
	(f-call 'ref 'ref_if '(r2))
	(f-call 'unordered_map 'set_parent '((r4 local_obj) r2))
	(f-call 'unordered_map 'for_each '((r4 local_inst) ($ callback) r4) '(_ _))
	(vp-cpy-ir r4 local_obj r1)
	(vp-cpy-ir r0 unordered_set_length r2)
	(vp-cpy-ri r2 r1 unordered_set_length)

	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-ir r0 0 r2)
	(f-call 'ref 'ref '((r1 0)))
	(vp-push r0)
	(f-call 'unordered_map 'get_bucket '(r2 (r0 pair_first)) '(r0))
	(vp-pop r1)
	(f-jmp 'vector 'push_back '(r0 r1))

(def-func-end)

(def-func 'class/unordered_map/find)
	;inputs
	;r0 = unordered_map object
	;r1 = key object
	;outputs
	;r0 = unordered_map object
	;r1 = 0, else found iterator
	;r2 = bucket vector
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_key)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r1) '((r4 local_inst) (r4 local_key)))

	;search hash bucket
	(f-call 'unordered_map 'get_bucket '(r0 r1) '(r0))
	(f-call 'vector 'for_each '(r0 0 (r0 vector_length ui) ($ callback) r4) '(r1))
	(vp-cpy-rr r0 r2)
	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-ir r1 0 r1)
	(vp-cpy-ir r1 pair_first r1)
	(vp-cpy-ir r0 local_inst r2)
	(vp-cpy-ir r0 local_key r0)
	(vp-jmp-i r2 unordered_set_key_callback)

(def-func-end)

(def-func 'class/unordered_map/insert)
	;inputs
	;r0 = unordered_map object
	;r1 = key object
	;r2 = value object
	;outputs
	;r0 = unordered_map object
	;r1 = iterator
	;r2 = bucket vector
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_key)
		(ptr 'local_value)
		(ptr 'local_iter)
		(ptr 'local_bucket)
		(ptr 'local_pair)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r1 r2) '((r4 local_inst) (r4 local_key) (r4 local_value)))

	;search hash bucket
	(f-call 'unordered_map 'get_bucket '(r0 r1) '(r0))
	(f-call 'vector 'for_each '(r0 0 (r0 vector_length ui) ($ callback) r4) '(r1))
	(vp-cpy-ri r0 r4 local_bucket)
	(vpif '(r1 == 0))
		;new key
		(vp-cpy-ir r4 local_inst r0)
		(vp-cpy-ir r0 unordered_set_length r1)
		(vp-inc r1)
		(vp-cpy-ri r1 r0 unordered_set_length)
		(f-call 'ref 'ref '((r4 local_value)))
		(f-call 'ref 'ref '((r4 local_key)))
		(f-call 'pair 'create '(r0 (r4 local_value)) '(r0))
		(f-call 'vector 'push_back '((r4 local_bucket) r0))
		(vp-cpy-rr r0 r2)
		(vp-cpy-ir-ui r0 vector_length r1)
		(vp-cpy-ir r0 vector_array r0)
		(vp-shl-cr (pow2 ptr_size) r1)
		(vp-add-rr r1 r0)
		(vp-lea-i r0 (neg ptr_size) r1)
	(else)
		;old key
		(vp-cpy-ri r1 r4 local_iter)
		(vp-cpy-ir r1 0 r2)
		(vp-cpy-ri r2 r4 local_pair)
		(f-call 'ref 'ref '((r4 local_value)))
		(f-call 'ref 'deref '((r2 pair_second)))
		(vp-cpy-ir r4 local_value r0)
		(vp-cpy-ir r4 local_pair r2)
		(vp-cpy-ri r0 r2 pair_second)
		(vp-cpy-ir r4 local_iter r1)
		(vp-cpy-ir r4 local_bucket r2)
	(endif)

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-ir r1 0 r1)
	(vp-cpy-ir r1 pair_first r1)
	(vp-cpy-ir r0 local_inst r2)
	(vp-cpy-ir r0 local_key r0)
	(vp-jmp-i r2 unordered_set_key_callback)

(def-func-end)

(def-func 'class/unordered_map/slice)
	;inputs
	;r0 = unordered_map object
	;r1 = start element
	;r2 = end element
	;outputs
	;r0 = unordered_map object
	;r1 = unordered_map slice
	;trashes
	;all but r0, r4

	;save inputs
	(assign '(r0 r1 r2) '(r9 r10 r11))

	(f-call 'unordered_map 'create '((r0 unordered_set_key_callback) 1) '(r1))
	(vp-cpy-rr r11 r0)
	(vp-sub-rr r10 r0)
	(vp-cpy-ri r0 r1 unordered_set_length)
	(f-jmp 'unordered_map 'slice_impl '(r9 r1 ($ callback) r10 r11))

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-ir r0 0 r2)
	(f-call 'ref 'ref '((r1 0)))
	(vp-push r0)
	(f-call 'unordered_map 'get_bucket '(r2 (r0 pair_first)) '(r0))
	(vp-pop r1)
	(f-jmp 'vector 'push_back '(r0 r1))

(def-func-end)

(def-func 'class/unordered_map/set_parent)
	;inputs
	;r0 = unordered_map object
	;r1 = 0, else unordered_map parent
	;outputs
	;r0 = unordered_map object
	;trashs
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_obj)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r1) '((r4 local_inst) (r4 local_obj)))
	(f-call 'ref 'deref_if '((r0 unordered_map_parent)))
	(assign '((r4 local_inst) (r4 local_obj)) '(r0 r1))
	(vp-cpy-ri r1 r0 unordered_map_parent)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)
