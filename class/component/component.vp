(import 'sys/func.inc)
(import 'sys/kernel/kernel.inc)
(import 'sys/string/string.inc)
(import 'gui/gui.inc)
(import 'class/component/component.inc)
(import 'class/symbol/symbol.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/font/font.inc)
(import 'class/array/array.inc)

(gen-class 'component)

(def-func 'class/component/init)
	;inputs
	;r0 = component object
	;r1 = vtable pointer
	;outputs
	;r0 = component object
	;r1 = 0 if error, else ok

	;init parent
	(s-call 'component 'init '(r0 r1 0 1) '(r0 r1))
	(vpif '(r1 != 0))
		(f-bind 'gui_gui 'statics r1)
		(vp-cpy-ir r1 gui_statics_next_id r2)
		(vp-sub-cr 1 r2)
		(vp-cpy-ri r2 r1 gui_statics_next_id)
		(vp-cpy-ri r2 r0 component_id)
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 r0 component_tcb)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/component/find_owner)
	;inputs
	;r0 = component object
	;outputs
	;r1 = 0, else tcb of owner
	;trashes
	;r2

	;walk up tree to parent
	(vp-cpy-rr r0 r2)
	(loop-start)
		(vp-cpy-ir r2 component_tcb r1)
		(vp-cpy-ir r2 hash_map_parent r2)
		(breakif '(r1 != 0))
	(loop-until '(r2 == 0))
	(vp-ret)

(def-func-end)

(def-func 'class/component/emit)
	;inputs
	;r0 = component object
	;r1 = target id array
	;outputs
	;r0 = component object
	;trashes
	;all but r0

	(ptr 'this 'ids 'tcb 'msg 'data)
	(plong 'iter_begin 'iter_end)

	(push-scope)
	(f-entry 'component 'emit {this, ids})

	(f-call 'component 'find_owner {this} {_, tcb})
	(vpif {tcb})
		(f-call 'array 'get_iters {ids} {_, iter_begin, iter_end})
		(loop-while {iter_begin != iter_end})
			(f-call 'sys_mail 'alloc {ev_msg_action_size} {msg, data})
			(assign {&tcb->tk_node_mailbox} {msg->msg_dest.id_mbox})
			(f-call 'kernel 'id {} {msg->msg_dest.id_cpu})
			(assign {ev_type_action} {data->ev_msg_type})
			(assign {*iter_begin} {data->ev_msg_target_id})
			(assign {this->component_id} {data->ev_msg_action_source_id})
			(f-call 'sys_mail 'send {msg})
			(assign {iter_begin + long_size} {iter_begin})
		(loop-end)
	(endif)

	(f-exit 'component 'emit {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/component/get_prop_sym)
	;inputs
	;r0 = component object
	;r1 = property num
	;outputs
	;r0 = component object
	;r1 = property symbol object
	;trashes
	;all but r0

	(ptr 'this 'sym 'array)
	(pubyte 'next)
	(uint 'num 'length)

	(push-scope)
	(f-entry 'component 'get_prop_sym {this, num})

	(assign {ptr($symbols)} {array})
	(vpifnot {array})
		(f-call 'array 'create {} {array})
		(f-call 'array 'set_capacity (cat {array, } (str (length *props*))))
		(assign {$props} {next})
		(loop-start)
			(f-call 'symbol 'intern_cstr {next} {sym})
			(f-call 'array 'push_back {array, sym})
			(f-call 'sys_string 'length {next} {_, length})
			(assign {next + length + byte_size} {next})
		(loop-until {next == $props_end})
		(assign {array} {ptr($symbols)})
	(endif)
	(f-call 'array 'get_element {array, num} {_, sym})

	(f-exit 'component 'get_prop_sym {this, sym})
	(pop-scope)
	(return)

;;;;;;;;;;;;;;;;;;
; interned symbols
;;;;;;;;;;;;;;;;;;

	(vp-align ptr_size)
(vp-label 'symbols)
	(vp-long 0)

(vp-label 'props)
	(each (lambda (_) (vp-string _) (vp-byte 0)) *props*)
(vp-label 'props_end)

(def-func-end)

(def-func 'class/component/ref_prop)
	;inputs
	;r0 = component object
	;r1 = property num
	;outputs
	;r0 = component object
	;r1 = 0 else, property object ref
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'sym)
		'(ptr 'obj))
	(ulong 'num)

	(push-scope)
	(f-entry 'component 'ref_prop {this, num})

	(f-call 'component 'get_prop_sym {this, num} {_, sym})
	(f-call 'component 'get {this, sym} {_, obj})

	(f-exit 'component 'ref_prop {this, obj})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/component/get_prop)
	;inputs
	;r0 = component object
	;r1 = property num
	;outputs
	;r0 = component object
	;r1 = 0 else, property object
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'sym)
		'(ptr 'obj))
	(ulong 'num)

	(push-scope)
	(f-entry 'component 'get_prop {this, num})

	(f-call 'component 'get_prop_sym {this, num} {_, sym})
	(f-call 'component 'get {this, sym} {_, obj})
	(f-call 'ref 'deref_if {obj})

	(f-exit 'component 'get_prop {this, obj})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/component/set_long_prop)
	;inputs
	;r0 = component object
	;r1 = property num
	;r2 = property value (long)
	;outputs
	;r0 = component object
	;trashes
	;all but r0

	(ptr 'this 'sym 'prop)
	(ulong 'num 'value)

	(push-scope)
	(f-entry 'component 'set_long_prop {this, num, value})

	(f-call 'component 'get_prop_sym {this, num} {_, sym})
	(f-call 'boxed_long 'create {value} {prop})
	(f-call 'component 'insert {this, sym, prop})
	(f-call 'boxed_long 'deref {prop})

	(f-exit 'component 'set_long_prop {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/component/get_long_prop)
	;inputs
	;r0 = component object
	;r1 = property num
	;outputs
	;r0 = component object
	;r1 = property value (long)
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'sym)
		'(ptr 'prop))
	(union
		'(ulong 'num)
		'(ulong 'value))

	(push-scope)
	(f-entry 'component 'get_long_prop {this, num})

	(f-call 'component 'get_prop_sym {this, num} {_, sym})
	(f-call 'component 'get {this, sym} {_, prop})
	(assign {0} {value})
	(vpif {prop})
		(f-call 'boxed_long 'get_value {prop} {_, value})
		(f-call 'boxed_long 'deref {prop})
	(endif)

	(f-exit 'component 'get_long_prop {this, value})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/component/set_font_prop)
	;inputs
	;r0 = component object
	;r1 = property num
	;r2 = font name pointer (ctsr)
	;r3 = font size
	;outputs
	;r0 = component object
	;trashes
	;all but r0

	(ptr 'this 'sym)
	(union
		'(ptr 'name)
		'(ptr 'font))
	(ulong 'num 'points)

	(push-scope)
	(f-entry 'component 'set_font_prop {this, num, name, points})

	(f-call 'component 'get_prop_sym {this, num} {_, sym})
	(f-call 'font 'open {name, points} {font})
	(vpif {font})
		(f-call 'component 'insert {this, sym, font})
		(f-call 'font 'deref {font})
	(endif)

	(f-exit 'component 'set_font_prop {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/component/set_string_prop)
	;inputs
	;r0 = component object
	;r1 = property num
	;r2 = string pointer (ctsr)
	;outputs
	;r0 = component object
	;trashes
	;all but r0

	(ptr 'this 'sym 'str)
	(ulong 'num)

	(push-scope)
	(f-entry 'component 'set_string_prop {this, num, str})

	(f-call 'component 'get_prop_sym {this, num} {_, sym})
	(f-call 'string 'create_from_cstr {str} {str})
	(f-call 'component 'insert {this, sym, str})
	(f-call 'string 'deref {str})

	(f-exit 'component 'set_string_prop {this})
	(pop-scope)
	(return)

(def-func-end)
