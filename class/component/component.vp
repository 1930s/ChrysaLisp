(import 'sys/func.inc)
(import 'sys/string/string.inc)
(import 'gui/gui.inc)
(import 'class/component/component.inc)
(import 'class/symbol/symbol.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/font/font.inc)
(import 'class/array/array.inc)

(gen-class 'component)

(def-func 'class/component/init)
	;inputs
	;r0 = component object
	;r1 = vtable pointer
	;outputs
	;r0 = component object
	;r1 = 0 if error, else ok

	;init parent
	(s-call 'component 'init '(r0 r1 0 1) '(r0 _))

	;init myself
	(vp-lea-i r0 component_slot_list r1)
	(lh-init r1 r2)
	(vp-ret)

(def-func-end)

(def-func 'class/component/deinit)
	;inputs
	;r0 = component object
	;trashes
	;all but r0

	;disconnnect all slots
	(f-call 'component 'disconnect_slot '(r0 0) '(r0))

	;deinit parent
	(s-jmp 'component 'deinit '(r0))

(def-func-end)

(def-func 'class/component/connect)
	;inputs
	;r0 = component object
	;r1 = signal list
	;r2 = target component object
	;r3 = target address
	;trashes
	;all but r0

	;save inputs
	(f-entry 'component 'connect '(r4 r5 r6 r7))

	;create sigslot record
	(f-call 'sys_mem 'alloc '(gui_sigslot_size) '(r0 _))

	;fill in target and method
	(vp-cpy-ri r6 r0 gui_sigslot_inst)
	(vp-cpy-ri r7 r0 gui_sigslot_addr)

	;add to sig and slot lists
	(vp-lea-i r0 gui_sigslot_sig_node r2)
	(lh-add-at-tail r5 r2 r3)
	(vp-lea-i r0 gui_sigslot_slot_node r2)
	(vp-lea-i r4 component_slot_list r5)
	(lh-add-at-tail r5 r2 r3)

	;restore this
	(f-exit 'component 'connect '(r4))
	(vp-ret)

(def-func-end)

(def-func 'class/component/disconnect_sig)
	;inputs
	;r0 = component object
	;r1 = signal list
	;trashes
	;r1-r5

	;save inputs
	(f-entry 'component 'disconnect_sig '(r4 r5))

	;disconnect signal
	(loop-list-forward r1 0 r0 r3)
		;remove from slot list
		(vp-sub-cr gui_sigslot_sig_node r0)
		(vp-lea-i r0 gui_sigslot_slot_node r1)
		(ln-remove-node r1 r2)

		;free sigslot record
		(f-call 'sys_mem 'free '(r0))
	(loop-end)

	;clear signal list
	(lh-init r5 r0)

	;restore this
	(f-exit 'component 'disconnect_sig '(r4))
	(vp-ret)

(def-func-end)

(def-func 'class/component/disconnect_slot)
	;inputs
	;r0 = component object
	;r1 = 0 for all, else target address
	;trashes
	;r1-r5

	;save inputs
	(f-entry 'component 'disconnect_slot '(r4 r5))

	;disconnect slots
	(loop-list-forward r0 component_slot_list r0 r3)
		(gotoif '(r5 == 0) 'freeit)
		(vp-cpy-ir r0 gui_sigslot_addr r2)
		(continueif '(r5 != r2))
	(vp-label 'freeit)
		;remove from slot list
		(vp-cpy-rr r0 r1)
		(ln-remove-node r1 r2)

		;remove from signal list
		(vp-sub-cr gui_sigslot_slot_node r0)
		(vp-lea-i r0 gui_sigslot_sig_node r1)
		(ln-remove-node r1 r2)

		;free sigslot record
		(f-call 'sys_mem 'free '(r0))
	(loop-end)

	;restore this
	(f-exit 'component 'disconnect_slot '(r4))
	(vp-ret)

(def-func-end)

(def-func 'class/component/emit)
	;inputs
	;r0 = component object
	;r1 = signal list
	;trashes
	;all but r0
		;callback api
		;r0 = target this
		;r1 = source this
		;r14 = dispatch register
		;rest as passed by call to emit
		;callback should normally save register the signal sends
		;but it could filter or adjust them for fancy reasons !

	(def-struct 'local)
		(ptr 'this)
		(ptr 'next)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(f-entry 'component 'emit '((rsp local_this) r1))

	;emit the signal
	(loop-list-forward r1 0 r0 r1)
		(vp-cpy-ri r1 rsp local_next)

		;call method on target component object
		(vp-cpy-ir r0 gui_sigslot_addr r14)
		(vp-cpy-ir r0 gui_sigslot_inst r0)
		(vp-cpy-ir rsp local_this r1)
		(vp-call-r r14)

		(vp-cpy-ir rsp local_next r1)
	(loop-end)

	;restore this
	(f-exit 'component 'emit '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/component/get_prop_sym)
	;inputs
	;r0 = component object
	;r1 = property num
	;outputs
	;r0 = component object
	;r1 = property symbol object
	;trashes
	;all but r0

	(ptr 'this 'sym 'array)
	(pubyte 'next)
	(uint 'num 'length)

	(push-scope)
	(f-entry 'component 'get_prop_sym {this, num})

	(assign {ptr($symbols)} {array})
	(vpifnot {array})
		(f-call 'array 'create {} {array})
		(f-call 'array 'set_capacity (cat {array, } (str (length *props*))))
		(assign {$props} {next})
		(loop-start)
			(f-call 'symbol 'intern_cstr {next} {sym})
			(f-call 'array 'push_back {array, sym})
			(f-call 'sys_string 'length {next} {_, length})
			(assign {next + length + byte_size} {next})
		(loop-until {next == $props_end})
		(assign {array} {ptr($symbols)})
	(endif)
	(f-call 'array 'get_element {array, num} {_, sym})

	(f-exit 'component 'get_prop_sym {this, sym})
	(pop-scope)
	(return)

;;;;;;;;;;;;;;;;;;
; interned symbols
;;;;;;;;;;;;;;;;;;

	(vp-align ptr_size)
(vp-label 'symbols)
	(vp-long 0)

(vp-label 'props)
	(each (lambda (_) (vp-string _) (vp-byte 0)) *props*)
(vp-label 'props_end)

(def-func-end)

(def-func 'class/component/ref_prop)
	;inputs
	;r0 = component object
	;r1 = property num
	;outputs
	;r0 = component object
	;r1 = 0 else, property object ref
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'sym)
		'(ptr 'obj))
	(ulong 'num)

	(push-scope)
	(f-entry 'component 'ref_prop {this, num})

	(f-call 'component 'get_prop_sym {this, num} {_, sym})
	(f-call 'component 'get {this, sym} {_, obj})

	(f-exit 'component 'ref_prop {this, obj})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/component/get_prop)
	;inputs
	;r0 = component object
	;r1 = property num
	;outputs
	;r0 = component object
	;r1 = 0 else, property object
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'sym)
		'(ptr 'obj))
	(ulong 'num)

	(push-scope)
	(f-entry 'component 'get_prop {this, num})

	(f-call 'component 'get_prop_sym {this, num} {_, sym})
	(f-call 'component 'get {this, sym} {_, obj})
	(f-call 'ref 'deref_if {obj})

	(f-exit 'component 'get_prop {this, obj})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/component/set_long_prop)
	;inputs
	;r0 = component object
	;r1 = property num
	;r2 = property value (long)
	;outputs
	;r0 = component object
	;trashes
	;all but r0

	(ptr 'this 'sym 'prop)
	(ulong 'num 'value)

	(push-scope)
	(f-entry 'component 'set_long_prop {this, num, value})

	(f-call 'component 'get_prop_sym {this, num} {_, sym})
	(f-call 'boxed_long 'create {} {prop})
	(f-call 'boxed_long 'set_value {prop, value})
	(f-call 'component 'insert {this, sym, prop})
	(f-call 'boxed_long 'deref {prop})

	(f-exit 'component 'set_long_prop {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/component/get_long_prop)
	;inputs
	;r0 = component object
	;r1 = property num
	;outputs
	;r0 = component object
	;r1 = property value (long)
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'sym)
		'(ptr 'prop))
	(union
		'(ulong 'num)
		'(ulong 'value))

	(push-scope)
	(f-entry 'component 'get_long_prop {this, num})

	(f-call 'component 'get_prop_sym {this, num} {_, sym})
	(f-call 'component 'get {this, sym} {_, prop})
	(assign {0} {value})
	(vpif {prop})
		(f-call 'boxed_long 'get_value {prop} {_, value})
		(f-call 'boxed_long 'deref {prop})
	(endif)

	(f-exit 'component 'get_long_prop {this, value})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/component/set_font_prop)
	;inputs
	;r0 = component object
	;r1 = property num
	;r2 = font name pointer (ctsr)
	;r3 = font size
	;outputs
	;r0 = component object
	;trashes
	;all but r0

	(ptr 'this 'sym)
	(union
		'(ptr 'name)
		'(ptr 'font))
	(ulong 'num 'points)

	(push-scope)
	(f-entry 'component 'set_font_prop {this, num, name, points})

	(f-call 'component 'get_prop_sym {this, num} {_, sym})
	(f-call 'font 'open {name, points} {font})
	(vpif {font})
		(f-call 'component 'insert {this, sym, font})
		(f-call 'font 'deref {font})
	(endif)

	(f-exit 'component 'set_font_prop {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/component/set_string_prop)
	;inputs
	;r0 = component object
	;r1 = property num
	;r2 = string pointer (ctsr)
	;outputs
	;r0 = component object
	;trashes
	;all but r0

	(ptr 'this 'sym 'str)
	(ulong 'num)

	(push-scope)
	(f-entry 'component 'set_string_prop {this, num, str})

	(f-call 'component 'get_prop_sym {this, num} {_, sym})
	(f-call 'string 'create_from_cstr {str} {str})
	(f-call 'component 'insert {this, sym, str})
	(f-call 'string 'deref {str})

	(f-exit 'component 'set_string_prop {this})
	(pop-scope)
	(return)

(def-func-end)
