(import 'sys/func.inc)
(import 'gui/gui.inc)
(import 'class/component/component.inc)

(gen-class 'component)

(def-func 'class/component/init)
	;inputs
	;r0 = component object
	;r1 = vtable pointer
	;outputs
	;r0 = component object
	;r1 = 0 if error, else ok

	;init parent
	(s-call 'component 'init '(r0 r1) '(r0 _))

	;init myself
	(vp-lea-i r0 component_slot_list r1)
	(lh-init r1 r2)
	(vp-ret)

(def-func-end)

(def-func 'class/component/deinit)
	;inputs
	;r0 = component object
	;trashes
	;all but r0

	;disconnnect all slots
	(f-call 'component 'disconnect_slot '(r0 0) '(r0))

	;deinit parent
	(s-jmp 'component 'deinit '(r0))

(def-func-end)

(def-func 'class/component/connect)
	;inputs
	;r0 = component object
	;r1 = signal list
	;r2 = target component object
	;r3 = target address
	;trashes
	;all but r0

	;save inputs
	(f-entry 'component 'connect '(r4 r5 r6 r7))

	;gui sigslot heap
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_sigslot_heap r0)

	;create sigslot record
	(f-call 'sys_heap 'alloc '(r0) '(_ r1))

	;fill in target and method
	(vp-cpy-ri r6 r1 gui_sigslot_inst)
	(vp-cpy-ri r7 r1 gui_sigslot_addr)

	;add to sig and slot lists
	(vp-lea-i r1 gui_sigslot_sig_node r2)
	(lh-add-at-tail r5 r2 r3)
	(vp-lea-i r1 gui_sigslot_slot_node r2)
	(vp-lea-i r4 component_slot_list r5)
	(lh-add-at-tail r5 r2 r3)

	;restore this
	(f-exit 'component 'connect '(r4))
	(vp-ret)

(def-func-end)

(def-func 'class/component/disconnect_sig)
	;inputs
	;r0 = component object
	;r1 = signal list
	;trashes
	;all but r0

	;save inputs
	(f-entry 'component 'disconnect_sig '(r6 r5))

	;gui sigslot heap
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_sigslot_heap r0)

	;disconnect signal
	(loop-list-forward r1 0 r2 r3)
		;remove from slot list
		(vp-sub-cr gui_sigslot_sig_node r2)
		(vp-lea-i r2 gui_sigslot_slot_node r1)
		(ln-remove-node r1 r4)

		;free sigslot record
		(hp-freecell r0 r2 r1)
	(loop-end)

	;clear signal list
	(lh-init r5 r1)

	;restore this
	(f-exit 'component 'disconnect_sig '(r6))
	(vp-ret)

(def-func-end)

(def-func 'class/component/disconnect_slot)
	;inputs
	;r0 = component object
	;r1 = 0 for all, else target address
	;trashes
	;all but r0

	;save inputs
	(f-entry 'component 'disconnect_slot '(r6 r5))

	;gui sigslot heap
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_sigslot_heap r0)

	;disconnect slots
	(loop-list-forward r6 component_slot_list r2 r3)
		(gotoif '(r5 == 0) 'freeit)
		(vp-cpy-ir r2 gui_sigslot_addr r4)
		(continueif '(r5 != r4))
	(vp-label 'freeit)
		;remove from slot list
		(vp-cpy-rr r2 r1)
		(ln-remove-node r1 r4)

		;remove from signal list
		(vp-sub-cr gui_sigslot_slot_node r2)
		(vp-lea-i r2 gui_sigslot_sig_node r1)
		(ln-remove-node r1 r4)

		;free sigslot record
		(hp-freecell r0 r2 r1)
	(loop-end)

	;restore this
	(f-exit 'component 'disconnect_slot '(r6))
	(vp-ret)

(def-func-end)

(def-func 'class/component/emit)
	;inputs
	;r0 = component object
	;r1 = signal list
	;trashes
	;all but r0
		;callback api
		;r0 = target this
		;r1 = source this
		;r14 = dispatch register
		;rest as passed by call to emit
		;callback should normally save register the signal sends
		;but it could filter or adjust them for fancy reasons !

	(def-struct 'local)
		(ptr 'this)
		(ptr 'next)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(f-entry 'component 'emit '((rsp local_this) r1))

	;emit the signal
	(loop-list-forward r1 0 r0 r1)
		(vp-cpy-ri r1 rsp local_next)

		;call method on target component object
		(vp-cpy-ir r0 gui_sigslot_addr r14)
		(vp-cpy-ir r0 gui_sigslot_inst r0)
		(vp-cpy-ir rsp local_this r1)
		(vp-call-r r14)

		(vp-cpy-ir rsp local_next r1)
	(loop-end)

	;restore this
	(f-exit 'component 'emit '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)
