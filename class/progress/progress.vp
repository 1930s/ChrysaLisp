(import 'sys/func.inc)
(import 'gui/gui.inc)
(import 'gui/ctx/ctx.inc)
(import 'class/progress/progress.inc)

(gen-new 'progress)
(gen-create 'progress)
(gen-class 'progress)

(def-func 'class/progress/draw)
	;inputs
	;r0 = window object
	;r1 = ctx object
	;trashes
	;all but r0

	(ptr 'this 'ctx)
	(long 'max 'val)
	(uint 'infill 'width 'height 'col)

	;save inputs
	(push-scope)
	(f-entry 'progress 'draw {this, ctx})

	;get properties
	(f-call 'progress 'get_long_prop {this, prop_progress_max} {_, max})
	(f-call 'progress 'get_long_prop {this, prop_progress_val} {_, val})

	;draw outline
	(f-call 'progress 'get_color {this} {_, col})
	(f-call 'gui_ctx 'set_color {ctx, col})
	(f-call 'progress 'get_bounds {this} {_, _, _, width, height})
	(f-call 'gui_ctx 'box {ctx, 0, 0, width, height})

	;draw middle left
	(f-call 'gui_ctx 'darker {col} {col})
	(f-call 'gui_ctx 'set_color {ctx, col})
	(assign {(val * (width - 2)) // max} {infill})
	(f-call 'gui_ctx 'filled_box {ctx, 1, 1, infill, height - 2})

	;draw middle right
	(f-call 'gui_ctx 'darker {col} {col})
	(f-call 'gui_ctx 'set_color {ctx, col})
	(f-call 'gui_ctx 'filled_box {ctx, infill + 1, 1, width - 2 - infill, height - 2})

	(f-exit 'progress 'draw {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/progress/layout)
	;inputs
	;r0 = progress object
	;trashes
	;all but r0

	(f-jmp 'progress 'opaque '(r0))

(def-func-end)

(def-func 'class/progress/pref_size)
	;inputs
	;r0 = progress object
	;outputs
	;r9 = preferred width
	;r10 = preferred height
	;trashes
	;all but r0

	(vp-cpy-cr 256 r9)
	(vp-cpy-cr 10 r10)
	(vp-ret)

(def-func-end)
