(import 'inc/func.inc)
(import 'class/class_unordered_set.inc)
(import 'class/class_vector.inc)

(def-func 'class/unordered_set/get_bucket)
	;inputs
	;r0 = unordered_set object
	;r1 = key object
	;outputs
	;r0 = unordered_set object
	;r1 = bucket vector
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_length)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(set-src r0)
	(set-dst [r4 + local_inst])
	(map-src-to-dst)

	;search hash bucket
	(vp-cpy-ir r0 unordered_set_buckets r2)
	(vp-cpy-ir r2 vector_length r2)
	if r2, !=, 1
		(vp-cpy-ri r2 r4 local_length)
		v_call obj, hash, {r1}, {r0}
		(vp-cpy-ir r4 local_length r1)
		(vp-xor-rr r2 r2)
		(vp-div-u r1 r2 r0)
		(vp-cpy-ir r4 local_inst r0)
	else
		(vp-xor-rr r2 r2)
	endif
	f_call vector, get_element, {[r0 + unordered_set_buckets], r2}, {r1}

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)
