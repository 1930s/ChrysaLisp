(import 'inc/func.inc)
(import 'class/class_unordered_set.inc)
(import 'class/class_vector.inc)

(def-func 'class/unordered_set/insert)
	;inputs
	;r0 = unordered_set object
	;r1 = key object
	;outputs
	;r0 = unordered_set object
	;r1 = iterator
	;r2 = bucket vector
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_key)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(set-src '(r0, r1))
	(set-dst '([ r4 + local_inst ] , [ r4 + local_key ]))
	(map-src-to-dst)

	;search hash bucket
	(f-call 'unordered_set 'get_bucket '(r0, r1) '(r0))
	(f-call 'vector 'for_each '(r0, 0, [ r0 + vector_length ] , $callback, r4) '(r1))
	(vp-cpy-rr r0 r2)
	(vpif '(r1 == 0))
		;new key
		(vp-cpy-ir r4 local_inst r0)
		(vp-cpy-ir r0 unordered_set_length r1)
		(vp-inc r1)
		(vp-cpy-ri r1 r0 unordered_set_length)
		(f-call 'ref 'ref '([ r4 + local_key ]))
		(f-call 'vector 'push_back '(r2, r0))
		(vp-cpy-rr r0 r2)
		(vp-cpy-ir r0 vector_length r1)
		(vp-cpy-ir r0 vector_array r0)
		(vp-lea-ir r0 (r1 * ptr_size) - ptr_size r1)
	(endif)

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-ir r1 r1)
	(vp-cpy-ir r0 local_inst r2)
	(vp-cpy-ir r0 local_key r0)
	(vp-jmp-i r2 unordered_set_key_callback)

(def-func-end)
