(import 'inc/func.inc)
(import 'class/class_unordered_set.inc)
(import 'class/class_vector.inc)

(def-func 'class/unordered_set/get_iter)
	;inputs
	;r0 = unordered_set object
	;r1 = element index
	;outputs
	;r0 = unordered_set object
	;r1 = element iterator
	;r2 = bucket iterator
	;trashes
	;r3, r5

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_iter)
		(ptr 'local_bucket)
		(ulong 'local_index)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(set-src '(r0, r1))
	(set-dst '((r4 local_inst) , (r4 local_index)))
	(map-src-to-dst)

	;search hash buckets
	(vp-cpy-ir r0 unordered_set_buckets r0)
	(f-call 'vector 'for_each '(r0, 0, (r0 vector_length) , $callback, r4) '(_))

	(vp-cpy-ir r4 local_inst r0)
	(vp-cpy-ir r4 local_iter r1)
	(vp-cpy-ir r4 local_bucket r2)
	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-rr r0 r5)
	(vp-cpy-ir r1 r0)
	(vp-cpy-ir r0 vector_length r2)
	(vp-cpy-ir r5 local_index r3)
	(vpif '(r3 > r2))
		(vp-sub-rr r2 r3)
		(vp-cpy-ri r3 r5 local_index)
	(else)
		(vp-cpy-ri r1 r5 local_bucket)
		(vp-cpy-ir r0 vector_array r1)
		(vp-mul-cr ptr_size r3)
		(vp-add-rr r3 r1)
		(vp-cpy-ri r1 r5 local_iter)
		(vp-xor-rr r1 r1)
	(endif)
	(vp-ret)

(def-func-end)
