(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/unordered_set/unordered_set.inc)

(gen-new 'unordered_set)
(gen-create 'unordered_set 2)

(def-func 'class/unordered_set/init)
	;inputs
	;r0 = unordered_set object
	;r1 = vtable pointer
	;r2 = key compare callback
	;r3 = num_buckets
	;outputs
	;r1 = 0 if error, else ok
	;trashes
	;r2-r3, r5-r8

	(def-struct 'local)
		(ptr 'local_inst)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r2 r3) '((r4 local_inst) (r0 unordered_set_key_callback) (r0 unordered_set_num_buckets i)))

	;init parent
	(s-call 'unordered_set 'init '(r0 r1) '(_ r1))
	(vpif '(r1 != 0))
		;init myself
		(vp-xor-rr r1 r1)
		(vp-cpy-ri-i r1 r0 unordered_set_length)
		(f-call 'vector 'create '() '(r0))
		(vp-cpy-ir r4 local_inst r1)
		(vp-cpy-ri r0 r1 unordered_set_buckets)
		(vp-cpy-ir-ui r1 unordered_set_num_buckets r1)
		(vpif '(r1 != 1))
			(vp-cpy-ri-i r1 r0 vector_length)
			(f-call 'vector 'set_capacity '(r0 r1))
			(f-call 'vector 'for_each '(r0 0 (r0 vector_length ui) ($ callback) 0) '(_ r1))
			(vp-add-cr 1 r1)
		(endif)
		(vp-cpy-ir r4 local_inst r0)
	(endif)

	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-push r1)
	(f-call 'vector 'create '() '(r1))
	(vp-pop r0)
	(vp-cpy-ri r1 r0 0)
	(vp-ret)

(def-func-end)

(def-func 'class/unordered_set/deinit)
	;inputs
	;r0 = unordered_set object
	;trashes
	;all but r0, r4

	(vp-push r0)
	(f-call 'vector 'deref '((r0 unordered_set_buckets)))
	(vp-pop r0)
	(s-jmp 'unordered_set 'deinit '(r0))

(def-func-end)

(def-func 'class/unordered_set/clear)
	;inputs
	;r0 = unordered_set object
	;outputs
	;r0 = unordered_set object
	;trashes
	;all but r0, r4

	;clear all buckets
	(vp-push r0)
	(vp-cpy-ir-ui r0 unordered_set_num_buckets r1)
	(vp-cpy-ir r0 unordered_set_buckets r0)
	(vpif '(r1 == 1))
		(f-call 'vector 'clear '(r0))
		(vp-xor-rr r1 r1)
	(else)
		(f-call 'vector 'for_each '(r0 0 r1 ($ callback) 0) '(_ r1))
	(endif)
	(vp-pop r0)
	(vp-cpy-ri-i r1 r0 unordered_set_length)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(f-call 'vector 'clear '((r1 0)))
	(vp-cpy-cr 1 r1)
	(vp-ret)

(def-func-end)

(def-func 'class/unordered_set/copy)
	;inputs
	;r0 = unordered_set object
	;r1 = num buckets
	;outputs
	;r0 = unordered_set object
	;r1 = unordered_set copy
	;trashes
	;all but r0, r4

	(vp-cpy-rr r0 r9)
	(f-call 'unordered_set 'create '((r0 unordered_set_key_callback) r1) '(r0))
	(vp-push r0)
	(f-call 'unordered_set 'for_each '(r9 ($ callback) r4))
	(vp-pop r1)
	(vp-cpy-ir-ui r0 unordered_set_length r2)
	(vp-cpy-ri-i r2 r1 unordered_set_length)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-ir r0 0 r2)
	(f-call 'ref 'ref '((r1 0)))
	(vp-push r0)
	(f-call 'unordered_set 'get_bucket '(r2 r0) '(_ r0))
	(vp-pop r1)
	(f-jmp 'vector 'push_back '(r0 r1))

(def-func-end)

(def-func 'class/unordered_set/erase)
	;inputs
	;r0 = unordered_set object
	;r1 = iterator
	;r2 = bucket vector
	;outputs
	;r0 = unordered_set object
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_iter)
		(ptr 'local_bucket)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r1 r2) '((r4 local_inst) (r4 local_iter) (r4 local_bucket)))

	(vp-cpy-ir-ui r0 unordered_set_length r2)
	(vp-sub-cr 1 r2)
	(vp-cpy-ri-i r2 r0 unordered_set_length)

	;swap last entry for erased entry
	(f-call 'ref 'deref '((r1 0)))
	(vp-cpy-ir r4 local_bucket r0)
	(vp-cpy-ir-ui r0 vector_length r1)
	(vp-sub-cr 1 r1)
	(vp-cpy-ri-i r1 r0 vector_length)
	(vp-shl-cr (pow2 ptr_size) r1)
	(vp-cpy-ir r0 vector_array r0)
	(vp-add-rr r0 r1)
	(vp-cpy-ir r4 local_iter r0)
	(vpif '(r1 != r0))
		(vp-cpy-ir r1 0 r1)
		(vp-cpy-ri r1 r0 0)
	(endif)

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/unordered_set/find)
	;inputs
	;r0 = unordered_set object
	;r1 = key object
	;outputs
	;r0 = unordered_set object
	;r1 = 0, else found iterator
	;r2 = bucket vector
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_key)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r1) '((r4 local_inst) (r4 local_key)))

	;search hash bucket
	(f-call 'unordered_set 'get_bucket '(r0 r1) '(_ r0))
	(f-call 'vector 'for_each '(r0 0 (r0 vector_length ui) ($ callback) r4) '(_ r1))
	(vp-cpy-rr r0 r2)
	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-ir r1 0 r1)
	(vp-cpy-ir r0 local_inst r2)
	(vp-cpy-ir r0 local_key r0)
	(vp-jmp-i r2 unordered_set_key_callback)

(def-func-end)

(def-func 'class/unordered_set/for_each)
	;inputs
	;r0 = unordered_set object
	;r1 = predicate function pointer
	;r2 = predicate data pointer
	;outputs
	;r0 = unordered_set object
	;r1 = 0, else break iterator
	;r2 = 0, else bucket vector
	;trashes
	;all but r0, r4
		;callback predicate
		;inputs
		;r0 = predicate data pointer
		;r1 = element iterator
		;outputs
		;r1 = 0 if break, else not
		;trashes
		;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_predicate)
		(ptr 'local_predicate_data)
		(ptr 'local_iter)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0) '((r4 local_inst)))

	;for all buckets
	(vp-cpy-ir-ui r0 unordered_set_num_buckets r3)
	(vp-cpy-ir r0 unordered_set_buckets r0)
	(vpif '(r3 == 1))
		(f-call 'vector 'for_each '(r0 0 (r0 vector_length ui) r1 r2) '(_ r2))
		(vpif '(r2 != 0))
			(vp-cpy-rr r0 r2)
		(endif)
	(else)
		(assign '(r1 r2) '((r4 local_predicate) (r4 local_predicate_data)))
		(f-call 'vector 'for_each '(r0 0 r3 ($ callback) r4) '(_ r2))
		(vpif '(r2 != 0))
			(vp-cpy-ir r2 0 r2)
			(vp-cpy-ir r4 local_iter r1)
		(endif)
	(endif)
	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-push r0)
	(vp-cpy-rr r0 r2)
	(vp-cpy-ir r1 0 r0)
	(f-call 'vector 'for_each '(r0 0 (r0 vector_length ui) (r2 local_predicate) (r2 local_predicate_data)) '(_ r1))
	(vp-pop r0)
	(vp-cpy-ri r1 r0 local_iter)
	(vpif '(r1 == 0))
		(vp-add-cr 1 r1)
	(else)
		(vp-xor-rr r1 r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/unordered_set/get_bucket)
	;inputs
	;r0 = unordered_set object
	;r1 = key object
	;outputs
	;r0 = unordered_set object
	;r1 = bucket vector
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(uint 'local_length)
	(def-struct-end)

	;search hash bucket
	(vp-cpy-ir-ui r0 unordered_set_num_buckets r2)
	(vpif '(r2 != 1))
		;save inputs
		(vp-sub-cr local_size r4)
		(assign '(r0 r2) '((r4 local_inst) (r4 local_length i)))

		(v-call 'obj 'hash '(r1) '(_ r0))
		(vp-cpy-ir-ui r4 local_length r1)
		(vp-xor-rr r2 r2)
		(vp-div-rrr-u r1 r2 r0)
		(vp-cpy-ir r4 local_inst r0)
		(f-call 'vector 'get_element '((r0 unordered_set_buckets) r2) '(r1)

		(vp-cpy-ir r4 local_inst r0)
		(vp-add-cr local_size r4)
	(else)
		(vp-cpy-ir r0 unordered_set_buckets r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/unordered_set/get_length)
	;inputs
	;r0 = unordered_set object
	;outputs
	;r0 = unordered_set object
	;r1 = length

	(vp-cpy-ir-ui r0 unordered_set_length r1)
	(vp-ret)

(def-func-end)

(def-func 'class/unordered_set/insert)
	;inputs
	;r0 = unordered_set object
	;r1 = key object
	;outputs
	;r0 = unordered_set object
	;r1 = iterator
	;r2 = bucket vector
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_key)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r1) '((r4 local_inst) (r4 local_key)))

	;search hash bucket
	(f-call 'unordered_set 'get_bucket '(r0 r1) '(_ r0))
	(f-call 'vector 'for_each '(r0 0 (r0 vector_length ui) ($ callback) r4) '(_ r1))
	(vp-cpy-rr r0 r2)
	(vpif '(r1 == 0))
		;new key
		(vp-cpy-ir r4 local_inst r0)
		(vp-cpy-ir-ui r0 unordered_set_length r1)
		(vp-add-cr 1 r1)
		(vp-cpy-ri-i r1 r0 unordered_set_length)
		(f-call 'ref 'ref '((r4 local_key)))
		(f-call 'vector 'push_back '(r2 r0))
		(vp-cpy-rr r0 r2)
		(vp-cpy-ir-ui r0 vector_length r1)
		(vp-cpy-ir r0 vector_array r0)
		(vp-shl-cr (pow2 ptr_size) r1)
		(vp-add-rr r1 r0)
		(vp-lea-i r0 (neg ptr_size) r1)
	(endif)

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-ir r1 0 r1)
	(vp-cpy-ir r0 local_inst r2)
	(vp-cpy-ir r0 local_key r0)
	(vp-jmp-i r2 unordered_set_key_callback)

(def-func-end)

(def-func 'class/unordered_set/ref_element)
	;inputs
	;r0 = unordered_set object
	;r1 = element index
	;outputs
	;r0 = unordered_set object
	;r1 = element
	;trashes
	;r2-r3

	(vp-push r0)
	(vp-cpy-ir-ui r0 unordered_set_num_buckets r2)
	(vp-cpy-ir r0 unordered_set_buckets r0)
	(vpif '(r2 != 1))
		(vp-cpy-ir r0 vector_array r2)
		(loop-start)
			(vp-cpy-ir r2 0 r0)
			(vp-cpy-ir-ui r0 vector_length r3)
			(breakif '(r1 < r3))
			(vp-sub-rr r3 r1)
			(vp-add-cr ptr_size r2)
		(loop-end)
	(endif)
	(d-call 'vector 'ref_element '(r0 r1) '(_ r1))
	(vp-pop r0)
	(vp-ret)

(def-func-end)
