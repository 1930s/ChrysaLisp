(import 'inc/func.inc)
(import 'class/class_unordered_set.inc)
(import 'class/class_vector.inc)

(def-func 'class/unordered_set/erase)
	;inputs
	;r0 = unordered_set object
	;r1 = iterator
	;r2 = bucket vector
	;outputs
	;r0 = unordered_set object
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_iter)
		(ptr 'local_bucket)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(set-src '(r0, r1, r2))
	(set-dst '([ r4 + local_inst ] , [ r4 + local_iter ] , [ r4 + local_bucket ]))
	(map-src-to-dst)

	(vp-cpy-ir r0 unordered_set_length r2)
	(vp-dec r2)
	(vp-cpy-ri r2 r0 unordered_set_length)

	;swap last entry for erased entry
	(f-call 'ref 'deref '([ r1 ]))
	(vp-cpy-ir r4 local_bucket r0)
	(vp-cpy-ir r0 vector_length r1)
	(vp-dec r1)
	(vp-cpy-ri r1 r0 vector_length)
	(vp-mul-cr ptr_size r1)
	(vp-add-ir r0 vector_array r1)
	(vp-cpy-ir r4 local_iter r0)
	(vpif '(r1 != r0))
		(vp-cpy-ir r1 r1)
		(vp-cpy-ri r1 r0)
	(endif)

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)
