(import 'inc/func.inc)
(import 'class/class_unordered_set.inc)
(import 'class/class_vector.inc)

(def-func 'class/unordered_set/for_each)
	;inputs
	;r0 = unordered_set object
	;r1 = predicate function pointer
	;r2 = predicate data pointer
	;outputs
	;r0 = unordered_set object
	;r1 = 0, else break iterator
	;r2 = 0, else bucket vector
	;trashes
	;all but r0, r4
		;callback predicate
		;inputs
		;r0 = predicate data pointer
		;r1 = element iterator
		;outputs
		;r1 = 0 if break, else not
		;trashes
		;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_predicate)
		(ptr 'local_predicate_data)
		(ptr 'local_iter)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(set-src r0, r1, r2)
	(set-dst [r4 + local_inst], [r4 + local_predicate], [r4 + local_predicate_data])
	(map-src-to-dst)

	;for all buckets
	(vp-cpy-ir r0 unordered_set_buckets r0)
	(f-call 'vector 'for_each '(r0, 0, [r0 + vector_length], $callback, r4) '(r2))
	if r2, !=, 0
		(vp-cpy-ir r2 r2)
	endif
	(vp-cpy-ir r4 local_iter r1)
	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

callback:
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	vp_push r0
	(vp-cpy-rr r0 r2)
	(vp-cpy-ir r1 r0)
	(f-call 'vector 'for_each '(r0, 0, [r0 + vector_length], [r2 + local_predicate], [r2 + local_predicate_data]) '(r1))
	vp_pop r0
	(vp-cpy-ri r1 r0 local_iter)
	if r1, ==, 0
		(vp-cpy-cr 1 r1)
	else
		(vp-xor-rr r1 r1)
	endif
	(vp-ret)

(def-func-end)
