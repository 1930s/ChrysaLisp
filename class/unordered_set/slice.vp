(import 'inc/func.inc)
(import 'class/class_unordered_set.inc)
(import 'class/class_vector.inc)

(def-func 'class/unordered_set/slice)
	;inputs
	;r0 = unordered_set object
	;r1 = start element
	;r2 = end element
	;outputs
	;r0 = unordered_set object
	;r1 = unordered_set slice
	;trashes
	;all but r0, r4

	;save inputs
	(set-src r0, r1, r2)
	(set-dst r9, r10, r11)
	(map-src-to-dst)

	(f-call 'unordered_set 'create '([r0 + unordered_set_key_callback], 1) '(r1))
	(vp-cpy-rr r11 r0)
	(vp-sub-rr r10 r0)
	(vp-cpy-ri r0 r1 unordered_set_length)
	(f-jmp 'unordered_set 'slice_impl '(r9, r1, $callback, r10, r11))

callback:
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(vp-cpy-ir r0 r2)
	(f-call 'ref 'ref '([r1]))
	vp_push r0
	(f-call 'unordered_set 'get_bucket '(r2, r0) '(r0))
	vp_pop r1
	(f-jmp 'vector 'push_back '(r0, r1))

(def-func-end)
