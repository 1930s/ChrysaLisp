(import 'inc/func.inc)
(import 'class/class_unordered_set.inc)
(import 'class/class_vector.inc)

(def-func 'class/unordered_set/init)
	;inputs
	;r0 = unordered_set object
	;r1 = vtable pointer
	;r2 = key compare callback
	;r3 = num_buckets
	;outputs
	;r1 = 0 if error, else ok
	;trashes
	;r2-r3, r5-r8

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_num_buckets)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(set-src r0, r2, r3)
	(set-dst [r4 + local_inst], [r0 + unordered_set_key_callback], [r4 + local_num_buckets])
	(map-src-to-dst)

	;init parent
	s_call unordered_set, init, {r0, r1}, {r1}
	if r1, !=, 0
		;init myself
		(vp-xor-rr r1 r1)
		(vp-cpy-ri r1 r0 unordered_set_length)
		(f-call 'vector 'create '() '(r0))
		(vp-cpy-ir r4 local_inst r1)
		(vp-cpy-ri r0 r1 unordered_set_buckets)
		(f-call 'vector 'set_capacity '(r0, [r4 + local_num_buckets]))
		(vp-cpy-ir r4 local_num_buckets r1)
		(vp-cpy-ri r1 r0 vector_length)
		(f-call 'vector 'for_each '(r0, 0, r1, $callback, 0) '(_))
		(vp-cpy-ir r4 local_inst r0)
		(vp-cpy-cr 1 r1)
	endif

	(vp-add-cr local_size r4)
	(vp-ret)

callback:
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	vp_push r1
	(f-call 'vector 'create '() '(r1))
	vp_pop r0
	(vp-cpy-ri r1 r0)
	(vp-ret)

(def-func-end)
