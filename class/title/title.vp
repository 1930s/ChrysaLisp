(import 'inc/func.inc)
(import 'inc/gui.inc)
(import 'inc/font.inc)
(import 'class/window/window.inc)
(import 'class/title/title.inc)
(import 'class/flow/flow.inc)

(class-macro-new 'title)
(class-macro-create 'title)

(def-func 'class/title/draw)
	;inputs
	;r0 = view object
	;r1 = ctx object
	;trashes
	;all but r0, r4

	;draw panel
	(f-jmp 'title 'draw_panel '(r0 r1 1 title_border_size))

(def-func-end)

(def-func 'class/title/layout)
	;inputs
	;r0 = title object
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0) '((r4 local_inst)))

	(vp-cpy-ir-i r0 view_w r10)
	(vp-cpy-ir-i r0 view_h r11)
	(vp-sub-cr (mul title_border_size 2) r10)
	(vp-sub-cr (mul title_border_size 2) r11)
	(f-call 'flow 'change '((r0 label_flow) title_border_size title_border_size r10 r11))

	(f-call 'title 'opaque '((r4 local_inst)))
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/title/mouse_down)
	;inputs
	;r0 = title object
	;r1 = mouse event message
	;trashes
	;all but r0, r4

	(vp-push r0)
	(vp-cpy-ir-i r1 ev_msg_rx r8)
	(vp-cpy-ir-i r1 ev_msg_ry r9)
	(vp-cpy-ri-i r8 r0 title_last_x)
	(vp-cpy-ri-i r9 r0 title_last_y)
	(vp-cpy-ir r0 view_parent r0)
	(vp-cpy-ir r0 view_parent r0)
	(f-call 'window 'to_front '(r0))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/title/mouse_move)
	;inputs
	;r0 = title object
	;r1 = mouse event message
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(long 'local_window)
		(long 'local_event)
		(int 'local_old_x)
		(int 'local_old_y)
	(def-struct-end)

	;save old window bounds
	(vp-sub-cr local_size r4)
	(vp-cpy-ri r0 r4 local_inst)
	(vp-cpy-ri r1 r4 local_event)
	(vp-cpy-ir r0 view_parent r0)
	(vp-cpy-ir r0 view_parent r0)
	(vp-cpy-ri r0 r4 local_window)
	(vp-cpy-ir-i r0 view_x r8)
	(vp-cpy-ir-i r0 view_y r9)
	(vp-cpy-ri-i r8 r4 local_old_x)
	(vp-cpy-ri-i r9 r4 local_old_y)

	;dirty old area
	(f-call 'window 'dirty '(r0))

	;get new window position
	(vp-cpy-ir r4 local_inst r0)
	(f-call 'title 'get_relative '(r0 (r4 local_window) (r0 title_last_x i) (r0 title_last_y i)) '(r8 r9))
	(vp-cpy-ir r4 local_event r1)
	(vp-cpy-ir-i r1 ev_msg_x r10)
	(vp-cpy-ir-i r1 ev_msg_y r11)
	(vp-sub-rr r10 r8)
	(vp-sub-rr r11 r9)
	(vp-mul-cr -1 r8)
	(vp-mul-cr -1 r9)

	;change window position
	(vp-cpy-ir r4 local_window r0)
	(vp-cpy-ri-i r8 r0 view_x)
	(vp-cpy-ri-i r9 r0 view_y)

	;translate old dirty area and dirty all
	(vp-cpy-ir-i r4 local_old_x r10)
	(vp-cpy-ir-i r4 local_old_y r11)
	(vp-sub-rr r10 r8)
	(vp-sub-rr r11 r9)
	(vp-mul-cr -1 r8)
	(vp-mul-cr -1 r9)
	(vp-lea-i r0 view_dirty_region r1)
	(f-call 'gui_region 'translate '(r1 r8 r9))
	(f-call 'window 'dirty_all '((r4 local_window)))

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/title/pref_size)
	;inputs
	;r0 = flow object
	;outputs
	;r10 = prefered width
	;r11 = prefered height
	;trashes
	;all but r0, r4

	(s-call 'title 'pref_size '(r0) '(r10 r11))
	(vp-add-cr (mul title_border_size 2) r10)
	(vp-add-cr (mul title_border_size 2) r11)
	(vp-ret)

(def-func-end)
