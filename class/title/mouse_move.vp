(import 'inc/func.inc)
(import 'inc/gui.inc)
(import 'class/class_title.inc)
(import 'class/class_window.inc)

(def-func 'class/title/mouse_move)
	;inputs
	;r0 = title object
	;r1 = mouse event message
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(long 'local_window)
		(long 'local_event)
		(long 'local_old_x)
		(long 'local_old_y)
	(def-struct-end)

	;save old window bounds
	(vp-sub-cr local_size r4)
	(vp-cpy-ri r0 r4 local_inst)
	(vp-cpy-ri r1 r4 local_event)
	(vp-cpy-ir r0 view_parent r0)
	(vp-cpy-ir r0 view_parent r0)
	(vp-cpy-ri r0 r4 local_window)
	(vp-cpy-ir r0 view_x r8)
	(vp-cpy-ir r0 view_y r9)
	(vp-cpy-ri r8 r4 local_old_x)
	(vp-cpy-ri r9 r4 local_old_y)

	;dirty old area
	f_call window, dirty, {r0}

	;get new window position
	(vp-cpy-ir r4 local_inst r0)
	(f-call 'title 'get_relative '(r0, [r4 + local_window], [r0 + title_last_x], [r0 + title_last_y]) '(r8, r9))
	(vp-cpy-ir r4 local_event r1)
	(vp-sub-ir r1 ev_msg_x r8)
	(vp-sub-ir r1 ev_msg_y r9)
	(vp-mul-cr -1 r8)
	(vp-mul-cr -1 r9)

	;change window position
	(vp-cpy-ir r4 local_window r0)
	(vp-cpy-ri r8 r0 view_x)
	(vp-cpy-ri r9 r0 view_y)

	;translate old dirty area and dirty all
	(vp-sub-ir r4 local_old_x r8)
	(vp-sub-ir r4 local_old_y r9)
	(vp-mul-cr -1 r8)
	(vp-mul-cr -1 r9)
	(vp-lea-ir r0 view_dirty_region r1)
	f_call gui_region, translate, {r1, r8, r9}
	f_call window, dirty_all, {[r4 + local_window]}

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)
