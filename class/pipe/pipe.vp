(import 'sys/func.inc)
(import 'class/string/string.inc)
(import 'class/msg_in/msg_in.inc)
(import 'class/msg_out/msg_out.inc)
(import 'class/slave/slave.inc)
(import 'class/pipe/pipe.inc)

(gen-new 'pipe)
(gen-create 'pipe)
(gen-class 'pipe)

(def-func 'class/pipe/select)
	;inputs
	;r0 = pipe object (ptr)
	;r1 = user mailbox (ptr)
	;outputs
	;r0 = pipe object (ptr)
	;r1 = mailbox with mail (ptr)
	;trashes
	;all but r0

	(ptr 'this 'mailbox)
	(uint 'length)

	(push-scope)
	(f-entry 'pipe 'select {this, mailbox})

	;wait on user and pipe mailboxes
	(assign {mailbox} {*this->pipe_select_array})
	(d-call 'vector 'get_length {this->pipe_streams} {_, length})
	(f-call 'sys_mail 'select {this->pipe_select_array, length} {mailbox})

	(f-exit 'pipe 'select {this, mailbox})
	(pop-scope)
	(return)

(def-func-end)
