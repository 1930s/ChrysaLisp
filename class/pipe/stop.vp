(import 'sys/func.inc)
(import 'class/string/string.inc)
(import 'class/stream_msg_out/stream_msg_out.inc)
(import 'class/stream_msg_in/stream_msg_in.inc)
(import 'class/slave/slave.inc)
(import 'class/pipe/pipe.inc)

(def-func 'class/pipe/stop)
	;inputs
	;r0 = pipe object
	;trashes
	;all but r0

	(ptr 'this 'stream)
	(uint 'length)

	(push-scope)
	(f-entry 'pipe 'stop {this})

	(vpif {this->pipe_state != stream_mail_state_stopped})
		;flush remaining
		(f-call 'pipe 'get_input {this} {_, stream})
		(v-call 'stream_msg_out 'write_flush {stream})

		;send stopping
		(f-call 'stream_msg_out 'set_state {stream, stream_mail_state_stopping})
		(v-call 'stream_msg_out 'write_next {stream})
		(v-call 'stream_msg_out 'write_flush {stream})

		;send stopped
		(f-call 'stream_msg_out 'set_state {stream, stream_mail_state_stopped})
		(v-call 'stream_msg_out 'write_next {stream})
		(v-call 'stream_msg_out 'write_flush {stream})

		;wait for all stopped, starting with the pipe output, then the error streams
		(d-call 'vector 'get_length {this->pipe_streams} {_, length})
		(loop-start)
			(assign {length - 1} {length})
			(breakifnot {length})
			(f-call 'vector 'get_element {this->pipe_streams, length} {_, stream})
			(loop-start)
				(v-call 'stream_msg_in 'read_next {stream})
			(loop-until {stream->stream_msg_in_state == stream_mail_state_stopped})
		(loop-end)

		;free streams, select and mailbox array
		(f-call 'vector 'deref {this->pipe_streams})
		(f-call 'sys_mem 'free {this->pipe_select_array})
		(f-call 'sys_mem 'free {this->pipe_mailbox_array})

		;stop state
		(assign {stream_mail_state_stopped} {this->pipe_state})
	(endif)

	(f-exit 'pipe 'stop {this})
	(pop-scope)
	(return)

(def-func-end)
