(import 'sys/func.inc)
(import 'class/string/class.inc)
(import 'class/msg_out/class.inc)
(import 'class/msg_in/class.inc)
(import 'class/slave/class.inc)
(import 'class/pipe/class.inc)

(def-method 'pipe 'deinit)
	;inputs
	;r0 = pipe object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'stream)
	(uint 'length)

	(push-scope)
	(f-entry 'pipe 'deinit {this})

	;flush remaining
	(f-call 'pipe 'get_input {this} {_, stream})
	(v-call 'msg_out 'write_flush {stream})

	;send stopping
	(f-call 'msg_out 'set_state {stream, stream_mail_state_stopping})
	(v-call 'msg_out 'write_next {stream})
	(v-call 'msg_out 'write_flush {stream})

	;send stopped
	(f-call 'msg_out 'set_state {stream, stream_mail_state_stopped})
	(v-call 'msg_out 'write_next {stream})
	(v-call 'msg_out 'write_flush {stream})

	;wait for all stopped, starting with the pipe output, then the error streams
	(d-call 'vector 'get_length {this->pipe_streams} {_, length})
	(loop-start)
		(assign {length - 1} {length})
		(breakifnot {length})
		(f-call 'vector 'get_element {this->pipe_streams, length} {_, stream})
		(loop-while {stream->msg_in_state != stream_mail_state_stopped})
			(f-call 'msg_in 'next_msg {stream})
		(loop-end)
	(loop-end)

	;free streams, select and mailbox array
	(f-call 'vector 'deref {this->pipe_streams})
	(f-call 'sys_mem 'free {this->pipe_select_array})

	;deinit parent
	(f-exit 'pipe 'deinit {this})
	(pop-scope)
	(s-jmp 'pipe 'deinit '(r0))

(def-func-end)
