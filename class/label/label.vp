(import 'inc/func.inc)
(import 'class/text/text.inc)
(import 'class/label/label.inc)
(import 'class/flow/flow.inc)

(gen-new 'label)
(gen-create 'label)

(def-func 'class/label/init)
	;inputs
	;r0 = label object
	;r1 = vtable pointer
	;outputs
	;r1 = 0 if error, else ok

	;init parent
	(s-call 'label 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		(vp-push r0)

		;init myself
		;add my flow
		(f-call 'flow 'create '() '(r0))
		(f-call 'flow 'set_flags '(r0 0))
		(f-call 'flow 'set_flow_flags '(r0 (bit-or flow_flag_right flow_flag_align_vcenter)))
		(vp-cpy-ir r4 0 r2)
		(vp-cpy-ri r0 r2 label_flow)
		(v-call 'label 'add_child '(r2 r0))

		;add my text
		(f-call 'text 'create '() '(r0))
		(vp-cpy-ir r4 0 r1)
		(vp-cpy-ri r0 r1 label_text)
		(f-call 'text 'set_color '(r0 0))
		(vp-cpy-ir r4 0 r2)
		(v-call 'flow 'add_child '((r2 label_flow) r0))

		(vp-pop r0)
		(vp-cpy-cr 1 r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/label/draw)
	;inputs
	;r0 = view object
	;r1 = ctx object
	;trashes
	;all but r0, r4

	;draw panel
	(f-jmp 'label 'draw_panel '(r0 r1 1 label_border_size))

(def-func-end)

(def-func 'class/label/get_text)
	;inputs
	;r0 = label object
	;outputs
	;r0 = label object
	;r1 = 0, else string object

	(def-struct 'local)
		(ptr 'inst)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0) '((r4 local_inst)))

	(f-call 'text 'get_text '((r0 label_text)) '(_ r1))

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/label/ref_text)
	;inputs
	;r0 = label object
	;outputs
	;r0 = label object
	;r1 = 0, else string object

	(def-struct 'local)
		(ptr 'inst)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0) '((r4 local_inst)))

	(f-call 'text 'ref_text '((r0 label_text)) '(_ r1))

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/label/layout)
	;inputs
	;r0 = label object
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'inst)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0) '((r4 local_inst)))

	(vp-cpy-ir-i r0 view_w r10)
	(vp-cpy-ir-i r0 view_h r11)
	(vp-sub-cr (mul label_border_size 2) r10)
	(vp-sub-cr (mul label_border_size 2) r11)
	(f-call 'flow 'change '((r0 label_flow) label_border_size label_border_size r10 r11))

	(vp-cpy-ir r4 local_inst r0)
	(vp-cpy-ir-ui r0 view_color r1)
	(vp-shr-cr 24 r1)
	(vpif '(r1 == 0xff))
		(f-call 'label 'opaque '(r0))
	(endif)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/label/pref_size)
	;inputs
	;r0 = label object
	;outputs
	;r10 = prefered width
	;r11 = prefered height
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'inst)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0) '((r4 local_inst)))

	(v-call 'flow 'pref_size '((r0 label_flow)) '(_ r10 r11))
	(vp-add-cr (mul label_border_size 2) r10)
	(vp-add-cr (mul label_border_size 2) r11)
	(vp-cpy-ir r4 local_inst r0)
	(vp-cpy-ir r0 view_min_w r8)
	(vp-cpy-ir r0 view_min_h r9)
	(vpif '(r8 > r10))
		(vp-cpy-rr r8 r10)
	(endif)
	(vpif '(r9 > r11))
		(vp-cpy-rr r9 r11)
	(endif)

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/label/set_flow_flags)
	;inputs
	;r0 = label object
	;r1 = flags

	(vp-push r0)
	(f-call 'flow 'set_flow_flags '((r0 label_flow) r1))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/label/set_font)
	;inputs
	;r0 = label object
	;r1 = font name
	;r2 = point size
	;trashes
	;all but r0, r4

	(vp-push r0)
	(f-call 'text 'set_font '((r0 label_text) r1 r2))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/label/set_text)
	;inputs
	;r0 = label object
	;r1 = 0, else string pointer
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'inst)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0) '((r4 local_inst)))

	(f-call 'text 'set_text '((r0 label_text) r1))

	(vp-cpy-ir r4 local_inst r0)
	(v-call 'label 'layout '((r0 label_flow)))

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/label/set_text_color)
	;inputs
	;r0 = label object
	;r1 = color
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'inst)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0) '((r4 local_inst)))

	(f-call 'text 'set_text_color '((r0 label_text) r1))

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)
