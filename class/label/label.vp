(import 'sys/func.inc)
(import 'class/text/text.inc)
(import 'class/label/label.inc)
(import 'class/flow/flow.inc)

(gen-new 'label)
(gen-create 'label)
(gen-class 'label)

(def-func 'class/label/init)
	;inputs
	;r0 = label object
	;r1 = vtable pointer
	;outputs
	;r0 = label object
	;r1 = 0 if error, else ok
	;trashes
	;all but r0

	(ptr 'this)
	(union
		'(ptr 'vtable)
		'(ulong 'ok))

	(push-scope)
	(f-entry 'label 'init {this, vtable})

	;init parent
	(s-call 'label 'init {this, vtable} {_, ok})
	(vpif {ok})
		;add my flow
		(f-call 'flow 'create {} {this->label_flow})
		(f-call 'flow 'set_flags {this->label_flow, 0})
		(v-call 'label 'add_child {this, this->label_flow})
		(f-call 'label 'set_long_prop {this, prop_flow_flags, flow_flag_right | flow_flag_align_vcenter})
		(f-call 'label 'set_long_prop {this, prop_border, 0})

		;add my text
		(f-call 'text 'create {} {this->label_text})
		(v-call 'flow 'add_child {this->label_flow, this->label_text})
	(endif)

	(f-exit 'label 'init {this, ok})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/label/draw)
	;inputs
	;r0 = view object
	;r1 = ctx object
	;trashes
	;all but r0

	(ptr 'this 'ctx)
	(uint 'depth)

	(push-scope)
	(f-entry 'label 'draw {this, ctx})

	;draw panel
	(f-call 'label 'get_long_prop {this, prop_border} {_, depth})
	(f-call 'label 'draw_panel {this, ctx, 1, depth})

	(f-exit 'label 'draw {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/label/get_text)
	;inputs
	;r0 = label object
	;outputs
	;r0 = label object
	;r1 = 0, else string object
	;trashes
	;none

	(f-entry 'label 'get_text '(r0))

	(vp-push r0)
	(f-call 'text 'get_text '((r0 label_text)) '(_ r1))
	(vp-pop r0)

	(f-exit 'label 'get_text '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'class/label/ref_text)
	;inputs
	;r0 = label object
	;outputs
	;r0 = label object
	;r1 = 0, else string object
	;trashes
	;none

	(f-entry 'label 'ref_text '(r0))

	(vp-push r0)
	(f-call 'text 'ref_text '((r0 label_text)) '(_ r1))
	(vp-pop r0)

	(f-exit 'label 'ref_text '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'class/label/layout)
	;inputs
	;r0 = label object
	;trashes
	;all but r0

	(ptr 'this)
	(uint 'col 'depth)

	(push-scope)
	(f-entry 'label 'layout {this})

	(f-call 'label 'get_long_prop {this, prop_border} {_, depth})
	(f-call 'flow 'change {this->label_flow, depth, depth,
		this->view_w - (depth * 2), this->view_h - (depth * 2)})

	(f-call 'label 'get_long_prop {this, prop_color} {_, col})
	(vpif {col >> 24 == 0xff})
		(f-call 'label 'opaque {this})
	(endif)

	(f-exit 'label 'layout {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/label/pref_size)
	;inputs
	;r0 = label object
	;outputs
	;r9 = preferred width
	;r10 = preferred height
	;trashes
	;all but r0

	(ptr 'this)
	(uint 'depth 'w 'h)

	(push-scope)
	(f-entry 'label 'pref_size {this})

	(f-call 'label 'get_long_prop {this, prop_border} {_, depth})
	(v-call 'flow 'pref_size {this->label_flow} {_, w, h})
	(vpif {this->view_min_w > w})
		(assign {this->view_min_w} {w})
	(endif)
	(vpif {this->view_min_h > h})
		(assign {this->view_min_h} {h})
	(endif)

	(f-exit 'label 'pref_size {this, w + (depth * 2), h + (depth * 2)})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/label/set_text)
	;inputs
	;r0 = label object
	;r1 = 0, else string pointer
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(assign '(r0) '((rsp local_this)))

	(f-call 'text 'set_text '((r0 label_text) r1))

	(vp-cpy-ir rsp local_this r0)
	(v-call 'label 'layout '((r0 label_flow)))

	(vp-cpy-ir rsp local_this r0)
	(vp-free local_size)
	(vp-ret)

(def-func-end)
