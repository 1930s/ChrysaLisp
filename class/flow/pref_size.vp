(import 'inc/func.inc)
(import 'class/class_flow.inc)

(def-func 'class/flow/pref_size)
	;inputs
	;r0 = flow object
	;outputs
	;r10 = prefered width
	;r11 = prefered height
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(long 'local_w)
		(long 'local_h)
	(def-struct-end)

	(vp-sub-cr local_size r4)
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 r4 local_w)
	(vp-cpy-ri r1 r4 local_h)

	(f-call 'flow 'forward '(r0, r4, $callback))

	(vp-cpy-ir r4 local_w r10)
	(vp-cpy-ir r4 local_h r11)
	(vp-add-cr local_size r4)
	(vp-ret)

callback:
	(vp-push r1)
	(v-call 'view 'pref_size '(r0) '(r10, r11))
	(vp-pop r1)
	(vp-cpy-ir r0 view_parent r2)
	(vp-cpy-ir r2 flow_flags r3)
	(vp-and-cr flow_flag_up | flow_flag_down r3)
	(vpif '(r3 != 0))
		;flow down or up
		(vp-cpy-ir r1 local_h r3)
		(vp-add-rr r11 r3)
		(vp-cpy-ri r3 r1 local_h)
	(endif)
	(vp-cpy-ir r2 flow_flags r3)
	(vp-and-cr flow_flag_left | flow_flag_right r3)
	(vpif '(r3 != 0))
		;flow left or right
		(vp-cpy-ir r1 local_w r3)
		(vp-add-rr r10 r3)
		(vp-cpy-ri r3 r1 local_w)
	(endif)
	(vpif '(r10 > [r1 + local_w]))
		(vp-cpy-ri r10 r1 local_w)
	(endif)
	(vpif '(r11 > [r1 + local_h]))
		(vp-cpy-ri r11 r1 local_h)
	(endif)
	(vp-ret)

(def-func-end)
