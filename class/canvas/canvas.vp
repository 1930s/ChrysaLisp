(import 'sys/func.inc)
(import 'gui/sdl2.inc)
(import 'class/text/text.inc)
(import 'class/canvas/canvas.inc)
(import 'class/flow/flow.inc)
(import 'class/vector/vector.inc)
(import 'class/points/points.inc)
(import 'class/symbol/symbol.inc)
(import 'class/stream_str/stream_str.inc)
(import 'class/pair/pair.inc)
(import 'gui/ctx/ctx.inc)

(gen-new 'canvas)
(gen-class 'canvas)

(def-func 'class/canvas/create)
	;inputs
	;r0 = width (pixels)
	;r1 = height (pixels)
	;r2 = aa scale (16.16)
	;outputs
	;r0 = 0 if error, else canvas object (ptr)
	;trashes
	;all

	;save inputs
	(f-entry 'canvas 'create '(r4 r5 r6))

	;create new object
	(f-call 'canvas 'new nil '(r0))
	(vpif '(r0 != 0))
		;init the object
		(f-call 'canvas 'init `(r0 (@ ,(f-path 'class 'canvas)) r4 r5 r6) '(r0 r1))
		(vpif '(r1 == 0))
			;error with init
			(v-call 'canvas 'delete '(r0) '() 'r1)
			(vp-xor-rr r0 r0)
		(endif)
	(endif)

	(f-exit 'canvas 'create '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/create_shared)
	;inputs
	;r0 = source canvas object (ptr)
	;outputs
	;r0 = 0 if error, else canvas object (ptr)
	;trashes
	;all

	;save inputs
	(f-entry 'canvas 'create_shared '(r4))

	;create new object
	(f-call 'canvas 'new nil '(r0))
	(vpif '(r0 != 0))
		;init the object
		(f-call 'canvas 'init1 `(r0 (@ ,(f-path 'class 'canvas)) r4) '(r0 r1))
		(vpif '(r1 == 0))
			;error with init
			(v-call 'canvas 'delete '(r0) '() 'r1)
			(vp-xor-rr r0 r0)
		(endif)
	(endif)

	(f-exit 'canvas 'create_shared '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/init)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = vtable (pptr)
	;r2 = width (pixels)
	;r3 = height (pixels)
	;r4 = aa scale (16.16)
	;outputs
	;r0 = canvas object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all

	(ptr 'this)
	(union
		'(ptr 'vtable)
		'(ulong 'ok))

	;save inputs
	(push-scope)
	(f-entry 'canvas 'init {this, vtable, this->canvas_width, this->canvas_height, this->canvas_aa_scale})

	;init parent
	(s-call 'canvas 'init {this, vtable} {_, ok})
	(vpif {ok})
		(assign {0} {this->canvas_texture})
		(assign {0} {this->canvas_resize_buf})
		(assign {0} {this->canvas_resize_buf_size})
		(assign {0} {this->canvas_cx})
		(assign {0} {this->canvas_cy})

		(assign {1.0 </ this->canvas_aa_scale} {this->canvas_aa_scale_r})
		(assign {this->canvas_aa_scale *> this->canvas_width} {this->canvas_width})
		(assign {this->canvas_aa_scale *> this->canvas_height} {this->canvas_height})
		(assign {this->canvas_width} {this->canvas_cx1})
		(assign {this->canvas_height} {this->canvas_cy1})
		(assign {this->canvas_width * int_size} {this->canvas_stride})

		;alloc pixel array
		(f-call 'array 'create nil {this->canvas_array})
		(f-call 'array 'set_capacity {this->canvas_array, (this->canvas_stride * this->canvas_height) >> 3})

		;edge arrays, sort interval stack
		(f-call 'array 'create nil {this->canvas_edges})
		(f-call 'array 'create nil {this->canvas_edge_tracker})
		(f-call 'array 'create nil {this->canvas_stack})
	(endif)

	(f-exit 'canvas 'init {this, ok})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/canvas/init1)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = vtable (pptr)
	;r2 = source canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all

	(ptr 'this 'src)
	(union
		'(ptr 'vtable)
		'(ulong 'ok))

	;save inputs
	(push-scope)
	(f-entry 'canvas 'init1 {this, vtable, src})

	;init parent
	(s-call 'canvas 'init {this, vtable} {_, ok})
	(vpif {ok})
		(assign {0} {this->canvas_texture})
		(assign {0} {this->canvas_resize_buf})
		(assign {0} {this->canvas_resize_buf_size})
		(assign {0} {this->canvas_cx})
		(assign {0} {this->canvas_cy})

		(assign {src->canvas_aa_scale} {this->canvas_aa_scale})
		(assign {src->canvas_aa_scale_r} {this->canvas_aa_scale_r})
		(assign {src->canvas_width} {this->canvas_width})
		(assign {src->canvas_height} {this->canvas_height})
		(assign {src->canvas_width} {this->canvas_cx1})
		(assign {src->canvas_height} {this->canvas_cy1})
		(assign {src->canvas_stride} {this->canvas_stride})

		;ref src pixel array
		(f-call 'obj 'ref {src->canvas_array} {this->canvas_array})

		;edge arrays, sort interval stack
		(f-call 'array 'create nil {this->canvas_edges})
		(f-call 'array 'create nil {this->canvas_edge_tracker})
		(f-call 'array 'create nil {this->canvas_stack})
	(endif)

	(f-exit 'canvas 'init1 {this, ok})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/canvas/deinit)
	;inputs
	;r0 = canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	;kernel callback
	(vp-push r0)
	(f-call 'sys_task 'callback '(r0 ($ callback)))
	(vp-pop r0)
	(s-jmp 'canvas 'deinit '(r0))

(vp-label 'callback)
	;inputs
	;r0 = user data

	(def-struct 'local)
		(ptr 'this)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack for SDL
	(vp-cpy-rr rsp r1)
	(vp-alloc local_size)
	(vp-and-cr -16 rsp)
	(l-entry '((rsp local_this) (rsp local_old_stack)))

	;free edge trackers, sort intervals
	(vp-cpy-ir rsp local_this r0)
	(f-call 'array 'deref '((r0 canvas_edges)))
	(vp-cpy-ir rsp local_this r0)
	(f-call 'array 'deref '((r0 canvas_edge_tracker)))
	(vp-cpy-ir rsp local_this r0)
	(f-call 'array 'deref '((r0 canvas_stack)))

	;free any pixel buffer
	(vp-cpy-ir rsp local_this r0)
	(f-call 'array 'deref '((r0 canvas_array)))

	;free any resize buffer
	(vp-cpy-ir rsp local_this r0)
	(f-call 'sys_mem 'free '((r0 canvas_resize_buf)))

	;free any sdl texture
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir r0 canvas_texture r1)
	(vpif '(r1 != 0))
		(sdl-call 'sdl 'sdl_destroy_texture '(r1))
	(endif)

	(vp-cpy-ir rsp local_old_stack rsp)
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/load)
	;inputs
	;r0 = c string (pubyte)
	;outputs
	;r0 = 0 if error, else shared canvas object (ptr)
	;trashes
	;all

	(ptr 'this 'name 'hash 'sym)
	(union
		'(ptr 'stream)
		'(pptr 'iter))

	(push-scope)
	(f-entry 'canvas 'load {name})

	;create hash map ?
	(assign {ptr($canvass)} {hash})
	(vpifnot {hash})
		(f-call 'hash_map 'create {0, 1} {hash})
		(assign {hash} {ptr($canvass)})
	(endif)

	;create interned name, lookup in map
	(f-call 'symbol 'intern_cstr {name} {sym})
	(f-call 'hash_map 'find {hash, sym} {_, iter, _})
	(vpifnot {iter})
		;open file stream
		(f-call 'string 'create_from_file {name} {this})
		(breakifnot {this})
		(f-call 'stream_str 'create {this} {stream})
		(f-call 'canvas 'load_cpm {stream} {this})
		(f-call 'stream_str 'deref {stream})
		(breakifnot {this})
		(f-call 'hash_map 'insert {hash, sym, this})
		(f-call 'canvas 'create_shared {this} {this})
	(else)
		(f-call 'pair 'get_second {*iter} {_, this})
		(f-call 'canvas 'create_shared {this} {this})
	(endif)
	(f-call 'symbol 'deref {sym})

	(f-exit 'canvas 'load {this})
	(pop-scope)
	(return)

;;;;;;;;;;;;;;;;;
; interned canvas
;;;;;;;;;;;;;;;;;

	(vp-align ptr_size)
(vp-label 'canvass)
	(vp-long 0)

(def-func-end)

(def-func 'class/canvas/draw)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = draw ctx (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
		(ptr 'ctx)
		(ptr 'surface)
		(ptr 'temp_canvas)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack to 16 bytes for SDl
	(vp-cpy-rr rsp r2)
	(vp-alloc local_size)
	(vp-and-cr -16 rsp)
	(vp-cpy-ri r2 rsp local_old_stack)

	;save inputs
	(f-entry 'canvas 'draw '((rsp local_this) (rsp local_ctx)))

	;if no texture then create from pixel buffer
	(vp-cpy-ir r0 canvas_texture r1)
	(vpif '(r1 == 0))
		;create SDL surface from pixel buffer, convert to texture
		(f-call 'canvas 'create '((r0 canvas_width ui) (r0 canvas_height ui) (r0 canvas_aa_scale_r i)) '(r0))
		(vp-cpy-ir-i r0 canvas_aa_scale_r r1)
		(vp-cpy-ri r0 rsp local_temp_canvas)
		(vpif '(r1 == 1.0))
			(f-call 'canvas 'as_argb '(r0 (rsp local_this)))
		(else)
			(f-call 'canvas 'resize '(r0 (rsp local_this)))
			(f-call 'canvas 'as_argb '(r0 r0))
		(endif)
		(vp-cpy-ir r0 canvas_array r9)
		(sdl-call 'sdl 'sdl_create_rgb_surface_from '((r9 array_array) (r0 canvas_width ui) (r0 canvas_height ui)
							32 (r0 canvas_stride ui) 0xff0000 0xff00 0xff 0xff000000))
		(vp-cpy-ri r0 rsp local_surface)
		(vp-cpy-ir rsp local_ctx r2)
		(sdl-call 'sdl 'sdl_create_texture_from_surface '((r2 gui_ctx_sdl_ctx) r0))
		(vp-cpy-ir rsp local_this r1)
		(vp-cpy-ri r0 r1 canvas_texture)
		(sdl-call 'sdl 'sdl_free_surface '((rsp local_surface)))
		(f-call 'canvas 'deref '((rsp local_temp_canvas)))
	(endif)

	;blit texture
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir r0 canvas_texture r1)
	(vpif '(r1 != 0))
		(vp-cpy-ir-i r0 canvas_aa_scale_r r7)
		(vp-cpy-ir-ui r0 canvas_width r9)
		(vp-cpy-ir-ui r0 canvas_height r10)
		(vp-mul-rr r7 r9)
		(vp-mul-rr r7 r10)
		(vp-asr-cr fp_shift r9)
		(vp-asr-cr fp_shift r10)
		(f-call 'gui_ctx 'blit '((rsp local_ctx) r1 0xffffff 0 0 r9 r10))
	(endif)

	(f-exit 'canvas 'draw '((rsp local_this)))
	(vp-cpy-ir rsp local_old_stack rsp)
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/swap)
	;inputs
	;r0 = canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	;kernel callback
	(vp-push r0)
	(f-call 'sys_task 'callback '(r0 ($ callback)))
	(vp-pop r0)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = user data

	(def-struct 'local)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack to 16 bytes for SDl
	(vp-cpy-rr rsp r1)
	(vp-alloc local_size)
	(vp-and-cr -16 rsp)
	(l-entry '(r0 (rsp local_old_stack)))

	;free any sdl texture
	(vp-cpy-ir r0 canvas_texture r1)
	(vpif '(r1 != 0))
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 r0 canvas_texture)
		(sdl-call 'sdl 'sdl_destroy_texture '(r1))
	(endif)

	(vp-cpy-ir rsp local_old_stack rsp)
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/pref_size)
	;inputs
	;r0 = canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;r9 = preferred width (pixels)
	;r10 = preferred height (pixels)
	;trashes
	;all but r0

	(f-entry 'canvas 'pref_size '(r0))

	(vp-cpy-ir-i r0 canvas_aa_scale_r r7)
	(vp-cpy-ir-ui r0 canvas_width r9)
	(vp-cpy-ir-ui r0 canvas_height r10)
	(vp-mul-rr r7 r9)
	(vp-mul-rr r7 r10)
	(vp-asr-cr fp_shift r9)
	(vp-asr-cr fp_shift r10)

	(f-exit 'canvas 'pref_size '(r0 r9 r10))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/to_premul)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;outputs
	;r0 = canvas object (ptr)
	;r1 = color premul (argb)
	;trashes
	;r2-r3

	(f-entry 'canvas 'to_premul '(r0 r1))

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r1 r3)
	(vp-shr-cr 24 r1)
	(vp-and-cr 0xff00ff r2)
	(vp-and-cr 0xff00 r3)
	(vp-mul-rr r1 r2)
	(vp-mul-rr r1 r3)
	(vp-shl-cr 24 r1)
	(vp-shr-cr 8 r2)
	(vp-shr-cr 8 r3)
	(vp-and-cr 0xff00ff r2)
	(vp-and-cr 0xff00 r3)
	(vp-add-rr r2 r1)
	(vp-add-rr r3 r1)

	(f-exit 'canvas 'to_premul '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/to_argb)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = color premul (argb)
	;outputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;trashes
	;r2-r4

	(f-entry 'canvas 'to_argb '(r0 r1))

	(vp-cpy-rr r1 r3)
	(vp-shr-cr 24 r3)
	(vpif '(r3 != 0))
		(vpif '(r3 != 0xff))
			(vp-cpy-rr r0 r4)
			(vp-xor-rr r2 r2)
			(vp-cpy-cr (mul 255 256) r0)
			(vp-div-rrr-u r3 r2 r0)
			(vp-cpy-rr r1 r3)
			(vp-cpy-rr r1 r2)
			(vp-shr-cr 24 r1)
			(vp-and-cr 0xff00ff r3)
			(vp-and-cr 0xff00 r2)
			(vp-mul-rr r0 r3)
			(vp-mul-rr r0 r2)
			(vp-shl-cr 24 r1)
			(vp-shr-cr 8 r3)
			(vp-shr-cr 8 r2)
			(vp-and-cr 0xff00ff r3)
			(vp-and-cr 0xff00 r2)
			(vp-add-rr r3 r1)
			(vp-add-rr r2 r1)
			(vp-cpy-rr r4 r0)
		(endif)
	(endif)

	(f-exit 'canvas 'to_argb '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/fill)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r2-r4

	(f-entry 'canvas 'fill '(r0 r1))

	(f-call 'canvas 'to_premul '(r0 r1) '(r0 r1))
	(vp-cpy-ir r0 canvas_array r2)
	(vp-cpy-ir r2 array_array r2)
	(vp-cpy-ir-ui r0 canvas_stride r3)
	(vp-cpy-ir-ui r0 canvas_height r4)
	(vp-mul-rr r4 r3)
	(vp-add-rr r2 r3)
	(loop-start)
		(vp-cpy-ri-i r1 r2 0)
		(vp-add-cr int_size r2)
	(loop-until '(r2 == r3))

	(f-exit 'canvas 'fill '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/as_argb)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = source canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r7

	(f-entry 'canvas 'as_argb '(r0 r1))

	(vp-cpy-ir r0 canvas_array r5)
	(vp-cpy-ir r1 canvas_array r7)
	(vp-cpy-ir r5 array_array r5)
	(vp-cpy-ir r7 array_array r7)
	(vp-cpy-ir-ui r0 canvas_stride r6)
	(vp-cpy-ir-ui r0 canvas_height r1)
	(vp-mul-rr r1 r6)
	(vp-add-rr r5 r6)
	(loop-start)
		(vp-cpy-ir-ui r7 0 r1)
		(f-call 'canvas 'to_argb '(r0 r1) '(r0 r1))
		(vp-cpy-ri-i r1 r5 0)
		(vp-add-cr int_size r5)
		(vp-add-cr int_size r7)
	(loop-until '(r5 == r6))

	(f-exit 'canvas 'as_argb '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/as_premul)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = source canvas object (ptr)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r6

	(f-entry 'canvas 'as_premul '(r0 r1))

	(vp-cpy-ir r0 canvas_array r5)
	(vp-cpy-ir r1 canvas_array r6)
	(vp-cpy-ir r5 array_array r5)
	(vp-cpy-ir r6 array_array r6)
	(vp-cpy-ir-ui r0 canvas_stride r4)
	(vp-cpy-ir-ui r0 canvas_height r1)
	(vp-mul-rr r1 r4)
	(vp-add-rr r5 r4)
	(loop-start)
		(vp-cpy-ir-ui r6 0 r1)
		(f-call 'canvas 'to_premul '(r0 r1) '(r0 r1))
		(vp-cpy-ri-i r1 r5 0)
		(vp-add-cr int_size r5)
		(vp-add-cr int_size r6)
	(loop-until '(r5 == r4))

	(f-exit 'canvas 'as_premul '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/set_clip)
	;inputs
	;r0 = canvas object (ptr)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = x1 (pixels)
	;r10 = y1 (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r1-r2

	(f-entry 'canvas 'set_clip '(r0 r7 r8 r9 r10))

	;clip check
	(switch)
	(breakif '(r7 > r9))
	(breakif '(r8 > r10))
	(vp-cpy-ir-ui r0 canvas_width r1)
	(breakif '(r7 >= r1))
	(vp-cpy-ir-ui r0 canvas_height r2)
	(breakif '(r8 >= r2))
	(breakif '(r9 < 0))
	(breakif '(r10 < 0))
	(vpif '(r7 < 0))
		(vp-xor-rr r7 r7)
	(endif)
	(vpif '(r8 < 0))
		(vp-xor-rr r8 r8)
	(endif)
	(vpif '(r9 > r1))
		(vp-cpy-rr r1 r9)
	(endif)
	(vpif '(r10 > r2))
		(vp-cpy-rr r2 r10)
	(endif)
	(vp-cpy-ri-i r7 r0 canvas_cx)
	(vp-cpy-ri-i r8 r0 canvas_cy)
	(vp-cpy-ri-i r9 r0 canvas_cx1)
	(vp-cpy-ri-i r10 r0 canvas_cy1)
	(endswitch)

	(f-exit 'canvas 'set_clip '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/set_pix_noclip)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r2-r3, r7-r8

	(f-entry 'canvas 'set_pix_noclip '(r0 r1 r7 r8))

	(vp-cpy-ir-ui r0 canvas_stride r2)
	(vp-cpy-ir r0 canvas_array r3)
	(vp-mul-rr r2 r8)
	(vp-cpy-ir r3 array_array r3)
	(vp-shl-cr (log2 int_size) r7)
	(vp-add-rr r8 r3)
	(vp-cpy-rd-i r1 r3 r7)

	(f-exit 'canvas 'set_pix_noclip '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/set_span_noclip)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = x1 (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r2-r3, r7-r9

	(f-entry 'canvas 'set_span_noclip '(r0 r1 r7 r8 r9))

	(vp-cpy-ir-ui r0 canvas_stride r2)
	(vp-cpy-ir r0 canvas_array r3)
	(vp-cpy-ir r3 array_array r3)
	(vp-mul-rr r2 r8)
	(vp-shl-cr (log2 int_size) r7)
	(vp-shl-cr (log2 int_size) r9)
	(vp-add-rr r8 r3)
	(loop-start)
		(vp-cpy-rd-i r1 r3 r7)
		(vp-add-cr int_size r7)
	(loop-until '(r7 == r9))

	(f-exit 'canvas 'set_span_noclip '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/set_span)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = x1 (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r2-r3, r7-r9

	(f-entry 'canvas 'set_span '(r0 r1 r7 r8 r9))

	;clip check
	(switch)
	(breakif '(r9 <= r7))
	(vp-cpy-ir-ui r0 canvas_cy r2)
	(breakif '(r8 < r2))
	(vp-cpy-ir-ui r0 canvas_cy1 r2)
	(breakif '(r8 >= r2))
	(vp-cpy-ir-ui r0 canvas_cx r2)
	(breakif '(r9 <= r2))
	(vp-cpy-ir-ui r0 canvas_cx1 r3)
	(breakif '(r7 >= r3))
		(vpif '(r7 < r2))
			(vp-cpy-rr r2 r7)
		(endif)
		(vpif '(r9 > r3))
			(vp-cpy-rr r3 r9)
		(endif)
		(f-jmp 'canvas 'set_span_noclip '(r0 r1 r7 r8 r9))
	(endswitch)

	(f-exit 'canvas 'set_span '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/blend_pix_noclip)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r2-r3 r4-r8

	(f-entry 'canvas 'blend_pix_noclip '(r0 r1 r7 r8))

	(vp-cpy-rr r1 r2)
	(vp-cpy-cr 0xff r6)
	(vp-shr-cr 24 r2)
	(vp-cpy-cr 0x00ff00ff r4)
	(vp-cpy-cr 0xff00ff00 r5)
	(vp-sub-rr r2 r6)

	(vp-cpy-ir-ui r0 canvas_stride r2)
	(vp-cpy-ir r0 canvas_array r3)
	(vp-mul-rr r2 r8)
	(vp-cpy-ir r3 array_array r3)
	(vp-shl-cr (log2 int_size) r7)
	(vp-add-rr r8 r3)
	(vp-add-rr r3 r7)

	(vp-cpy-ir-ui r7 0 r2)
	(vp-cpy-rr r2 r3)
	(vp-and-rr r4 r2)
	(vp-and-rr r5 r3)
	(vp-mul-rr r6 r2)
	(vp-mul-rr r6 r3)
	(vp-shr-cr 8 r2)
	(vp-shr-cr 8 r3)
	(vp-and-rr r4 r2)
	(vp-and-rr r5 r3)
	(vp-add-rr r3 r2)
	(vp-add-rr r1 r2)
	(vp-cpy-ri-i r2 r7 0)

	(f-exit 'canvas 'blend_pix_noclip '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/blend_span_noclip)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = x1 (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r2-r3 r4-r9

	(f-entry 'canvas 'blend_span_noclip '(r0 r1 r7 r8 r9))

	(vp-cpy-rr r1 r2)
	(vp-cpy-cr 0xff r6)
	(vp-shr-cr 24 r2)
	(vp-cpy-cr 0x00ff00ff r4)
	(vp-cpy-cr 0xff00ff00 r5)
	(vp-sub-rr r2 r6)

	(vp-cpy-ir-ui r0 canvas_stride r2)
	(vp-cpy-ir r0 canvas_array r3)
	(vp-cpy-ir r3 array_array r3)
	(vp-mul-rr r2 r8)
	(vp-shl-cr (log2 int_size) r7)
	(vp-shl-cr (log2 int_size) r9)
	(vp-add-rr r8 r3)
	(vp-add-rr r3 r7)
	(vp-add-rr r3 r9)
	(loop-start)
		(vp-cpy-ir-ui r7 0 r2)

		(vp-cpy-rr r2 r3)
		(vp-and-rr r4 r2)
		(vp-and-rr r5 r3)
		(vp-mul-rr r6 r2)
		(vp-mul-rr r6 r3)
		(vp-shr-cr 8 r2)
		(vp-shr-cr 8 r3)
		(vp-and-rr r4 r2)
		(vp-and-rr r5 r3)
		(vp-add-rr r3 r2)
		(vp-add-rr r1 r2)

		(vp-cpy-ri-i r2 r7 0)
		(vp-add-cr int_size r7)
	(loop-until '(r7 == r9))

	(f-exit 'canvas 'blend_span_noclip '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/blend_span)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = x1 (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;r2-r3 r4-r9

	(f-entry 'canvas 'blend_span '(r0 r1 r7 r8 r9))

	;clip check
	(switch)
	(breakif '(r9 <= r7))
	(vp-cpy-ir-ui r0 canvas_cy r2)
	(breakif '(r8 < r2))
	(vp-cpy-ir-ui r0 canvas_cy1 r2)
	(breakif '(r8 >= r2))
	(vp-cpy-ir-ui r0 canvas_cx r2)
	(breakif '(r9 <= r2))
	(vp-cpy-ir-ui r0 canvas_cx1 r3)
	(breakif '(r7 >= r3))
		(vpif '(r7 < r2))
			(vp-cpy-rr r2 r7)
		(endif)
		(vpif '(r9 > r3))
			(vp-cpy-rr r3 r9)
		(endif)
		(f-jmp 'canvas 'blend_span_noclip '(r0 r1 r7 r8 r9))
	(endswitch)

	(f-exit 'canvas 'blend_span '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/plot)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;r2 = span function (ptr)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'span)
	(uint 'color)
	(int 'x 'y)

	(push-scope)
	(f-entry 'canvas 'plot {this, color, span, x, y})

	;clip check
	(switch)
	(breakif {x < this->canvas_cx})
	(breakif {y < this->canvas_cy})
	(breakif {x >= this->canvas_cx1})
	(breakif {y >= this->canvas_cy1})
		(f-call 'canvas 'to_premul {this, color} {_, color})
		(r-call 'canvas 'set_plot {this, color, x, y, span})
	(endswitch)

	(f-exit 'canvas 'plot {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/canvas/fbox)
	;inputs
	;r0 = canvas object (ptr)
	;r1 = color (argb)
	;r2 = span function (ptr)
	;r7 = x (pixels)
	;r8 = y (pixels)
	;r9 = w (pixels)
	;r10 = h (pixels)
	;outputs
	;r0 = canvas object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'span)
	(uint 'color)
	(int 'x 'y 'w 'h)

	(push-scope)
	(f-entry 'canvas 'fbox {this, color, span, x, y, w, h})

	;clip check
	(switch)
	(breakif {w <= 0})
	(breakif {h <= 0})
	(assign {x + w, y + h} {w, h})
	(breakif {x >= this->canvas_cx1})
	(breakif {w <= this->canvas_cx})
	(breakif {y >= this->canvas_cy1})
	(breakif {h <= this->canvas_cy})
		(vpif {x < this->canvas_cx})
			(assign {this->canvas_cx} {x})
		(endif)
		(vpif {w > this->canvas_cx1})
			(assign {this->canvas_cx1} {w})
		(endif)
		(vpif {y < this->canvas_cy})
			(assign {this->canvas_cy} {y})
		(endif)
		(vpif {h > this->canvas_cy1})
			(assign {this->canvas_cy1} {h})
		(endif)
		(f-call 'canvas 'to_premul {this, color} {_, color})
		(loop-start)
			(r-call 'canvas 'set_span {this, color, x, y, w, span})
			(assign {y + 1} {y})
		(loop-until {y == h})
	(endswitch)

	(f-exit 'canvas 'fbox {this})
	(pop-scope)
	(return)

(def-func-end)
