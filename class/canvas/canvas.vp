(import 'sys/func.inc)
(import 'gui/sdl2.inc)
(import 'class/text/text.inc)
(import 'class/canvas/canvas.inc)
(import 'class/flow/flow.inc)
(import 'class/vector/vector.inc)
(import 'class/points/points.inc)

(gen-new 'canvas)
(gen-class 'canvas)

(def-func 'class/canvas/create)
	;inputs
	;r0 = width
	;r1 = height
	;r2 = aa scale, 16.16
	;outputs
	;r0 = 0 if error, else object
	;trashes
	;r1-r3, r5-r7

	;save inputs
	(f-entry 'canvas 'create '(r5 r6 r7))

	;create new object
	(f-call 'canvas 'new nil '(r0))
	(vpif '(r0 != 0))
		;init the object
		(f-call 'canvas 'init `(r0 (@ ,(f-path 'class 'canvas)) r5 r6 r7) '(r0 r1))
		(vpif '(r1 == 0))
			;error with init
			(v-call 'canvas 'delete '(r0) '() 'r1)
			(vp-xor-rr r0 r0)
		(endif)
	(endif)

	(f-exit 'canvas 'create '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/init)
	;inputs
	;r0 = canvas object
	;r1 = vtable pointer
	;r2 = width
	;r3 = height
	;r5 = aa scale, 16.16
	;outputs
	;r1 = 0 if error, else ok

	;save inputs
	(f-entry 'canvas 'init '(r0 r1 (r0 canvas_width i) (r0 canvas_height i) (r0 canvas_aa_scale i)))

	;init parent
	(s-call 'canvas 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		(vp-push r0)
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 r0 canvas_texture)
		(vp-cpy-ri r2 r0 canvas_resize_buf)
		(vp-cpy-ri-i r2 r0 canvas_resize_buf_size)
		(vp-cpy-ri-i r2 r0 canvas_cx)
		(vp-cpy-ri-i r2 r0 canvas_cy)

		(vp-cpy-ir-i r0 canvas_aa_scale r3)
		(vp-cpy-cr (bit-shl 1.0 fp_shift) r2)
		(vp-xor-rr r1 r1)
		(vp-div-rrr r3 r1 r2)
		(vp-cpy-ri-i r2 r0 canvas_aa_scale_r)
		(vp-cpy-ir-i r0 canvas_aa_scale r3)
		(vp-cpy-ir-ui r0 canvas_width r1)
		(vp-cpy-ir-ui r0 canvas_height r2)
		(vp-mul-rr r3 r1)
		(vp-mul-rr r3 r2)
		(vp-asr-cr fp_shift r1)
		(vp-asr-cr fp_shift r2)
		(vp-cpy-ri-i r1 r0 canvas_width)
		(vp-cpy-ri-i r2 r0 canvas_height)
		(vp-cpy-ri-i r1 r0 canvas_cx1)
		(vp-cpy-ri-i r2 r0 canvas_cy1)

		;pixel buffer
		(vp-shl-cr (pow2 int_size) r1)
		(vp-cpy-ri r1 r0 canvas_stride)
		(vp-mul-rr r2 r1)
		(f-call 'sys_mem 'alloc '(r1) '(r0 _))
		(vp-cpy-ir r4 0 r1)
		(vp-cpy-ri r0 r1 canvas_data)

		;edge arrays, sort interval stack
		(f-call 'array 'create '() '(r0))
		(vp-cpy-ir r4 0 r1)
		(vp-cpy-ri r0 r1 canvas_edges)
		(f-call 'array 'create '() '(r0))
		(vp-cpy-ir r4 0 r1)
		(vp-cpy-ri r0 r1 canvas_edge_tracker)
		(f-call 'array 'create '() '(r0))
		(vp-cpy-ir r4 0 r1)
		(vp-cpy-ri r0 r1 canvas_intervals)

		(vp-pop r0)
	(endif)

	(f-exit 'canvas 'init '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/deinit)
	;inputs
	;r0 = canvas object

	;kernel callback
	(vp-push r0)
	(f-call 'sys_task 'callback '(($ callback) r0))
	(vp-pop r0)
	(s-jmp 'canvas 'deinit '(r0))

(vp-label 'callback)
	;inputs
	;r0 = user data

	(def-struct 'local)
		(ptr 'this)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack for SDL
	(vp-cpy-rr r4 r15)
	(vp-sub-cr local_size r4)
	(vp-and-cr -16 r4)
	(vp-cpy-ri r15 r4 local_old_stack)

	;save inputs
	(f-entry 'canvas 'deinit '((r4 local_this)))

	;free edge trackers, sort intervals
	(vp-cpy-ir r4 local_this r0)
	(f-call 'array 'deref '((r0 canvas_edges)))
	(vp-cpy-ir r4 local_this r0)
	(f-call 'array 'deref '((r0 canvas_edge_tracker)))
	(vp-cpy-ir r4 local_this r0)
	(f-call 'array 'deref '((r0 canvas_intervals)))

	;free any pixel buffer
	(vp-cpy-ir r4 local_this r0)
	(f-call 'sys_mem 'free '((r0 canvas_data)))

	;free any resize buffer
	(vp-cpy-ir r4 local_this r0)
	(f-call 'sys_mem 'free '((r0 canvas_resize_buf)))

	;free any sdl texture
	(vp-cpy-ir r4 local_this r0)
	(vp-cpy-ir r0 canvas_texture r1)
	(vpif '(r1 != 0))
		(sdl-destroy-texture '(r1))
	(endif)

	(vp-cpy-ir r4 local_old_stack r4)
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/draw)
	;inputs
	;r0 = canvas object
	;r1 = ctx object
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'this)
		(ptr 'ctx)
		(ptr 'surface)
		(ptr 'temp_canvas)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack to 16 bytes for SDl
	(vp-cpy-rr r4 r15)
	(vp-sub-cr local_size r4)
	(vp-and-cr -16 r4)
	(vp-cpy-ri r15 r4 local_old_stack)

	;save inputs
	(f-entry 'canvas 'draw '((r4 local_this) (r4 local_ctx)))

	;if no texture then create from pixel buffer
	(vp-cpy-ir r0 canvas_texture r1)
	(vpif '(r1 == 0))
		;create SDL surface from pixel buffer, convert to texture
		(vp-cpy-ir-i r0 canvas_aa_scale_r r8)
		(vp-cpy-ir-ui r0 canvas_width r10)
		(vp-cpy-ir-ui r0 canvas_height r11)
		(vp-mul-rr r8 r10)
		(vp-mul-rr r8 r11)
		(vp-asr-cr fp_shift r10)
		(vp-asr-cr fp_shift r11)
		(f-call 'canvas 'create '(r10 r11 1.0) '(r0))
		(vp-cpy-ri r0 r4 local_temp_canvas)
		(f-call 'canvas 'resize '(r0 (r4 local_this)))
		(f-call 'canvas 'as_argb '(r0))
		(sdl-create-rgb-surface-from '((r0 canvas_data) (r0 canvas_width ui) (r0 canvas_height ui)
										32 (r0 canvas_stride ui) 0xff 0xff00 0xff0000 0xff000000))
		(vp-cpy-ri r0 r4 local_surface)
		(vp-cpy-ir r4 local_ctx r1)
		(sdl-create-texture-from-surface '((r1 gui_ctx_sdl_ctx) r0))
		(vp-cpy-ir r4 local_this r1)
		(vp-cpy-ri r0 r1 canvas_texture)
		(f-call 'canvas 'deref '((r4 local_temp_canvas)))
	(endif)
	(sdl-free-surface '((r4 local_surface)))

	;blit texture
	(vp-cpy-ir r4 local_this r0)
	(vp-cpy-ir r0 canvas_texture r1)
	(vpif '(r1 != 0))
		(vp-cpy-ir-i r0 canvas_aa_scale_r r8)
		(vp-cpy-ir-ui r0 canvas_width r10)
		(vp-cpy-ir-ui r0 canvas_height r11)
		(vp-mul-rr r8 r10)
		(vp-mul-rr r8 r11)
		(vp-asr-cr fp_shift r10)
		(vp-asr-cr fp_shift r11)
		(f-call 'gui_ctx 'blit '((r4 local_ctx) r1 0xffffff 0 0 r10 r11))
	(endif)

	(f-exit 'canvas 'draw '((r4 local_this)))
	(vp-cpy-ir r4 local_old_stack r4)
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/swap)
	;inputs
	;r0 = canvas object
	;trashes
	;all but r0, r4

	;kernel callback
	(vp-push r0)
	(f-call 'sys_task 'callback '(($ callback) r0))
	(vp-pop r0)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = user data

	(def-struct 'local)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack to 16 bytes for SDl
	(vp-cpy-rr r4 r15)
	(vp-sub-cr local_size r4)
	(vp-and-cr -16 r4)
	(vp-cpy-ri r15 r4 local_old_stack)

	;free any sdl texture
	(vp-cpy-ir r0 canvas_texture r1)
	(vpif '(r1 != 0))
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 r0 canvas_texture)
		(sdl-destroy-texture '(r1))
	(endif)

	(vp-cpy-ir r4 local_old_stack r4)
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/pref_size)
	;inputs
	;r0 = canvas object
	;outputs
	;r10 = preferred width
	;r11 = preferred height
	;trashes
	;all but r0, r4

	(f-entry 'canvas 'pref_size '(r0))

	(vp-cpy-ir-i r0 canvas_aa_scale_r r8)
	(vp-cpy-ir-ui r0 canvas_width r10)
	(vp-cpy-ir-ui r0 canvas_height r11)
	(vp-mul-rr r8 r10)
	(vp-mul-rr r8 r11)
	(vp-asr-cr fp_shift r10)
	(vp-asr-cr fp_shift r11)

	(f-exit 'canvas 'pref_size '(r0 r10 r11))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/to_premul)
	;inputs
	;r0 = canvas object
	;r1 = color argb
	;outputs
	;r0 = canvas object
	;r1 = color premul
	;trashes
	;r2-r3

	(f-entry 'canvas 'to_premul '(r0 r1))

	(vp-cpy-rr r1 r2)
	(vp-cpy-rr r1 r3)
	(vp-shr-cr 24 r1)
	(vp-and-cr 0xff00ff r2)
	(vp-and-cr 0xff00 r3)
	(vp-mul-rr r1 r2)
	(vp-mul-rr r1 r3)
	(vp-shl-cr 24 r1)
	(vp-shr-cr 8 r2)
	(vp-shr-cr 8 r3)
	(vp-and-cr 0xff00ff r2)
	(vp-and-cr 0xff00 r3)
	(vp-add-rr r2 r1)
	(vp-add-rr r3 r1)

	(f-exit 'canvas 'to_premul '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/to_argb)
	;inputs
	;r0 = canvas object
	;r1 = color premul
	;outputs
	;r0 = canvas object
	;r1 = color argb
	;trashes
	;r2-r3, r5

	(f-entry 'canvas 'to_argb '(r0 r1))

	(vp-cpy-rr r1 r3)
	(vp-shr-cr 24 r3)
	(vpif '(r3 != 0))
		(vpif '(r3 != 0xff))
			(vp-cpy-rr r0 r5)
			(vp-xor-rr r2 r2)
			(vp-cpy-cr (mul 255 256) r0)
			(vp-div-rrr-u r3 r2 r0)
			(vp-cpy-rr r1 r3)
			(vp-cpy-rr r1 r2)
			(vp-shr-cr 24 r1)
			(vp-and-cr 0xff00ff r3)
			(vp-and-cr 0xff00 r2)
			(vp-mul-rr r0 r3)
			(vp-mul-rr r0 r2)
			(vp-shl-cr 24 r1)
			(vp-shr-cr 8 r3)
			(vp-shr-cr 8 r2)
			(vp-and-cr 0xff00ff r3)
			(vp-and-cr 0xff00 r2)
			(vp-add-rr r3 r1)
			(vp-add-rr r2 r1)
			(vp-cpy-rr r5 r0)
		(endif)
	(endif)

	(f-exit 'canvas 'to_argb '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/fill)
	;inputs
	;r0 = canvas object
	;r1 = color
	;outputs
	;r0 = canvas object
	;trashes
	;r2-r3, r5

	(f-entry 'canvas 'fill '(r0 r1))

	(f-call 'canvas 'to_premul '(r0 r1) '(r0 r1))
	(vp-cpy-ir r0 canvas_data r2)
	(vp-cpy-ir-ui r0 canvas_stride r3)
	(vp-cpy-ir-ui r0 canvas_height r5)
	(vp-mul-rr r5 r3)
	(vp-add-rr r2 r3)
	(loop-start)
		(vp-cpy-ri-i r1 r2 0)
		(vp-add-cr int_size r2)
	(loop-until '(r2 == r3))

	(f-exit 'canvas 'fill '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/as_argb)
	;inputs
	;r0 = canvas object
	;outputs
	;r0 = canvas object
	;trashes
	;r1-r3, r5-r7

	(f-entry 'canvas 'as_argb '(r0))

	(vp-cpy-ir r0 canvas_data r6)
	(vp-cpy-ir-ui r0 canvas_stride r7)
	(vp-cpy-ir-ui r0 canvas_height r1)
	(vp-mul-rr r1 r7)
	(vp-add-rr r6 r7)
	(loop-start)
		(vp-cpy-ir-ui r6 0 r1)
		(f-call 'canvas 'to_argb '(r0 r1) '(r0 r1))
		(vp-cpy-ri-i r1 r6 0)
		(vp-add-cr int_size r6)
	(loop-until '(r6 == r7))

	(f-exit 'canvas 'as_argb '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/as_premul)
	;inputs
	;r0 = canvas object
	;outputs
	;r0 = canvas object
	;trashes
	;r1-r3, r5-r6

	(f-entry 'canvas 'as_premul '(r0))

	(vp-cpy-ir r0 canvas_data r6)
	(vp-cpy-ir-ui r0 canvas_stride r5)
	(vp-cpy-ir-ui r0 canvas_height r1)
	(vp-mul-rr r1 r5)
	(vp-add-rr r6 r5)
	(loop-start)
		(vp-cpy-ir-ui r6 0 r1)
		(f-call 'canvas 'to_premul '(r0 r1) '(r0 r1))
		(vp-cpy-ri-i r1 r6 0)
		(vp-add-cr int_size r6)
	(loop-until '(r6 == r5))

	(f-exit 'canvas 'as_premul '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/set_clip)
	;inputs
	;r0 = canvas object
	;r8 = x
	;r9 = y
	;r10 = x1
	;r11 = y1
	;outputs
	;r0 = canvas object
	;trashes
	;r1-r2

	(f-entry 'canvas 'set_clip '(r0 r8 r9 r10 r11))

	;clip check
	(switch)
	(breakif '(r8 > r10))
	(breakif '(r9 > r11))
	(vp-cpy-ir-ui r0 canvas_width r1)
	(breakif '(r8 >= r1))
	(vp-cpy-ir-ui r0 canvas_height r2)
	(breakif '(r9 >= r2))
	(breakif '(r10 < 0))
	(breakif '(r11 < 0))
	(vpif '(r8 < 0))
		(vp-xor-rr r8 r8)
	(endif)
	(vpif '(r9 < 0))
		(vp-xor-rr r9 r9)
	(endif)
	(vpif '(r10 > r1))
		(vp-cpy-rr r1 r10)
	(endif)
	(vpif '(r11 > r2))
		(vp-cpy-rr r2 r11)
	(endif)
	(vp-cpy-ri-i r8 r0 canvas_cx)
	(vp-cpy-ri-i r9 r0 canvas_cy)
	(vp-cpy-ri-i r10 r0 canvas_cx1)
	(vp-cpy-ri-i r11 r0 canvas_cy1)
	(endswitch)

	(f-exit 'canvas 'set_clip '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/set_span_noclip)
	;inputs
	;r0 = canvas object
	;r1 = color
	;r8 = x
	;r9 = y
	;r10 = x1
	;outputs
	;r0 = canvas object
	;trashes
	;r2-r3, r8-r10

	(f-entry 'canvas 'set_span_noclip '(r0 r1 r8 r9 r10))

	(vp-cpy-ir-ui r0 canvas_stride r2)
	(vp-cpy-ir r0 canvas_data r3)
	(vp-mul-rr r2 r9)
	(vp-shl-cr (pow2 int_size) r8)
	(vp-shl-cr (pow2 int_size) r10)
	(vp-add-rr r9 r3)
	(loop-start)
		(vp-cpy-rd-i r1 r3 r8)
		(vp-add-cr int_size r8)
	(loop-until '(r8 == r10))

	(f-exit 'canvas 'set_span_noclip '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/set_span)
	;inputs
	;r0 = canvas object
	;r1 = color
	;r8 = x
	;r9 = y
	;r10 = x1
	;outputs
	;r0 = canvas object
	;trashes
	;r2-r3, r8-r10

	(f-entry 'canvas 'set_span '(r0 r1 r8 r9 r10))

	;clip check
	(switch)
	(breakif '(r10 <= r8))
	(vp-cpy-ir-ui r0 canvas_cy r2)
	(breakif '(r9 < r2))
	(vp-cpy-ir-ui r0 canvas_cy1 r2)
	(breakif '(r9 >= r2))
	(vp-cpy-ir-ui r0 canvas_cx r2)
	(breakif '(r10 <= r2))
	(vp-cpy-ir-ui r0 canvas_cx1 r3)
	(breakif '(r8 >= r3))
		(vpif '(r8 < r2))
			(vp-cpy-rr r2 r8)
		(endif)
		(vpif '(r10 > r3))
			(vp-cpy-rr r3 r10)
		(endif)
		(f-jmp 'canvas 'set_span_noclip '(r0 r1 r8 r9 r10))
	(endswitch)

	(f-exit 'canvas 'set_span '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/blend_span_noclip)
	;inputs
	;r0 = canvas object
	;r1 = color
	;r8 = x
	;r9 = y
	;r10 = x1
	;outputs
	;r0 = canvas object
	;trashes
	;r2-r3 r5-r10

	(f-entry 'canvas 'blend_span_noclip '(r0 r1 r8 r9 r10))

	(vp-cpy-rr r1 r2)
	(vp-cpy-cr 0xff r7)
	(vp-shr-cr 24 r2)
	(vp-cpy-cr 0x00ff00ff r5)
	(vp-cpy-cr 0xff00ff00 r6)
	(vp-sub-rr r2 r7)

	(vp-cpy-ir-ui r0 canvas_stride r2)
	(vp-cpy-ir r0 canvas_data r3)
	(vp-mul-rr r2 r9)
	(vp-shl-cr (pow2 int_size) r8)
	(vp-shl-cr (pow2 int_size) r10)
	(vp-add-rr r9 r3)
	(vp-add-rr r3 r8)
	(vp-add-rr r3 r10)
	(loop-start)
		(vp-cpy-ir-ui r8 0 r2)

		(vp-cpy-rr r2 r3)
		(vp-and-rr r5 r2)
		(vp-and-rr r6 r3)
		(vp-mul-rr r7 r2)
		(vp-mul-rr r7 r3)
		(vp-shr-cr 8 r2)
		(vp-shr-cr 8 r3)
		(vp-and-rr r5 r2)
		(vp-and-rr r6 r3)
		(vp-add-rr r3 r2)
		(vp-add-rr r1 r2)

		(vp-cpy-ri-i r2 r8 0)
		(vp-add-cr int_size r8)
	(loop-until '(r8 == r10))

	(f-exit 'canvas 'blend_span_noclip '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/blend_span)
	;inputs
	;r0 = canvas object
	;r1 = color
	;r8 = x
	;r9 = y
	;r10 = x1
	;outputs
	;r0 = canvas object
	;trashes
	;r2-r3 r5-r10

	(f-entry 'canvas 'blend_span '(r0 r1 r8 r9 r10))

	;clip check
	(switch)
	(breakif '(r10 <= r8))
	(vp-cpy-ir-ui r0 canvas_cy r2)
	(breakif '(r9 < r2))
	(vp-cpy-ir-ui r0 canvas_cy1 r2)
	(breakif '(r9 >= r2))
	(vp-cpy-ir-ui r0 canvas_cx r2)
	(breakif '(r10 <= r2))
	(vp-cpy-ir-ui r0 canvas_cx1 r3)
	(breakif '(r8 >= r3))
		(vpif '(r8 < r2))
			(vp-cpy-rr r2 r8)
		(endif)
		(vpif '(r10 > r3))
			(vp-cpy-rr r3 r10)
		(endif)
		(f-jmp 'canvas 'blend_span_noclip '(r0 r1 r8 r9 r10))
	(endswitch)

	(f-exit 'canvas 'blend_span '(r0))
	(vp-ret)

(def-func-end)

(def-func 'class/canvas/resize)
	;inputs
	;r0 = canvas object
	;r1 = source canvas object
	;outputs
	;r0 = canvas object
	;trashes
	;all but r0, r4

	(ptr 'this 'source)
	(puint 'data 'dsrc)
	(uint 'x 'y 'x2 'y2)
	(uint 'x1a 'x1b 'x1c 'x1d 'y1a 'y1b 'y1c 'y1d)
	(uint 'a 'r 'g 'b 'q 'weight_x 'weight_y)
	(long 'fw 'fh)

	(push-scope)
	(f-entry 'canvas 'resize {this, source})

	(assign {(this->canvas_width + 1) * int_size} {x})
	(vpif {x > this->canvas_resize_buf_size})
		(vpif {this->canvas_resize_buf})
			(f-call 'sys_mem 'free {this->canvas_resize_buf})
		(endif)
		(f-call 'sys_mem 'alloc {x} {this->canvas_resize_buf, this->canvas_resize_buf_size})
	(endif)

	(assign {(source->canvas_width * 256) </ this->canvas_width} {fw})
	(assign {(source->canvas_height * 256) </ this->canvas_height} {fh})

	(assign {0} {x2})
	(loop-while {x2 < this->canvas_width})
		(assign {x2 *> fw} {(this->canvas_resize_buf)[x2 * int_size]})
		(assign {x2 + 1} {x2})
	(loop-end)
	(assign {source->canvas_width * 256} {(this->canvas_resize_buf)[x2 * int_size]})

	(assign {this->canvas_data} {data})
	(assign {0} {y2})
	(loop-while {y2 < this->canvas_height})
		(assign {y2 *> fh} {y1a})
		(assign {y1a >> 8} {y1c})
		(assign {((y2 + 1) *> fh) - 1} {y1b})
		(assign {y1b >> 8} {y1d})

		(assign {0} {x2})
		(loop-while {x2 < this->canvas_width})
			(assign {(this->canvas_resize_buf)[x2 * int_size]} {x1a})
			(assign {x1a >> 8} {x1c})
			(assign {(this->canvas_resize_buf)[(x2 + 1) * int_size] - 1} {x1b})
			(assign {x1b >> 8} {x1d})

			(assign {0, 0, 0, 0, 0} {a, r, g, b, q})

			(assign {y1c} {y})
			(loop-while {y <= y1d})
				(assign {256} {weight_y})
				(vpif {y1c != y1d})
					(vpif {y == y1c})
						(assign {256 - (y1a & 0xFF)} {weight_y})
					(elseif {y == y1d})
						(assign {(y1b & 0xFF) + 1} {weight_y})
					(endif)
				(endif)

				(assign {&(source->canvas_data)[(y * source->canvas_width + x1c) * int_size]} {dsrc})
				(assign {x1c} {x})
				(loop-while {x <= x1d})
					(assign {256} {weight_x})
					(vpif {x1c != x1d})
						(vpif {x == x1c})
							(assign {256 - (x1a & 0xFF)} {weight_x})
						(elseif {x == x1d})
							(assign {(x1b & 0xFF) + 1} {weight_x})
						(endif)
					(endif)

					;multiply pixel channels by the pixel weight and accumulate
					(assign {*dsrc, weight_x * weight_y, r, g, b, a, q}
							'(r0 r5 r8 r9 r10 r11 r12))
					(vp-cpy-rr r0 r1)
					(vp-cpy-rr r0 r2)
					(vp-cpy-rr r0 r3)
					(vp-shr-cr 8 r1)
					(vp-shr-cr 16 r2)
					(vp-shr-cr 24 r3)
					(vp-and-cr 0xff r0)
					(vp-and-cr 0xff r1)
					(vp-and-cr 0xff r2)
					(vp-mul-rr r5 r0)
					(vp-mul-rr r5 r1)
					(vp-mul-rr r5 r2)
					(vp-mul-rr r5 r3)
					(vp-add-rr r8 r0)
					(vp-add-rr r9 r1)
					(vp-add-rr r10 r2)
					(vp-add-rr r11 r3)
					(vp-add-rr r5 r12)
					(assign '(r0 r1 r2 r3 r12) {r, g, b, a, q})

					(assign {dsrc + int_size} {dsrc})
					(assign {x + 1} {x})
				(loop-end)
				(assign {y + 1} {y})
			(loop-end)

			(assign {(r / q) | ((g / q) << 8) | ((b / q) << 16) | ((a / q) << 24)} {*data})
			(assign {data + int_size} {data})

			(assign {x2 + 1} {x2})
		(loop-end)
		(assign {y2 + 1} {y2})
	(loop-end)

	(f-exit 'canvas 'resize {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/canvas/fbox)
	;inputs
	;r0 = canvas object
	;r1 = color
	;r2 = span function
	;r8 = x
	;r9 = y
	;r10 = w
	;r11 = h
	;outputs
	;r0 = canvas object
	;trashes
	;all but r0, r4

	(ptr 'this 'span)
	(uint 'color)
	(int 'x 'y 'w 'h)

	(push-scope)
	(f-entry 'canvas 'fbox {this, color, span, x, y, w, h})

	;clip check
	(switch)
	(breakif {w <= 0})
	(breakif {h <= 0})
	(assign {x + w, y + h} {w, h})
	(breakif {x >= this->canvas_cx1})
	(breakif {w <= this->canvas_cx})
	(breakif {y >= this->canvas_cy1})
	(breakif {h <= this->canvas_cy})
		(vpif {x < this->canvas_cx})
			(assign {this->canvas_cx} {x})
		(endif)
		(vpif {w > this->canvas_cx1})
			(assign {this->canvas_cx1} {w})
		(endif)
		(vpif {y < this->canvas_cy})
			(assign {this->canvas_cy} {y})
		(endif)
		(vpif {h > this->canvas_cy1})
			(assign {this->canvas_cy1} {h})
		(endif)
		(f-call 'canvas 'to_premul {this, color} {_, color})
		(loop-start)
			(assign {this, color, x, y, w, span} '(r0 r1 r8 r9 r10 r2))
			(vp-call-r r2)
			(assign {y + 1} {y})
		(loop-until {y == h})
	(endswitch)

	(f-exit 'canvas 'fbox {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/canvas/fpoly)
	;inputs
	;r0 = canvas object
	;r1 = vector of points objects
	;r2 = color
	;r3 = mode
	;r5 = span function
	;outputs
	;r0 = canvas object
	;trashes
	;all but r0, r4

	(ptr 'this 'span)
	(union
		'(ptr 'polygons)
		'(pptr 'iter_end_polygons 'iter_begin_polygons)
		'(pptr 'iter_i 'iter_j 'iter_k 'iter_end))
	(pint 'iter_edge1 'iter_edge2)
	(pint 'iter_begin_polygon 'iter_end_polygon)
	(int 'ys 'ye 'x1 'y1 'x2 'y2 'w)
	(uint 'mode 'color 'length)

	(push-scope)
	(f-entry 'canvas 'fpoly {this, polygons, color, mode, span})
	(f-call 'canvas 'to_premul {this, color} {_, color})

	;fill edges, find min and max y, clip edges not visible or redundant
	(f-call 'array 'set_length {this->canvas_edges, 0})
	(assign {max_int, min_int} {ys, ye})
	(f-call 'vector 'get_begin {polygons} {_, iter_begin_polygons})
	(f-call 'vector 'get_end {polygons} {_, iter_end_polygons})
	(loop-while {iter_begin_polygons != iter_end_polygons})
		(f-call 'points 'get_begin {*iter_begin_polygons} {_, iter_begin_polygon})
		(f-call 'points 'get_end {*iter_begin_polygons} {_, iter_end_polygon})
		(vpif {iter_end_polygon - iter_begin_polygon >= ptr_size * 3})
			(assign {iter_end_polygon[-ptr_size], iter_end_polygon[-int_size]} {x1, y1})
			(loop-start)
				(assign {iter_begin_polygon[0], iter_begin_polygon[int_size]} {x2, y2})
				(assign {x1 + 0.5, (y1 + 0.5) >>> fp_shift, x2 + 0.5, (y2 + 0.5) >>> fp_shift} {x1, y1, x2, y2})
				(vpif {y1 < y2})
					(breakif {y2 <= this->canvas_cy})
					(vpif {y1 < ys})
						(assign {y1} {ys})
					(endif)
					(vpif {y2 > ye})
						(assign {y2} {ye})
					(endif)
					(d-call 'array 'get_length {this->canvas_edges} {_, length})
					(f-call 'array 'set_capacity {this->canvas_edges, length + (edge_size >> 3)})
					(f-call 'array 'set_length {this->canvas_edges, length + (edge_size >> 3)})
					(f-call 'array 'get_iter {this->canvas_edges, length} {_, iter_edge1})
					(assign {x1, y1, y2, (x2 - x1) // (y2 - y1), 1}
						{iter_edge1->edge_x, iter_edge1->edge_ys, iter_edge1->edge_ye,
						iter_edge1->edge_dda, iter_edge1->edge_w})
				(elseif {y1 > y2})
					(breakif {y2 >= this->canvas_cy1})
					(vpif {y2 < ys})
						(assign {y2} {ys})
					(endif)
					(vpif {y1 > ye})
						(assign {y1} {ye})
					(endif)
					(d-call 'array 'get_length {this->canvas_edges} {_, length})
					(f-call 'array 'set_capacity {this->canvas_edges, length + (edge_size >> 3)})
					(f-call 'array 'set_length {this->canvas_edges, length + (edge_size >> 3)})
					(f-call 'array 'get_iter {this->canvas_edges, length} {_, iter_edge1})
					(assign {x2, y2, y1, (x1 - x2) // (y1 - y2), -1}
						{iter_edge1->edge_x, iter_edge1->edge_ys, iter_edge1->edge_ye,
						iter_edge1->edge_dda, iter_edge1->edge_w})
				(endif)
				(assign {iter_begin_polygon[0], iter_begin_polygon[int_size]} {x1, y1})
				(assign {iter_begin_polygon + ptr_size} {iter_begin_polygon})
			(loop-until {iter_begin_polygon == iter_end_polygon})
		(endif)
		(assign {iter_begin_polygons + ptr_size} {iter_begin_polygons})
	(loop-end)

	;edge pointers into tracker for sorting
	(f-call 'array 'get_begin {this->canvas_edges} {_, iter_edge1})
	(f-call 'array 'get_end {this->canvas_edges} {_, iter_edge2})
	(f-call 'array 'set_capacity {this->canvas_edge_tracker, (iter_edge2 - iter_edge1) / edge_size})
	(f-call 'array 'get_begin {this->canvas_edge_tracker} {_, iter_i})
	(assign {iter_i, iter_i} {iter_j, iter_end})
	(loop-while {iter_edge1 != iter_edge2})
		(assign {iter_edge1} {*iter_end})
		(assign {iter_edge1 + edge_size, iter_end + ptr_size} {iter_edge1, iter_end})
	(loop-end)
	(f-call 'array 'sort {this->canvas_edge_tracker, this->canvas_intervals, iter_i, iter_end, $sort_on_y, 0})

	(loop-while {ys < ye})
		;mark edges that end on this scan line
		(assign {iter_i, iter_j, ys, min_int} '(r0 r1 r2 r3))
		(loop-while '(r0 != r1))
			(vp-cpy-ir r0 0 r5)
			(vp-add-cr ptr_size r0)
			(vp-cpy-ir-i r5 edge_ye r6)
			(continueif '(r6 != r2))
			(vp-cpy-ri-i r3 r5 edge_x)
		(loop-end)

		;include new edges that begin on this scan line
		(assign {iter_end} '(r0))
		(loop-while '(r1 != r0))
			(vp-cpy-ir r1 0 r3)
			(vp-cpy-ir-i r3 edge_ys r3)
			(breakif '(r3 != r2))
			(vp-add-cr ptr_size r1)
		(loop-end)
		(assign '(r1) {iter_j})

		;sort on x, plus move all marked dead edges to front !
		(f-call 'array 'sort {this->canvas_edge_tracker, this->canvas_intervals, iter_i, iter_j, $sort_on_x, 0})

		;remove all dead edges
		(assign {iter_i, iter_j, min_int} '(r0 r1 r2))
		(loop-start)
			(vp-cpy-ir r0 0 r3)
			(vp-cpy-ir-i r3 edge_x r3)
			(breakif '(r3 != r2))
			(vp-add-cr ptr_size r0)
		(loop-until '(r0 == r1))
		(assign '(r0) {iter_i})

		(assign '(r0) {iter_k})
		(vpif {mode})
			;odd even
			(loop-while {iter_k != iter_j})
				(assign {this, color, span, iter_k[0]->edge_x >>> fp_shift,
						ys, iter_k[ptr_size]->edge_x >>> fp_shift}
						'(r0 r1 r2 r8 r9 r10))
				(vp-call-r r2)
				(assign {iter_k + ptr_size * 2} {iter_k})
			(loop-end)
		(else)
			;non zero
			(loop-while {iter_k != iter_j})
				(assign {*iter_k} {iter_edge1})
				(assign {iter_edge1->edge_w} {w})
				(loop-while {w != 0})
					(assign {iter_k + ptr_size} {iter_k})
					(assign {*iter_k} {iter_edge2})
					(assign {iter_edge2->edge_x, iter_edge2->edge_w + w} {x2, w})
				(loop-end)
				(assign {this, color, span, iter_edge1->edge_x >>> fp_shift,
						ys, x2 >>> fp_shift}
						'(r0 r1 r2 r8 r9 r10))
				(vp-call-r r2)
				(assign {iter_k + ptr_size} {iter_k})
			(loop-end)
		(endif)

		;step the edges
		(assign {iter_i, iter_j} '(r0 r1))
		(loop-start)
			(vp-cpy-ir r0 0 r2)
			(vp-add-cr ptr_size r0)
			(vp-cpy-ir-i r2 edge_x r3)
			(vp-cpy-ir-i r2 edge_dda r5)
			(vp-add-rr r5 r3)
			(vp-cpy-ri-i r3 r2 edge_x)
		(loop-until '(r0 == r1))

		(assign {ys + 1} {ys})
	(loop-end)

	(f-exit 'canvas 'fpoly {this})
	(pop-scope)
	(return)

(vp-label 'sort_on_x)
	(vp-cpy-ir r1 0 r1)
	(vp-cpy-ir r2 0 r2)
	(vp-cpy-ir-i r1 edge_x r0)
	(vp-cpy-ir-i r2 edge_x r1)
	(vp-sub-rr r1 r0)
	(vp-ret)

(vp-label 'sort_on_y)
	(vp-cpy-ir r1 0 r1)
	(vp-cpy-ir r2 0 r2)
	(vp-cpy-ir-i r1 edge_ys r0)
	(vp-cpy-ir-i r2 edge_ys r1)
	(vp-sub-rr r1 r0)
	(vp-ret)

(def-func-end)
