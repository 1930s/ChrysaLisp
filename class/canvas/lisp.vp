(import 'sys/func.inc)
(import 'class/canvas/canvas.inc)
(import 'class/string/string.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/canvas/lisp_create)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2)

	(push-scope)
	(f-entry 'canvas 'lisp_create {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 3} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'canvas 'create {arg0, arg1, arg2} {value})

(vp-label 'exit)
	(f-exit 'canvas 'lisp_create {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(create-canvas width height aa_scale)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-func 'class/canvas/lisp_load)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0)

	(push-scope)
	(f-entry 'canvas 'lisp_load {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 1} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'canvas 'load {&arg0->string_data} {value})
	(vpifnot {value})
		(f-call 'obj 'ref {this->lisp_sym_nil} {value})
	(endif)

(vp-label 'exit)
	(f-exit 'canvas 'lisp_load {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(canvas-load str)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'string))

	(pop-scope-syms)

(def-func-end)
