(import 'sys/func.inc)
(import 'class/canvas/canvas.inc)

(def-func 'class/canvas/resize)
	;inputs
	;r0 = canvas object
	;r1 = source canvas object
	;outputs
	;r0 = canvas object
	;trashes
	;all but r0

	(ptr 'this 'source)
	(puint 'data 'dsrc)
	(uint 'x 'y 'x2 'y2)
	(uint 'x1a 'x1b 'x1c 'x1d 'y1a 'y1b 'y1c 'y1d)
	(uint 'a 'r 'g 'b 'q 'weight_x 'weight_y)
	(long 'fw 'fh)

	(push-scope)
	(f-entry 'canvas 'resize {this, source})

	(assign {(this->canvas_width + 1) * int_size} {x})
	(vpif {x > this->canvas_resize_buf_size})
		(vpif {this->canvas_resize_buf})
			(f-call 'sys_mem 'free {this->canvas_resize_buf})
		(endif)
		(f-call 'sys_mem 'alloc {x} {this->canvas_resize_buf, this->canvas_resize_buf_size})
	(endif)

	(assign {(source->canvas_width * 256) </ this->canvas_width} {fw})
	(assign {(source->canvas_height * 256) </ this->canvas_height} {fh})

	(assign {0} {x2})
	(loop-while {x2 < this->canvas_width})
		(assign {x2 *> fw} {(this->canvas_resize_buf)[x2 * int_size]})
		(assign {x2 + 1} {x2})
	(loop-end)
	(assign {source->canvas_width * 256} {(this->canvas_resize_buf)[x2 * int_size]})

	(assign {this->canvas_data} {data})
	(assign {0} {y2})
	(loop-while {y2 < this->canvas_height})
		(assign {y2 *> fh} {y1a})
		(assign {y1a >> 8} {y1c})
		(assign {((y2 + 1) *> fh) - 1} {y1b})
		(assign {y1b >> 8} {y1d})

		(assign {0} {x2})
		(loop-while {x2 < this->canvas_width})
			(assign {(this->canvas_resize_buf)[x2 * int_size]} {x1a})
			(assign {x1a >> 8} {x1c})
			(assign {(this->canvas_resize_buf)[(x2 + 1) * int_size] - 1} {x1b})
			(assign {x1b >> 8} {x1d})

			(assign {0, 0, 0, 0, 0} {a, r, g, b, q})

			(assign {y1c} {y})
			(loop-while {y <= y1d})
				(assign {256} {weight_y})
				(vpif {y1c != y1d})
					(vpif {y == y1c})
						(assign {256 - (y1a & 0xFF)} {weight_y})
					(elseif {y == y1d})
						(assign {(y1b & 0xFF) + 1} {weight_y})
					(endif)
				(endif)

				(assign {&(source->canvas_data)[(y * source->canvas_width + x1c) * int_size]} {dsrc})
				(assign {x1c} {x})
				(loop-while {x <= x1d})
					(assign {256} {weight_x})
					(vpif {x1c != x1d})
						(vpif {x == x1c})
							(assign {256 - (x1a & 0xFF)} {weight_x})
						(elseif {x == x1d})
							(assign {(x1b & 0xFF) + 1} {weight_x})
						(endif)
					(endif)

					;multiply pixel channels by the pixel weight and accumulate
					(assign {*dsrc, weight_x * weight_y, r, g, b, a, q}
							'(r0 r4 r7 r8 r9 r10 r11))
					(vp-cpy-rr r0 r1)
					(vp-cpy-rr r0 r2)
					(vp-cpy-rr r0 r3)
					(vp-shr-cr 8 r1)
					(vp-shr-cr 16 r2)
					(vp-shr-cr 24 r3)
					(vp-and-cr 0xff r0)
					(vp-and-cr 0xff r1)
					(vp-and-cr 0xff r2)
					(vp-mul-rr r4 r0)
					(vp-mul-rr r4 r1)
					(vp-mul-rr r4 r2)
					(vp-mul-rr r4 r3)
					(vp-add-rr r7 r0)
					(vp-add-rr r8 r1)
					(vp-add-rr r9 r2)
					(vp-add-rr r10 r3)
					(vp-add-rr r4 r11)
					(assign '(r0 r1 r2 r3 r11) {r, g, b, a, q})

					(assign {dsrc + int_size} {dsrc})
					(assign {x + 1} {x})
				(loop-end)
				(assign {y + 1} {y})
			(loop-end)

			(assign {(r / q) | ((g / q) << 8) | ((b / q) << 16) | ((a / q) << 24)} {*data})
			(assign {data + int_size} {data})

			(assign {x2 + 1} {x2})
		(loop-end)
		(assign {y2 + 1} {y2})
	(loop-end)

	(f-exit 'canvas 'resize {this})
	(pop-scope)
	(return)

(def-func-end)
