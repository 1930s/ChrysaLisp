(import 'sys/func.inc)
(import 'class/msg_out/msg_out.inc)
(import 'class/msg_in/msg_in.inc)

(gen-new 'msg_in)
(gen-create 'msg_in)
(gen-class 'msg_in)

(def-func 'class/msg_in/init)
	;inputs
	;r0 = msg_in object
	;r1 = vtable pointer
	;outputs
	;r0 = msg_in object
	;r1 = 0 if error, else ok
	;trashes
	;all but r0

	;init parent
	(s-call 'msg_in 'init '(r0 r1 0 0 0 0) '(r0 r1))
	(vpif '(r1 != 0))
		;init myself
		(vp-xor-rr r1 r1)
		(vp-cpy-ri r1 r0 msg_in_seqnum)
		(vp-cpy-ri r1 r0 msg_in_ack_seqnum)
		(vp-cpy-cr stream_mail_state_started r1)
		(vp-cpy-ri r1 r0 msg_in_state)
		(vp-lea-i r0 msg_in_mailbox r1)
		(ml-init r1 r2 r3)
		(vp-lea-i r0 msg_in_list r1)
		(lh-init r1 r2)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/msg_in/read_next)
	;inputs
	;r0 = msg_in object
	;outputs
	;r0 = msg_in object
	;r1 = -1 for EOF, else more data
	;trashes
	;all but r0

	(ptr 'this 'msg 'ack_msg)

	(push-scope)
	(f-entry 'msg_in 'read_next {this})

	;while not stopped state
	(loop-while {this->msg_in_state != stream_mail_state_stopped})
		;free any current msg
		(f-call 'sys_mem 'free {this->stream_buffer})

		;read next in sequence
		(assign {0} {msg})
		(loop-start)
			(f-call 'msg_out 'next_seq {&this->msg_in_list, msg, this->msg_in_seqnum} {msg})
			(breakif {msg})
			(f-call 'sys_mail 'read {&this->msg_in_mailbox} {msg})
		(loop-end)
		(assign {this->msg_in_seqnum + 1} {this->msg_in_seqnum})

		;save msg buffer details
		(assign {msg} {this->stream_buffer})
		(assign {&msg->stream_mail_data} {this->stream_bufp})
		(assign {msg + msg->msg_length} {this->stream_bufe})
		(assign {msg->stream_mail_state} {this->msg_in_state})

		;send ack if needed
		(vpif {msg->stream_mail_seqnum >> msg_out_ack_shift == this->msg_in_ack_seqnum})
			(f-call 'sys_mail 'alloc {} {ack_msg})
			(assign {msg->stream_mail_ack_id.id_mbox} {ack_msg->msg_dest.id_mbox})
			(assign {msg->stream_mail_ack_id.id_cpu} {ack_msg->msg_dest.id_cpu})
			(f-call 'sys_mail 'send {ack_msg})
			(assign {this->msg_in_ack_seqnum + 1} {this->msg_in_ack_seqnum})
		(endif)

		(breakif {this->msg_in_state != stream_mail_state_started})
	(loop-until {this->stream_bufp != this->stream_bufe})

	;return -1 if not in started state
	(f-exit 'msg_in 'read_next {this, (this->msg_in_state == stream_mail_state_started) - 1})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/msg_in/read_ready)
	;inputs
	;r0 = msg_in object
	;outputs
	;r0 = msg_in object
	;r1 = 0 if data not available
	;trashes
	;all but r0

	;extend test to include mailbox
	(s-call 'msg_in 'read_ready '(r0) '(r0 r1))
	(vpif '(r1 == 0))
		(vp-cpy-ir r0 (add msg_in_list lh_list_head) r1)
		(vp-cpy-ir r1 ln_node_succ r1)
	(endif)
	(vp-ret)

(def-func-end)
