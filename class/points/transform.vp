(import 'sys/func.inc)
(import 'class/points/points.inc)
(import 'sys/math/math.inc)

(def-func 'class/points/transform)
	;inputs
	;r0 = points object
	;r1 = source points object, can be same
	;r2 = 16.16/16.16 m1xy
	;r3 = 16.16/16.16 m2xy
	;r4 = 16.16/16.16 trxy
	;outputs
	;r0 = points object
	;trashes
	;all but r0

	(ptr 'this 'that)
	(pptr 'iter_begin 'iter_end 'iter_this)
	(union
		'(ulong 'm1 'm2 'tr)
		'(int 'm1x 'm1y 'm2x 'm2y 'trx 'try))

	(push-scope)
	(f-entry 'points 'transform {this, that, m1, m2, tr})

	(f-call 'points 'get_iters {that} {_, iter_begin, iter_end})
	(f-call 'points 'get_begin {this} {_, iter_this})

	(vec-set 0)
	(vec-load 3 {iter_end, iter_begin, iter_this})
	(bind '(e i j) (vec-top 3))
	(vec-load 2 {m1x, m1y})
	(defq m1 (vec-top 2))
	(vec-load 2 {m2x, m2y})
	(defq m2 (vec-top 2))
	(vec-load 2 {trx, try})
	(defq tr (vec-top 2))

	(loop-while `(,i != ,e))
		(vec-load-int 2 i)
		(defq xy (vec-top 2))

		(vec-dup 2 m1)
		(vec-fdot 2 xy)
		(vec-dup 2 m2)
		(vec-fdot 2 xy)
		(vec-add 2 tr)
		(vec-store-int 2 j)
		(vp-add-cr long_size i)
		(vp-add-cr long_size j)
	(loop-end)

	(f-exit 'points 'transform {this})
	(pop-scope)
	(return)

(def-func-end)
