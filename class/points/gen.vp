(import 'sys/func.inc)
(import 'class/points/points.inc)
(import 'sys/math/math.inc)

(def-func 'class/points/gen_clerp)
	;inputs
	;r0 = points object
	;r1 = stack array
	;r2 = 16.16/16.16 c.xy
	;r3 = 16.16/16.16 v1.xy
	;r5 = 16.16/16.16 v2.xy
	;r6 = 16.16 radius
	;r7 = 16.16 tolerance
	;outputs
	;r0 = points object
	;trashes
	;all but r0, r4

	(ptr 'this 'stack)
	(pulong 'iter_end)
	(union
		'(ulong 'c 'v1 'v2 'bv)
		'(int 'cx 'cy 'v1x 'v1y 'v2x 'v2y 'bvx 'bvy))
	(int 'radius 'eps)
	(uint 'start 'length)

	(push-scope)
	(f-entry 'points 'gen_clerp {this, stack, c, v1, v2, radius, eps})

	(vpif {radius >= 0.5})
		(vec-set 0)
		(vec-load 1 {256.0} {eps})
		(vec-fmul 1)
		(vec-load 1 {64.0})
		(vec-max 2)
		(vec-store 1 {eps})

		;output first point
		(vec-load 2 {cx, cy} {v1x, v1y})
		(vec-add 2)
		(vec-store 2 {bvx, bvy})
		(f-call 'points 'push_back {this, bv})

		(d-call 'array 'get_length {stack} {_, start})
		(loop-start)
			;calculate the mid-point
			(vec-load 2 {v1x, v1y} {v2x, v2y})
			(vec-add 2)
			(vec-asr 2 1)
			(vec-tee 2 {bvx, bvy})
			(vec-load 1 {radius})
			(vec-scale 2)
			(vec-load 2 {bvx, bvy})
			(vec-flength 2)
			(vec-load 1 {1})
			(vec-max 2)
			(vec-dup 1)
			(vec-div 2)
			(vec-store 2 {bvx, bvy})

			;flatness test
			(vec-load 2 {v1x, v1y} {v2x, v2y})
			(vec-fdistance-squared 2)
			(vec-load 1 {eps})
			(vec-def (vec-pop 2) d e)
			(vpif `(,d <= ,e))
				;output point
				(vec-load 2 {bvx, bvy} {cx, cy})
				(vec-add 2)
				(vec-store 2 {bvx, bvy})
				(f-call 'points 'push_back {this, bv})
			(else)
				;continue subdivision
				(d-call 'array 'get_length {stack} {_, length})
				(f-call 'array 'set_capacity {stack, length + 4})
				(f-call 'array 'get_end {stack} {_, iter_end})
				(f-call 'array 'set_length {stack, length + 4})
				(vec-load 5 {bv, v2, v1, bv, iter_end})
				(vec-def (vec-pop 1) p)
				(vec-store-long 4 p)
			(endif)

			(d-call 'array 'get_length {stack} {_, length})
			(breakif {length == start})
			(f-call 'array 'set_length {stack, length - 2})
			(f-call 'array 'get_end {stack} {_, iter_end})
			(vec-load 1 {iter_end})
			(vec-def (vec-top 1) p)
			(vec-load-long 2 p)
			(vec-store 2 {v1, v2})
			(vec-pop 1)
		(loop-end)

		;output last point
		(vec-load 2 {cx, cy} {v2x, v2y})
		(vec-add 2)
		(vec-store 2 {bvx, bvy})
		(f-call 'points 'push_back {this, bv})
	(endif)

	(f-exit 'points 'gen_clerp {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/points/gen_arc)
	;inputs
	;r0 = points object
	;r1 = stack array
	;r2 = 16.16/16.16 c.xy
	;r3 = 16.16 a1
	;r5 = 16.16 a2
	;r6 = 16.16 radius
	;r7 = 16.16 tolerance
	;outputs
	;r0 = points object
	;trashes
	;all but r0, r4

	(ptr 'this 'stack)
	(union
		'(ulong 'c 'v1 'v2)
		'(int 'cx 'cy 'v1x 'v1y 'v2x 'v2y))
	(union
		'(int 'ca1 'ca2 'sa1 'sa2)
		'(int 'a1 'a2 'ah))
	(int 'radius 'eps)

	(push-scope)
	(f-entry 'points 'gen_arc {this, stack, c, a1, a2, radius, eps})

	(vpif {radius >= 0.5})
		(vec-set 0)
		(vec-load 2 {a1, fp_2pi})
		(vec-fmod 1)
		(vec-store 1 {a1})
		(vpif {a2 > fp_2pi})
			(vec-load 2 {a2, fp_2pi})
			(vec-fmod 1)
			(vec-store 1 {a2})
		(endif)

		(vpif {a2 <= fp_hpi})
			(assign {a1 + a2} {a2})
			(f-call 'math 'fsin {a1} {sa1})
			(f-call 'math 'fcos {a1} {ca1})
			(f-call 'math 'fsin {a2} {sa2})
			(f-call 'math 'fcos {a2} {ca2})
			(vec-load 5 {sa1, ca1, sa2, ca2, radius})
			(vec-fscale 4)
			(vec-store 2 {v2x, v2y} {v1x, v1y})
			(f-call 'points 'gen_clerp {this, stack, c, v1, v2, radius, eps})
		(else)
			(assign {a2 >>> 1} {ah})
			(assign {a2 - ah} {a2})
			(f-call 'points 'gen_arc {this, stack, c, a1, ah, radius, eps})
			(f-call 'points 'gen_arc {this, stack, c, a1 + ah, a2, radius, eps})
		(endif)
	(endif)

	(f-exit 'points 'gen_arc {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/points/gen_quadratic)
	;inputs
	;r0 = points object
	;r1 = stack array
	;r2 = 16.16/16.16 p1.xy
	;r3 = 16.16/16.16 p2.xy
	;r5 = 16.16/16.16 p3.xy
	;r6 = 16.16 tolerance
	;outputs
	;r0 = points object
	;trashes
	;all but r0, r4

	(ptr 'this 'stack)
	(pulong 'iter_end)
	(union
		'(ulong 'p1 'p2 'p3 'p12 'p23 'p123)
		'(int 'p1x 'p1y 'p2x 'p2y 'p3x 'p3y
			'p12x 'p12y 'p23x 'p23y 'p123x 'p123y))
	(uint 'start 'length)
	(int 'eps)

	(push-scope)
	(f-entry 'points 'gen_quadratic {this, stack, p1, p2, p3, eps})

	;output first point
	(vec-set 0)
	(f-call 'points 'push_back {this, p1})

	(d-call 'array 'get_length {stack} {_, start})
	(loop-start)
		;calculate the mid-points
		(vec-load 4 {p1x, p1y, p2x, p2y})
		(vec-dup 2)
		(vec-load 2 {p3x, p3y})
		(vec-add 4)
		(vec-asr 4 1)
		(vec-tee 4 {p12x, p12y, p23x, p23y})
		(vec-add 2)
		(vec-asr 2 1)
		(vec-store 2 {p123x, p123y})

		;flatness test
		(vec-load 1 {p1x} {p3x})
		(vec-add 1)
		(vec-load 1 {p2x})
		(vec-dup 1)
		(vec-dif 3)
		(vec-load 1 {p1y} {p3y})
		(vec-add 1)
		(vec-load 1 {p2y})
		(vec-dup 1)
		(vec-dif 3)
		(vec-abs 2)
		(vec-sum 2)

		(vec-load 1 {eps})
		(vec-def (vec-pop 2) d e)
		(vpif `(,d <= ,e))
			;output point
			(f-call 'points 'push_back {this, p123})
		(else)
			;continue subdivision
			(d-call 'array 'get_length {stack} {_, length})
			(f-call 'array 'set_capacity {stack, length + 6})
			(f-call 'array 'get_end {stack} {_, iter_end})
			(f-call 'array 'set_length {stack, length + 6})
			(vec-load 7 {p123, p23, p3, p1, p12, p123, iter_end})
			(vec-store-long 6 (elem 0 (vec-pop 1)))
		(endif)

		(d-call 'array 'get_length {stack} {_, length})
		(breakif {length == start})
		(f-call 'array 'set_length {stack, length - 3})
		(f-call 'array 'get_end {stack} {_, iter_end})
		(vec-load 1 {iter_end})
		(vec-load-long 3 (elem 0 (vec-top 1)))
		(vec-store 3 {p1, p2, p3})
		(vec-pop 1)
	(loop-end)

	;output last point
	(f-call 'points 'push_back {this, p3})

	(f-exit 'points 'gen_quadratic {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/points/gen_cubic)
	;inputs
	;r0 = points object
	;r1 = stack array
	;r2 = 16.16/16.16 p1.xy
	;r3 = 16.16/16.16 p2.xy
	;r5 = 16.16/16.16 p3.xy
	;r6 = 16.16/16.16 p4.xy
	;r7 = 16.16 tolerance
	;outputs
	;r0 = points object
	;trashes
	;all but r0, r4

	(ptr 'this 'stack)
	(pulong 'iter_end)
	(union
		'(ulong 'p1 'p2 'p3 'p4 'p12 'p23 'p34 'p123 'p234 'p1234)
		'(int 'p1x 'p1y 'p2x 'p2y 'p3x 'p3y 'p4x 'p4y
			'p12x 'p12y 'p23x 'p23y 'p34x 'p34y 'p123x 'p123y 'p234x 'p234y 'p1234x 'p1234y))
	(uint 'start 'length)
	(int 'eps)

	(push-scope)
	(f-entry 'points 'gen_cubic {this, stack, p1, p2, p3, p4, eps})

	;output first point
	(vec-set 0)
	(f-call 'points 'push_back {this, p1})

	(d-call 'array 'get_length {stack} {_, start})
	(loop-start)
		;calculate the mid-points
		(vec-load 6 {p1x, p1y, p2x, p2y, p3x, p3y})
		(vec-dup 4)
		(vec-load 2 {p4x, p4y})
		(vec-add 6)
		(vec-asr 6 1)
		(vec-store 2 {p34x, p34y})
		(vec-tee 4 {p12x, p12y, p23x, p23y})
		(vec-dup 2)
		(vec-load 2 {p34x, p34y})
		(vec-add 4)
		(vec-asr 4 1)
		(vec-tee 4 {p123x, p123y, p234x, p234y})
		(vec-add 2)
		(vec-asr 2 1)
		(vec-store 2 {p1234x, p1234y})

		;flatness test
		(vec-load 1 {p1x} {p3x})
		(vec-add 1)
		(vec-load 1 {p2x})
		(vec-dup 1)
		(vec-dif 3)
		(vec-load 1 {p1y} {p3y})
		(vec-add 1)
		(vec-load 1 {p2y})
		(vec-dup 1)
		(vec-dif 3)
		(vec-load 1 {p2x} {p4x})
		(vec-add 1)
		(vec-load 1 {p3x})
		(vec-dup 1)
		(vec-dif 3)
		(vec-load 1 {p2y} {p4y})
		(vec-add 1)
		(vec-load 1 {p3y})
		(vec-dup 1)
		(vec-dif 3)
		(vec-abs 4)
		(vec-sum 4)

		(vec-load 1 {eps})
		(vec-def (vec-pop 2) d e)
		(vpif `(,d <= ,e))
			;output point
			(f-call 'points 'push_back {this, p1234})
		(else)
			;continue subdivision
			(d-call 'array 'get_length {stack} {_, length})
			(f-call 'array 'set_capacity {stack, length + 8})
			(f-call 'array 'get_end {stack} {_, iter_end})
			(f-call 'array 'set_length {stack, length + 8})
			(vec-load 9 {p1234, p234, p34, p4, p1, p12, p123, p1234, iter_end})
			(vec-store-long 8 (elem 0 (vec-pop 1)))
		(endif)

		(d-call 'array 'get_length {stack} {_, length})
		(breakif {length == start})
		(f-call 'array 'set_length {stack, length - 4})
		(f-call 'array 'get_end {stack} {_, iter_end})
		(vec-load 1 {iter_end})
		(vec-load-long 4 (elem 0 (vec-top 1)))
		(vec-store 4 {p1, p2, p3, p4})
		(vec-pop 1)
	(loop-end)

	;output last point
	(f-call 'points 'push_back {this, p4})

	(f-exit 'points 'gen_cubic {this})
	(pop-scope)
	(return)

(def-func-end)
