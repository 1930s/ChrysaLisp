(import 'sys/func.inc)
(import 'class/points/points.inc)
(import 'class/vector/vector.inc)
(import 'sys/math/math.inc)

(def-func 'class/points/stroke_joints)
	;inputs
	;r0 = points object
	;r1 = stack array
	;r2 = in points iter_i
	;r3 = in points iter_j
	;r5 = 16.16/16.16 p1.xy
	;r6 = 16.16/16.16 p2.xy
	;r7 = join style
	;r8 = 16.16 radius
	;r9 = 16.16 tolerance
	;outputs
	;r0 = points object
	;trashes
	;all but r0, r4

	(union
		'(ulong 'p1 'p2 'p3 'l2_v 'l2_pv 'l2_npv 'l2_rv 'l1_v 'l1_pv 'l1_npv 'l1_rv)
		'(int 'p1x 'p1y 'p2x 'p2y 'p3x 'p3y
			'l2_vx 'l2_vy 'l2_pvx 'l2_pvy 'l2_npvx 'l2_npvy 'l2_rvx 'l2_rvy
			'l1_vx 'l1_vy 'l1_pvx 'l1_pvy 'l1_npvx 'l1_npvy 'l1_rvx 'l1_rvy))
	(pulong 'iter_i 'iter_j)
	(ptr 'this 'stack)
	(int 'radius 'eps 'step 'c)
	(byte 'join_style)

	(push-scope)
	(f-entry 'points 'stroke_joints {this, stack, iter_i, iter_j, p1, p2, join_style, radius, eps})

	(vpif {radius >= 0.5 && iter_i != iter_j})
		(vpif {iter_j > iter_i})
			(assign {long_size} {step})
		(else)
			(assign {-long_size} {step})
		(endif)

		(vec-set 0)
		(vec-load 2 {p2x, p2y} {p1x, p1y})
		(vec-sub 2)
		(vec-tee 2 {l2_vx, l2_vy})
		(vec-perp)
		(vec-tee 2 {l2_pvx, l2_pvy})
		(vec-fnorm 2)
		(vec-tee 2 {l2_npvx, l2_npvy})
		(vec-load 1 {radius})
		(vec-fscale 2)
		(vec-store 2 {l2_rvx, l2_rvy})

		(loop-start)
			(vec-load 4 {p2, l2_v, l2_npv, l2_rv})
			(vec-store 4 {p1, l1_v, l1_npv, l1_rv})
			(assign {*iter_i, iter_i + step} {p2, iter_i})
			(vec-load 2 {p2x, p2y} {p1x, p1y})
			(vec-sub 2)
			(vec-tee 2 {l2_vx, l2_vy})
			(vec-perp)
			(vec-tee 2 {l2_pvx, l2_pvy})
			(vec-fnorm 2)
			(vec-tee 2 {l2_npvx, l2_npvy})
			(vec-load 1 {radius})
			(vec-fscale 2)
			(vec-store 2 {l2_rvx, l2_rvy})

			;what kind of join
			(vec-load 2 {l1_npvx, l1_npvy} {l2_npvx, l2_npvy})
			(vec-perp)
			(vec-fdot 2)
			(vec-store 1 {c})

			(switch)
			(case {c <= 0 || join_style == join_miter})
				;mitre join
				(vec-load 2 {p1x, p1y})
				(vec-dup 2)
				(vec-load 4 {l1_rvx, l1_rvy, l2_rvx, l2_rvy})
				(vec-add 4)
				(vec-store 4 {p3x, p3y, p1x, p1y})
				(f-call 'math 'vec_intersect {p3, l1_v, p1, l2_v} {p1})
				(goto 'out_p1)
			(case {join_style == join_bevel})
				;bevel join
				(vec-load 2 {p1x, p1y})
				(vec-dup 2)
				(vec-load 4 {l1_rvx, l1_rvy, l2_rvx, l2_rvy})
				(vec-add 4)
				(vec-store 4 {p3x, p3y, p1x, p1y})
				(f-call 'points 'push_back {this, p3})
			(vp-label 'out_p1)
				(f-call 'points 'push_back {this, p1})
				(break)
			(default)
				;rounded join
				(f-call 'points 'gen_clerp {this, stack, p1, l1_rv, l2_rv, radius, eps})
			(endswitch)
		(loop-until {iter_i == iter_j})
	(endif)

	(f-exit 'points 'stroke_joints {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/points/stroke_polygons)
	;r0 = vector for output polygons
	;r1 = stack array
	;r2 = vector of input polygons
	;r3 = join style
	;r5 = 16.16 radius
	;r6 = 16.16 tolerance
	;outputs
	;r0 = vector for output polygons
	;trashes
	;all but r0, r4

	(ptr 'this 'in_polygons 'stack 'polygon)
	(pptr 'iter_begin_polygons 'iter_end_polygons)
	(pulong 'iter_begin_polyline 'iter_end_polyline)
	(int 'radius 'eps)
	(byte 'join_style)

	(push-scope)
	(f-entry 'points 'stroke_polygons {this, stack, in_polygons, join_style, radius, eps})

	(vpif {radius >= 0.5})
		(f-call 'vector 'get_begin {in_polygons} {_, iter_begin_polygons})
		(f-call 'vector 'get_end {in_polygons} {_, iter_end_polygons})
		(loop-while {iter_begin_polygons != iter_end_polygons})
			(f-call 'points 'rem_co_polygon {*iter_begin_polygons, *iter_begin_polygons, 0.5})
			(f-call 'vector 'get_begin {*iter_begin_polygons} {_, iter_begin_polyline})
			(f-call 'vector 'get_end {*iter_begin_polygons} {_, iter_end_polyline})
			(f-call 'points 'create {} {polygon})
			(f-call 'points 'stroke_joints {polygon, stack, iter_begin_polyline, iter_end_polyline,
				iter_end_polyline[-long_size * 2], iter_end_polyline[-long_size], join_style, radius, eps})
			(f-call 'vector 'push_back {this, polygon})
			(f-call 'points 'create {} {polygon})
			(f-call 'points 'stroke_joints {polygon, stack, iter_end_polyline - long_size, iter_begin_polyline - long_size,
				iter_begin_polyline[long_size], *iter_begin_polyline, join_style, radius, eps})
			(f-call 'vector 'push_back {this, polygon})
			(assign {iter_begin_polygons + ptr_size} {iter_begin_polygons})
		(loop-end)
	(endif)

	(f-exit 'points 'stroke_polygons {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/points/stroke_polylines)
	;inputs
	;r0 = vector for output polygons
	;r1 = stack array
	;r2 = vector of input polylines
	;r3 = join style
	;r5 = cap style1
	;r6 = cap style2
	;r7 = 16.16 radius
	;r8 = 16.16 tolerance
	;outputs
	;r0 = vector for output polygons
	;trashes
	;all but r0, r4

	(union
		'(ulong 'p1 'p2 'p3 'p4 'l2_v 'l2_pv 'l2_npv 'l2_rv 'l1_v 'l1_pv 'l1_npv 'l1_rv)
		'(int 'p1x 'p1y 'p2x 'p2y 'p3x 'p3y 'p4x 'p4y
			'l2_vx 'l2_vy 'l2_pvx 'l2_pvy 'l2_npvx 'l2_npvy 'l2_rvx 'l2_rvy
			'l1_vx 'l1_vy 'l1_pvx 'l1_pvy 'l1_npvx 'l1_npvy 'l1_rvx 'l1_rvy))
	(pulong 'iter 'iter_begin 'iter_end)
	(pptr 'iter_begin_polylines 'iter_end_polylines)
	(ptr 'this 'stack 'out_points)
	(int 'radius 'eps 'step 'c)
	(byte 'join_style 'cap1_style 'cap2_style)

	(push-scope)
	(f-entry 'points 'stroke_polylines {this, stack, iter_end_polylines, join_style, cap1_style, cap2_style, radius, eps})

	(vpif {radius >= 0.5})
		(vec-set 0)
		(f-call 'vector 'get_begin {iter_end_polylines} {_, iter_begin_polylines})
		(f-call 'vector 'get_end {iter_end_polylines} {_, iter_end_polylines})
		(loop-while {iter_begin_polylines != iter_end_polylines})
			(assign {*iter_begin_polylines} {iter_begin})
			(f-call 'points 'rem_co_polyline {iter_begin, iter_begin, 0.5})
			(f-call 'points 'get_begin {iter_begin} {_, iter})
			(f-call 'points 'get_end {iter_begin} {_, iter_end})
			(f-call 'points 'create {} {out_points})
			(assign {iter - long_size, long_size} {iter_begin, step})
			(loop-start)
				(assign {*iter, iter + step} {p1, iter})
				(assign {*iter, iter + step} {p2, iter})
				(vec-load 2 {p2x, p2y} {p1x, p1y})
				(vec-sub 2)
				(vec-tee 2 {l2_vx, l2_vy})
				(vec-perp)
				(vec-tee 2 {l2_pvx, l2_pvy})
				(vec-fnorm 2)
				(vec-tee 2 {l2_npvx, l2_npvy})
				(vec-load 1 {radius})
				(vec-fscale 2)
				(vec-store 2 {l2_rvx, l2_rvy})

				(vpif {step > 0})
					(assign {cap1_style} {c})
				(else)
					(assign {cap2_style} {c})
				(endif)
				(switch)
				(case {c == cap_butt})
					;butt cap
					(vec-load 2 {p1x, p1y})
					(vec-goto 'out_cap)
				(case {c == cap_square})
					;square cap
					(vec-load 2 {p1x, p1y} {l2_rvx, l2_rvy})
					(vec-perp)
					(vec-add 2)
				(vp-label 'out_cap)
					(vec-load 2 {l2_rvx, l2_rvy})
					(vec-dup 4)
					(vec-sub 2)
					(vec-goto 'store_p3p4)
				(case {c == cap_tri})
					;triangle cap
					(vec-load 2 {p1x, p1y} {l2_rvx, l2_rvy})
					(vec-dup 4)
					(vec-dup 4)
					(vec-sub 2)
					(vec-store 2 {p1x, p1y})
					(vec-perp)
					(vec-add 2)
					(vec-store 2 {p3x, p3y})
					(vec-add 2)
					(vec-store 2 {p4x, p4y})
					(f-call 'points 'push_back {out_points, p1})
					(goto 'out_p3p4)
				(case {c == cap_arrow})
					;arrow cap
					(vec-load 2 {l2_rvx, l2_rvy})
					(vec-shl 2 1)
					(vec-store 2 {p3x, p3y})
					(vec-load 2 {p1x, p1y} {l2_rvx, l2_rvy})
					(vec-sub 2)
					(vec-store 2 {p4x, p4y})
					(f-call 'points 'push_back {out_points, p4})
					(vec-load 2 {p1x, p1y} {p3x, p3y})
					(vec-sub 2)
					(vec-store 2 {p4x, p4y})
					(f-call 'points 'push_back {out_points, p4})
					(vec-load 2 {p1x, p1y} {p3x, p3y})
					(vec-perp)
					(vec-add 2)
					(vec-store 2 {p4x, p4y})
					(f-call 'points 'push_back {out_points, p4})
					(vec-load 2 {l2_rvx, l2_rvy} {p1x, p1y})
					(vec-dup 2)
					(vec-load 2 {p3x, p3y})
					(vec-add 2)
				(vp-label 'store_p3p4)
					(vec-store 2 {p3x, p3y})
					(vec-add 2)
					(vec-store 2 {p4x, p4y})
				(vp-label 'out_p3p4)
					(f-call 'points 'push_back {out_points, p3})
					(f-call 'points 'push_back {out_points, p4})
					(break)
				(default)
					;round cap
					(vec-load 2 {l2_rvx, l2_rvy})
					(vec-dup 2)
					(vec-perp)
					(vec-store 2 {p3x, p3y})
					(vec-load 1 {-1})
					(vec-scale 2)
					(vec-store 2 {p4x, p4y})
					(f-call 'points 'gen_clerp {out_points, stack, p1, p4, p3, radius, eps})
					(f-call 'points 'gen_clerp {out_points, stack, p1, p3, l2_rv, radius, eps})
				(endswitch)
				(loop-while {iter != iter_begin && iter != iter_end})
					(vec-load 4 {p2, l2_v, l2_npv, l2_rv})
					(vec-store 4 {p1, l1_v, l1_npv, l1_rv})
					(assign {*iter, iter + step} {p2, iter})
					(vec-load 2 {p2x, p2y} {p1x, p1y})
					(vec-sub 2)
					(vec-tee 2 {l2_vx, l2_vy})
					(vec-perp)
					(vec-tee 2 {l2_pvx, l2_pvy})
					(vec-fnorm 2)
					(vec-tee 2 {l2_npvx, l2_npvy})
					(vec-load 1 {radius})
					(vec-fscale 2)
					(vec-store 2 {l2_rvx, l2_rvy})

					;what kind of join
					(vec-load 2 {l1_npvx, l1_npvy} {l2_npvx, l2_npvy})
					(vec-perp)
					(vec-fdot 2)
					(vec-store 1 {c})

					(switch)
					(case {c <= 0 || join_style == join_miter})
						;mitre join
						(vec-load 2 {p1x, p1y})
						(vec-dup 2)
						(vec-load 4 {l1_rvx, l1_rvy, l2_rvx, l2_rvy})
						(vec-add 4)
						(vec-store 4 {p3x, p3y, p1x, p1y})
						(f-call 'math 'vec_intersect {p3, l1_v, p1, l2_v} {p1})
						(goto 'out_p1)
					(case {join_style == join_bevel})
						;bevel join
						(vec-load 2 {p1x, p1y})
						(vec-dup 2)
						(vec-load 4 {l1_rvx, l1_rvy, l2_rvx, l2_rvy})
						(vec-add 4)
						(vec-store 4 {p3x, p3y, p1x, p1y})
						(f-call 'points 'push_back {out_points, p3})
					(vp-label 'out_p1)
						(f-call 'points 'push_back {out_points, p1})
						(break)
					(default)
						;rounded join
						(f-call 'points 'gen_clerp {out_points, stack, p1, l1_rv, l2_rv, radius, eps})
					(endswitch)
				(loop-end)
				(breakif {step < 0})
				(assign {-step} {step})
				(assign {iter + step} {iter})
			(loop-end)
			(f-call 'vector 'push_back {this, out_points})
			(assign {iter_begin_polylines + ptr_size} {iter_begin_polylines})
		(loop-end)
	(endif)

	(f-exit 'points 'stroke_polylines {this})
	(pop-scope)
	(return)

(def-func-end)
