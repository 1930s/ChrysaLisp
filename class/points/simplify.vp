(import 'sys/func.inc)
(import 'class/points/points.inc)
(import 'sys/math/math.inc)

(def-func 'class/points/simplify)
	;inputs
	;r0 = points object (ptr)
	;r1 = source points object
	;r2 = stack array object (ptr)
	;r3 = tolerance (16.16)
	;outputs
	;r0 = points object (ptr)
	;trashes
	;all but r0

	(ptr 'this 'that 'stack)
	(union
		'(ulong 'span 'rspan)
		'(uint 'first 'last 'index 'rlast))
	(ulong 'p1 'p2 'p3)
	(uint 'start 'length)
	(int 'eps 'max 'dist)

	(push-scope)
	(f-entry 'points 'simplify {this, that, stack, eps})

	;any point doing anything ?
	(d-call 'points 'get_length {that} {_, length})
	(vpif '{length <= 2})
		;just append to output
		(d-call 'points 'append {this, that, 0, length})
	(else)
		;first span
		(assign {0, length - 1} {first, last})

		;output first point
		(f-call 'points 'get_first {that} {_, p1})
		(f-call 'points 'push_back {this, p1})

		(d-call 'array 'get_length {stack} {_, start})
		(loop-start)
			(switch 'out)
			(case {last - first > 1})
				;find max distance point
				(assign {eps, first + 1} {max, length})
				(f-call 'points 'get_element {that, first} {_, p2})
				(f-call 'points 'get_element {that, last} {_, p3})
				(loop-start)
					(f-call 'points 'get_element {that, length} {_, p1})
					(f-call 'math 'distance_sqd {p1, p2, p3} {dist})
					(vpif {dist > max})
						(assign {dist, length} {max, index})
					(endif)
					(assign {length + 1} {length})
				(loop-until {length == last})

				;continue subdivision ?
				(vpif {max > eps})
					(assign {last} {rlast})
					(assign {index} {last})
					(f-call 'array 'push_back {stack, rspan})
					(f-call 'array 'push_back {stack, span})
					(break out)
				(endif)
			(default)
				;output point
				(f-call 'points 'get_element {that, last} {_, p1})
				(f-call 'points 'push_back {this, p1})
			(endswitch)

			;next span
			(d-call 'array 'get_length {stack} {_, length})
			(breakif {length == start})
			(f-call 'array 'get_back {stack} {_, span})
			(d-call 'array 'pop_back {stack})
		(loop-end)
	(endif)

	(f-exit 'points 'simplify {this})
	(pop-scope)
	(return)

(def-func-end)
