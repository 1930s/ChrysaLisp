(import 'sys/func.inc)
(import 'class/points/points.inc)
(import 'class/vector/vector.inc)
(import 'sys/math/math.inc)

(gen-new 'points)
(gen-create 'points)
(gen-class 'points)

(def-func 'class/points/rem_co_polyline)
	;inputs
	;r0 = points object
	;r1 = dest points object, can be same
	;r2 = 16.16 tolerance
	;outputs
	;r0 = points object
	;trashes
	;all but r0, r4

	(ptr 'this 'that)
	(pptr 'iter_begin 'iter_end 'iter_that)
	(int 'eps)

	(push-scope)
	(f-entry 'points 'rem_co_polyline {this, that, eps})

	(f-call 'points 'get_begin {this} {_, iter_begin})
	(f-call 'points 'get_end {this} {_, iter_end})
	(f-call 'points 'get_begin {that} {_, iter_that})

	(vec-set 0)
	(vec-load 2 {iter_end, iter_begin})
	(vec-dup 2)
	(vec-dif 2)
	(vpif `(,(elem 0 (vec-pop 1)) > long_size))
		(vec-load 1 {eps})
		(vec-fsquare 1)
		(vec-load 1 {iter_that})
		(vec-def (vec-top 4) e i x j)
		(loop-start 'outer_loop)
			(vpif `(,i != ,j))
				(vec-load-long 1 i)
				(vec-store-long 1 j)
			(endif)
			(loop-start)
				(vp-add-cr long_size i)
				(breakif `(,i == ,e) outer_loop)
				(vec-load-int 2 j)
				(vec-load-int 2 i)
				(vec-fdistance-squared 2)
			(loop-until `(,(elem 0 (vec-pop 1)) >= ,x))
			(vp-add-cr long_size j)
		(loop-end)
		(vec-store 1 {iter_end})
		(f-call 'points 'set_length {that, (iter_end - iter_that >> 3) + 1})
	(endif)

	(f-exit 'points 'rem_co_polyline {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/points/rem_co_polygon)
	;inputs
	;r0 = points object
	;r1 = dest points object, can be same
	;r2 = 16.16 tolerance
	;outputs
	;r0 = points object
	;trashes
	;all but r0, r4

	(ptr 'this 'that)
	(pptr 'iter_begin 'iter_end)
	(int 'eps)

	(push-scope)
	(f-entry 'points 'rem_co_polygon {this, that, eps})

	(f-call 'points 'rem_co_polyline {this, that, eps})
	(f-call 'points 'get_begin {that} {_, iter_begin})
	(f-call 'points 'get_end {that} {_, iter_end})

	(vec-set 0)
	(vec-load 2 {iter_end, iter_begin})
	(vec-dup 2)
	(vec-dif 2)
	(vpif `(,(elem 0 (vec-pop 1)) > long_size))
		(vec-load 1 {eps})
		(vec-fsquare 1)
		(vec-def (vec-top 3) e i x)
		(vec-load-int 2 i)
		(vec-load-int 2 e (neg long_size))
		(vec-fdistance-squared 2)
		(vpif `(,(elem 0 (vec-pop 1)) < ,x))
			(d-call 'points 'pop_back {that})
		(endif)
	(endif)

	(f-exit 'points 'rem_co_polygon {this})
	(pop-scope)
	(return)

(def-func-end)
