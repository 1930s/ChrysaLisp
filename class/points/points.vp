(import 'sys/func.inc)
(import 'class/points/points.inc)
(import 'sys/math/math.inc)

(gen-new 'points)
(gen-create 'points)
(gen-class 'points)

(def-func 'class/points/rem_co_polyline)
	;inputs
	;r0 = points object
	;r1 = dest points object, can be same
	;r2 = 16.16 tolerance
	;outputs
	;r0 = points object
	;trashes
	;all but r0, r4

	(ptr 'this 'that)
	(pptr 'iter_begin 'iter_end 'iter_that)
	(int 'eps)

	(push-scope)
	(f-entry 'points 'rem_co_polyline {this, that, eps})

	(f-call 'points 'get_begin {this} {_, iter_begin})
	(f-call 'points 'get_end {this} {_, iter_end})
	(f-call 'points 'get_begin {that} {_, iter_that})

	(vec-set 0)
	(vec-load 2 {iter_end, iter_begin})
	(vec-dup 2)
	(vec-dif 2)
	(vpif `(,(elem 0 (vec-pop 1)) > long_size))
		(vec-load 2 {eps, iter_that})
		(vec-def (vec-top 4) e i x j)
		(loop-start 'outer_loop)
			(vpif `(,i != ,j))
				(vec-load-long 1 i)
				(vec-store-long 1 j)
			(endif)
			(loop-start)
				(vp-add-cr long_size i)
				(breakif `(,i == ,e) outer_loop)
				(vec-load-int 2 j)
				(vec-load-int 2 i)
				(vec-manhattan 2)
			(loop-until `(,(elem 0 (vec-pop 1)) >= ,x))
			(vp-add-cr long_size j)
		(loop-end)
		(vec-store 1 {iter_end})
		(f-call 'points 'set_length {that, (iter_end - iter_that >> 3) + 1})
	(endif)

	(f-exit 'points 'rem_co_polyline {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/points/rem_co_polygon)
	;inputs
	;r0 = points object
	;r1 = dest points object, can be same
	;r2 = 16.16 tolerance
	;outputs
	;r0 = points object
	;trashes
	;all but r0, r4

	(ptr 'this 'that)
	(pptr 'iter_begin 'iter_end)
	(int 'eps)

	(push-scope)
	(f-entry 'points 'rem_co_polygon {this, that, eps})

	(f-call 'points 'rem_co_polyline {this, that, eps})
	(f-call 'points 'get_begin {that} {_, iter_begin})
	(f-call 'points 'get_end {that} {_, iter_end})

	(vec-set 0)
	(vec-load 2 {iter_end, iter_begin})
	(vec-dup 2)
	(vec-dif 2)
	(vpif `(,(elem 0 (vec-pop 1)) > long_size))
		(vec-load 1 {eps})
		(vec-def (vec-top 3) e i x)
		(vec-load-int 2 i)
		(vec-load-int 2 e (neg long_size))
		(vec-manhattan 2)
		(vpif `(,(elem 0 (vec-pop 1)) < ,x))
			(d-call 'points 'pop_back {that})
		(endif)
	(endif)

	(f-exit 'points 'rem_co_polygon {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/points/gen_clerp)
	;inputs
	;r0 = points object
	;r1 = stack array
	;r2 = 16.16 c.x
	;r3 = 16.16 c.y
	;r5 = 16.16 v1.x
	;r6 = 16.16 v1.y
	;r7 = 16.16 v2.x
	;r8 = 16.16 v2.y
	;r9 = 16.16 radius
	;r10 = 16.16 tolerance
	;outputs
	;r0 = points object
	;trashes
	;all but r0, r4

	(ptr 'this 'stack)
	(union
		'(ulong 'c 'v1 'v2 'bv)
		'(int 'cx 'cy 'v1x 'v1y 'v2x 'v2y 'bvx 'bvy))
	(int 'radius 'eps)
	(uint 'start 'length)

	(push-scope)
	(f-entry 'points 'gen_clerp {this, stack, cx, cy, v1x, v1y, v2x, v2y, radius, eps})

	(vpif {radius >= 0.5})
		;output first point
		(vec-set 0)
		(vec-load 2 {cx, cy} {v1x, v1y})
		(vec-add 2)
		(vec-store 2 {bvx, bvy})
		(f-call 'points 'push_back {this, bv})

		(d-call 'array 'get_length {stack} {_, start})
		(loop-start)
			;calculate the mid-point
			(vec-load 2 {v1x, v1y} {v2x, v2y})
			(vec-add 2)
			(vec-norm 2)
			(vec-load 1 {radius})
			(vec-scale 2)
			(vec-store 2 {bvx, bvy})

			;flatness test
			(vec-load 1 {v1x} {v2x})
			(vec-add 1)
			(vec-load 1 {bvx})
			(vec-dup 1)
			(vec-dif 3)
			(vec-load 1 {v1y} {v2y})
			(vec-add 1)
			(vec-load 1 {bvy})
			(vec-dup 1)
			(vec-dif 3)
			(vec-abs 2)
			(vec-sum 2)

			(vec-load 1 {eps})
			(vec-def (vec-pop 2) d e)
			(vpif `(,d <= ,e))
				;output point
				(vec-load 2 {cx, cy} {bvx, bvy})
				(vec-add 2)
				(vec-store 2 {bvx, bvy})
				(f-call 'points 'push_back {this, bv})
			(else)
				;continue subdivision
				(f-call 'array 'push_back {stack, bv})
				(f-call 'array 'push_back {stack, v2})
				(f-call 'array 'push_back {stack, v1})
				(f-call 'array 'push_back {stack, bv})
			(endif)

			(d-call 'array 'get_length {stack} {_, length})
			(breakif {length == start})
			(f-call 'array 'get_back {stack} {_, v2})
			(d-call 'array 'pop_back {stack})
			(f-call 'array 'get_back {stack} {_, v1})
			(d-call 'array 'pop_back {stack})
		(loop-end)

		;output last point
		(vec-load 2 {cx, cy} {v2x, v2y})
		(vec-add 2)
		(vec-store 2 {bvx, bvy})
		(f-call 'points 'push_back {this, bv})
	(endif)

	(f-exit 'points 'gen_clerp {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/points/gen_arc)
	;inputs
	;r0 = points object
	;r1 = stack array
	;r2 = 16.16 c.x
	;r3 = 16.16 c.y
	;r5 = 16.16 a1
	;r6 = 16.16 a2
	;r7 = 16.16 radius
	;r8 = 16.16 tolerance
	;outputs
	;r0 = points object
	;trashes
	;all but r0, r4

	(ptr 'this 'stack)
	(int 'cx 'cy 'radius 'eps)

	(int 'ca1 'ca2)
	(int 'a1 'a2)
	(int 'v1x 'v2x)
	(int 'sa1 'sa2)
	(int 'v1y 'v2y)
	(int 'ah)

	(push-scope)
	(f-entry 'points 'gen_arc {this, stack, cx, cy, a1, a2, radius, eps})

	(vpif {radius >= 0.5})
		(f-call 'math 'fmod {a1, fp_2pi} {a1})
		(f-call 'math 'fmod {a2, fp_2pi} {a2})

		(vpif {a2 <= 3.0})
			(f-call 'math 'fsin {a1} {sa1})
			(f-call 'math 'fcos {a1} {ca1})
			(f-call 'math 'fsin {a2} {sa2})
			(f-call 'math 'fcos {a2} {ca2})
			(assign {sa1 *> radius, ca1 *> radius} {v1x, v1y})
			(assign {sa2 *> radius, ca2 *> radius} {v2x, v2y})
			(f-call 'points 'gen_clerp {this, stack, cx, cy, v1x, v1y, v2x, v2y, radius, eps})
		(else)
			(assign {a2 >>> 1} {ah})
			(assign {a1 + ah} {a2})
			(f-call 'points 'gen_arc {this, stack, cx, cy, a1, ah, radius, eps})
			(f-call 'points 'gen_arc {this, stack, cx, cy, a2, ah, radius, eps})
		(endif)
	(endif)

	(f-exit 'points 'gen_arc {this})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/points/gen_bezier)
	;inputs
	;r0 = points object
	;r1 = stack array
	;r2 = 16.16 p1.x
	;r3 = 16.16 p1.y
	;r5 = 16.16 p2.x
	;r6 = 16.16 p2.y
	;r7 = 16.16 p3.x
	;r8 = 16.16 p3.y
	;r9 = 16.16 p3.x
	;r10 = 16.16 p3.y
	;r11 = 16.16 tolerance
	;outputs
	;r0 = points object
	;trashes
	;all but r0, r4

	(ptr 'this 'stack)
	(union
		'(ulong 'p1 'p2 'p3 'p4)
		'(int 'p1x 'p1y 'p2x 'p2y 'p3x 'p3y 'p4x 'p4y))
	(union
		'(ulong 'p12 'p23 'p34 'p123 'p234 'p1234)
		'(int 'p12x 'p12y 'p23x 'p23y 'p34x 'p34y 'p123x 'p123y 'p234x 'p234y 'p1234x 'p1234y))
	(uint 'start 'length)
	(int 'eps)

	(push-scope)
	(f-entry 'points 'gen_bezier {this, stack, p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y, eps})

	;output first point
	(vec-set 0)
	(f-call 'points 'push_back {this, p1})

	(d-call 'array 'get_length {stack} {_, start})
	(loop-start)
		;calculate the mid-points
		(vec-load 6 {p1x, p1y, p2x, p2y, p3x, p3y})
		(vec-load 6 {p2x, p2y, p3x, p3y, p4x, p4y})
		(vec-add 6)
		(vec-asr 6 1)
		(vec-store 6 {p12x, p12y, p23x, p23y, p34x, p34y})
		(vec-load 4 {p12x, p12y, p23x, p23y})
		(vec-load 4 {p23x, p23y, p34x, p34y})
		(vec-add 4)
		(vec-asr 4 1)
		(vec-store 4 {p123x, p123y, p234x, p234y})
		(vec-load 2 {p123x, p123y} {p234x, p234y})
		(vec-add 2)
		(vec-asr 2 1)
		(vec-store 2 {p1234x, p1234y})

		;flatness test
		(vec-load 1 {p1x} {p3x})
		(vec-add 1)
		(vec-load 1 {p2x})
		(vec-dup 1)
		(vec-dif 3)
		(vec-load 1 {p1y} {p3y})
		(vec-add 1)
		(vec-load 1 {p2y})
		(vec-dup 1)
		(vec-dif 3)
		(vec-load 1 {p2x} {p4x})
		(vec-add 1)
		(vec-load 1 {p3x})
		(vec-dup 1)
		(vec-dif 3)
		(vec-load 1 {p2y} {p4y})
		(vec-add 1)
		(vec-load 1 {p3y})
		(vec-dup 1)
		(vec-dif 3)
		(vec-abs 4)
		(vec-sum 4)

		(vec-load 1 {eps})
		(vec-def (vec-pop 2) d e)
		(vpif `(,d <= ,e))
			;output point
			(f-call 'points 'push_back {this, p1234})
		(else)
			;continue subdivision
			(f-call 'array 'push_back {stack, p1234})
			(f-call 'array 'push_back {stack, p234})
			(f-call 'array 'push_back {stack, p34})
			(f-call 'array 'push_back {stack, p4})
			(f-call 'array 'push_back {stack, p1})
			(f-call 'array 'push_back {stack, p12})
			(f-call 'array 'push_back {stack, p123})
			(f-call 'array 'push_back {stack, p1234})
		(endif)

		(d-call 'array 'get_length {stack} {_, length})
		(breakif {length == start})
		(f-call 'array 'get_back {stack} {_, p4})
		(d-call 'array 'pop_back {stack})
		(f-call 'array 'get_back {stack} {_, p3})
		(d-call 'array 'pop_back {stack})
		(f-call 'array 'get_back {stack} {_, p2})
		(d-call 'array 'pop_back {stack})
		(f-call 'array 'get_back {stack} {_, p1})
		(d-call 'array 'pop_back {stack})
	(loop-end)

	;output last point
	(f-call 'points 'push_back {this, p4})

	(f-exit 'points 'gen_bezier {this})
	(pop-scope)
	(return)

(def-func-end)
