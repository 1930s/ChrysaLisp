(import 'sys/func.inc)
(import 'class/array/array.inc)
(import 'class/boxed_long/boxed_long.inc)

(gen-new 'array)
(gen-create 'array)
(gen-class 'array)

(def-func 'class/array/deinit)
	;inputs
	;r0 = array object
	;trashes
	;all but r0

	;free any dynamic array
	(vp-cpy-ir r0 array_array r2)
	(vp-lea-i r0 array_e0 r1)
	(vpif '(r2 != r1))
		(vp-cpy-rr r0 r4)
		(f-call 'sys_mem 'free '(r2))
		(vp-cpy-rr r4 r0)
	(endif)
	(s-jmp 'array 'deinit '(r0))

(def-func-end)

(def-func 'class/array/append)
	;inputs
	;r0 = array object
	;r1 = source array object
	;r2 = array element start
	;r3 = array element end
	;outputs
	;r0 = array object
	;trashes
	;r1-r7

	(def-struct 'local)
		(ptr 'this)
		(ptr 'source)
		(uint 'start)
		(uint 'end)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(f-entry 'array 'append '((rsp local_this) (rsp local_source) (rsp local_start i) (rsp local_end i)))

	;extend existing array
	(vp-cpy-ir-ui r0 array_length r1)
	(vp-sub-rr r2 r3)
	(vp-add-rr r3 r1)
	(f-call 'array 'set_capacity '(r0 r1) '(r0))

	;copy elements
	(assign '((rsp local_source) (rsp local_start ui) (rsp local_end ui)) '(r3 r1 r2))
	(vp-cpy-ir-ui r0 array_length r4)
	(vp-sub-rr r1 r2)
	(vp-cpy-rr r4 r5)
	(vp-shl-cr (log2 long_size) r4)
	(vp-add-rr r2 r5)
	(vp-cpy-ir r3 array_array r3)
	(vp-cpy-ri-i r5 r0 array_length)
	(vp-cpy-ir r0 array_array r5)
	(vp-shl-cr (log2 long_size) r1)
	(vp-shl-cr (log2 long_size) r2)
	(vp-add-rr r5 r4)
	(vp-add-rr r3 r1)
	(f-call 'sys_mem 'copy '(r1 r4 r2))

	(f-exit 'array 'append '((rsp local_this)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/array/clear)
	;inputs
	;r0 = array object
	;outputs
	;r0 = array object
	;trashes
	;r1

	;reset length
	(class/array/clear)
	(vp-ret)

(def-func-end)

(def-func 'class/array/for_each)
	;inputs
	;r0 = array object
	;r1 = start index
	;r2 = end index
	;r3 = predicate function pointer
	;r4 = predicate data pointer
	;outputs
	;r0 = array object
	;r1 = 0, else break iterator
	;trashes
	;all but r0
		;callback predicate
		;inputs
		;r0 = predicate data pointer
		;r1 = element iterator
		;outputs
		;r1 = 0 if break, else not
		;trashes
		;all but r0

	(def-struct 'local)
		(ptr 'this)
		(ptr 'predicate)
		(ptr 'predicate_data)
		(ptr 'next)
		(ptr 'end)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(f-entry 'array 'for_each '((rsp local_this) r1 r2 (rsp local_predicate) (rsp local_predicate_data)))

	;process elements
	(vp-cpy-ir r0 array_array r0)
	(vp-shl-cr (log2 long_size) r2)
	(vp-shl-cr (log2 long_size) r1)
	(vp-add-rr r0 r2)
	(vp-add-rr r0 r1)
	(vp-cpy-ri r2 rsp local_end)
	(loop-start)
		(vp-cpy-ir rsp local_end r0)
		(vp-cpy-ri r1 rsp local_next)
		(breakif '(r1 == r0))
		(vp-cpy-ir rsp local_predicate_data r0)
		(vp-call-i rsp local_predicate)
		(breakif '(r1 == 0))
		(vp-cpy-ir rsp local_next r1)
		(vp-add-cr long_size r1)
	(loop-end)

	;iterator of break point, else 0
	(assign '((rsp local_next) (rsp local_end) (rsp local_this)) '(r1 r2 r0))
	(vpif '(r1 == r2))
		(vp-xor-rr r1 r1)
	(endif)
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/array/find)
	;inputs
	;r0 = array object
	;r1 = element
	;outputs
	;r0 = array object
	;r1 = -1, else index
	;trashes
	;r1-r4

	(vp-cpy-ir-ui r0 array_length r3)
	(vp-cpy-ir r0 array_array r2)
	(vp-shl-cr (log2 long_size) r3)
	(vp-add-rr r2 r3)
	(loop-start)
		(vp-sub-cr long_size r3)
		(breakif '(r3 < r2))
		(vp-cpy-ir r3 0 r4)
	(loop-until '(r1 == r4))
	(vp-cpy-rr r3 r1)
	(vp-sub-rr r2 r1)
	(vp-asr-cr (log2 long_size) r1)
	(vp-ret)

(def-func-end)

(def-func 'class/array/get_back)
	;inputs
	;r0 = array object
	;outputs
	;r0 = array object
	;r1 = element
	;trashes
	;r2

	(vp-cpy-ir-ui r0 array_length r1)
	(vp-cpy-ir r0 array_array r2)
	(vp-sub-cr 1 r1)
	(vp-shl-cr (log2 long_size) r1)
	(vp-cpy-dr r2 r1 r1)
	(vp-ret)

(def-func-end)

(def-func 'class/array/get_length)
	;inputs
	;r0 = array object
	;outputs
	;r0 = array object
	;r1 = array length

	(class/array/get_length)
	(vp-ret)

(def-func-end)

(def-func 'class/array/pop_back)
	;inputs
	;r0 = array object
	;outputs
	;r0 = array object
	;trashes
	;r1

	(class/array/pop_back)
	(vp-ret)

(def-func-end)

(def-func 'class/array/push_back)
	;inputs
	;r0 = array object
	;r1 = element
	;outputs
	;r0 = array object
	;r1 = element
	;trashes
	;r2-r7

	;increase capacity ?
	(vp-cpy-ir-ui r0 array_length r2)
	(vp-cpy-ir-ui r0 array_capacity r3)
	(vp-add-cr 1 r2)
	(vp-cpy-ri-i r2 r0 array_length)
	(vpif '(r2 > r3))
		;double the capacity
		(vp-add-rr r3 r3)
		(vp-push r1)
		(f-call 'array 'set_capacity '(r0 r3) '(r0))
		(vp-cpy-ir-ui r0 array_length r2)
		(vp-pop r1)
	(endif)

	;save object
	(vp-cpy-ir r0 array_array r3)
	(vp-shl-cr (log2 long_size) r2)
	(vp-add-rr r2 r3)
	(vp-cpy-ri r1 r3 (neg long_size))
	(vp-ret)

(def-func-end)

(def-func 'class/array/ref_back)
	;inputs
	;r0 = array object
	;outputs
	;r0 = array object
	;r1 = boxed_long object pointer
	;trashes
	;all but r0

	(vp-cpy-ir-ui r0 array_length r1)
	(vp-cpy-ir r0 array_array r2)
	(vp-sub-cr 1 r1)
	(vp-shl-cr (log2 long_size) r1)
	(vp-push r0)
	(f-call 'boxed_long 'create '((r2 r1)) '(r1))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/array/ref_element)
	;inputs
	;r0 = array object
	;r1 = array element
	;outputs
	;r0 = array object
	;r1 = boxed_long object pointer
	;trashes
	;all but r0

	(vp-cpy-ir r0 array_array r2)
	(vp-shl-cr (log2 long_size) r1)
	(vp-push r0)
	(f-call 'boxed_long 'create '((r2 r1)) '(r1))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/array/set_capacity)
	;inputs
	;r0 = array object
	;r1 = array capacity
	;outputs
	;r0 = array object
	;trashes
	;r1-r7

	;do we already have room ?
	(vp-cpy-ir-ui r0 array_capacity r2)
	(vpif '(r1 > r2))
		;realloc the dynamic array
		(vp-push r0)
		(vp-shl-cr (log2 long_size) r1)
		(vp-lea-i r0 array_e0 r3)
		(vp-cpy-ir r0 array_array r0)
		(vpif '(r0 == r3))
			(f-call 'sys_mem 'alloc '(r1) '(r1 r2))
			(vp-pop r0)
			(vp-cpy-ir r0 array_e0 r4)
			(vp-cpy-ir r0 array_e1 r5)
			(vp-cpy-ir r0 array_e2 r6)
			(vp-cpy-ri r4 r1 (sub array_e0 array_e0))
			(vp-cpy-ri r5 r1 (sub array_e1 array_e0))
			(vp-cpy-ri r6 r1 (sub array_e2 array_e0))
		(else)
			(vp-shl-cr (log2 long_size) r2)
			(vp-swp-rr r1 r2)
			(f-call 'sys_mem 'realloc '(r0 r1 r2) '(r1 r2))
			(vp-pop r0)
		(endif)
		(vp-shr-cr (log2 long_size) r2)
		(vp-cpy-ri r1 r0 array_array)
		(vp-cpy-ri-i r2 r0 array_capacity)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/array/set_element)
	;inputs
	;r0 = array object
	;r1 = object
	;r2 = array element
	;outputs
	;r0 = array object
	;trashes
	;r2-r3

	(class/array/set_element)
	(vp-ret)

(def-func-end)

(def-func 'class/array/slice)
	;inputs
	;r0 = array object
	;r1 = array element start
	;r2 = array element end
	;outputs
	;r0 = array object
	;r1 = slice array object
	;trashes
	;r1-r11

	;save inputs
	(f-entry 'array 'slice '(r8 r9 r10))

	;create new array
	(f-call 'array 'create '() '(r11))
	(vp-cpy-rr r10 r1)
	(vp-sub-rr r9 r1)
	(vp-cpy-ri-i r1 r0 array_length)
	(f-call 'array 'set_capacity '(r0 r1))

	;copy elements
	(vp-cpy-ir r11 array_array r1)
	(vp-cpy-ir r8 array_array r0)
	(vp-shl-cr (log2 long_size) r9)
	(vp-shl-cr (log2 long_size) r10)
	(vp-sub-rr r9 r10)
	(f-call 'sys_mem 'copy '((& r0 r9) r1 r10))

	(f-exit 'array 'slice '(r8 r11))
	(vp-ret)

(def-func-end)

(def-func 'class/array/partition)
	;inputs
	;r0 = array object
	;r1 = lower partition iter
	;r2 = upper partition iter
	;r3 = sort callback
	;r4 = sort context
	;outputs
	;r0 = array object
	;r1 = partition iter
	;trashes
	;all but r0
		;sort callback
		;inputs
		;r0 = context
		;r1 = iter1
		;r2 = iter2
		;outputs
		;r0 = +, 0, -
		;trashes
		;all but r0

	(def-struct 'local)
		(ptr 'this)
		(ptr 'func)
		(ptr 'ctx)
		(ptr 'pivot)
		(ptr 'iter)
		(ptr 'lower)
		(ptr 'upper)
	(def-struct-end)

	(vp-alloc local_size)
	(f-entry 'array 'partition '((rsp local_this) (rsp local_lower) (rsp local_upper) (rsp local_func) (rsp local_ctx)))

	(vp-cpy-ri r1 rsp local_iter)
	(vp-cpy-ri r1 rsp local_pivot)
	(loop-start)
		(vp-add-cr long_size r1)
		(breakif '(r1 >= r2))
		(vp-cpy-ri r1 rsp local_iter)
		(vp-cpy-ir rsp local_ctx r0)
		(vp-cpy-ir rsp local_lower r2)
		(vp-call-i rsp local_func)
		(vp-cpy-ir rsp local_iter r1)
		(vp-cpy-ir rsp local_upper r2)
		(continueif '(r0 >= 0))
		(vp-cpy-ir rsp local_pivot r0)
		(vp-add-cr long_size r0)
		(vp-cpy-ri r0 rsp local_pivot)
		(continueif '(r0 == r1))
		(vp-cpy-ir r0 0 r3)
		(vp-cpy-ir r1 0 r4)
		(vp-cpy-ri r3 r1 0)
		(vp-cpy-ri r4 r0 0)
	(loop-end)
	(vp-cpy-ir rsp local_pivot r1)
	(vp-cpy-ir rsp local_lower r0)
	(vpif '(r1 != r0))
		(vp-cpy-ir r0 0 r2)
		(vp-cpy-ir r1 0 r3)
		(vp-cpy-ri r2 r1 0)
		(vp-cpy-ri r3 r0 0)
	(endif)

	(f-exit 'array 'partition '((rsp local_this) r1))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/array/sort)
	;inputs
	;r0 = array object
	;r1 = stack array
	;r2 = lower iter
	;r3 = upper iter
	;r4 = compare callback
	;r5 = sort context
	;outputs
	;r0 = array object
	;trashes
	;all but r0
		;sort callback
		;inputs
		;r0 = context
		;r1 = iter1
		;r2 = iter2
		;outputs
		;r0 = +, 0, -
		;trashes
		;all but r0

	(ptr 'this 'func 'ctx 'stack)
	(pptr 'pivot 'iter_begin)
	(union
		'(uint 'low 'high)
		'(ulong 'interval))
	(union
		'(pptr 'lower 'upper)
		'(uint 'start 'length))

	(push-scope)
	(f-entry 'array 'sort {this, stack, lower, upper, func, ctx})

	(f-call 'array 'get_begin {this} {_, iter_begin})
	(assign {(lower - iter_begin) >> 3, (upper - iter_begin) >> 3} {low, high})
	(d-call 'array 'get_length {stack} {_, start})
	(loop-start)
		(vpif {low < high})
			(f-call 'array 'partition {this, low * long_size + iter_begin, high * long_size + iter_begin, func, ctx}
				{_, pivot})
			(assign {high} {length})
			(assign {(pivot - iter_begin) >> 3} {high})
			(f-call 'array 'push_back {stack, interval})
			(assign {high + 1, length} {low, high})
			(f-call 'array 'push_back {stack, interval})
		(endif)
		(d-call 'array 'get_length {stack} {_, length})
		(breakif {length == start})
		(f-call 'array 'get_back {stack} {_, interval})
		(d-call 'array 'pop_back {stack})
	(loop-end)

	(f-exit 'array 'sort {this})
	(pop-scope)
	(return)

(def-func-end)
