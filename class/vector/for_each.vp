(import 'inc/func.inc)
(import 'class/class_vector.inc)

(def-func 'class/vector/for_each)
	;inputs
	;r0 = vector object
	;r1 = start index
	;r2 = end index
	;r3 = predicate function pointer
	;r5 = predicate data pointer
	;outputs
	;r0 = vector object
	;r1 = 0, else break iterator
	;trashes
	;all but r0, r4
		;callback predicate
		;inputs
		;r0 = predicate data pointer
		;r1 = element iterator
		;outputs
		;r1 = 0 if break, else not
		;trashes
		;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_predicate)
		(ptr 'local_predicate_data)
		(ptr 'local_next)
		(ptr 'local_end)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(set-src r0, r3, r5)
	(set-dst [r4 + local_inst], [r4 + local_predicate], [r4 + local_predicate_data])
	(map-src-to-dst)

	;process elements
	(vp-cpy-ir r0 vector_array r0)
	(vp-mul-cr ptr_size r1)
	(vp-mul-cr ptr_size r2)
	(vp-add-rr r0 r1)
	(vp-add-rr r0 r2)
	(vp-cpy-ri r2 r4 local_end)
	(loop-start)
		(vp-cpy-ri r1 r4 local_next)
		breakif r1, ==, [r4 + local_end]
		(vp-cpy-ir r4 local_predicate_data r0)
		(vp-call-i r4 local_predicate)
		breakif r1, ==, 0
		(vp-cpy-ir r4 local_next r1)
		(vp-add-cr ptr_size r1)
	(loop-end)

	;iterator of break point, else 0
	(vp-cpy-ir r4 local_next r1)
	(vp-cpy-ir r4 local_inst r0)
	if r1, ==, [r4 + local_end]
		(vp-xor-rr r1 r1)
	endif
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)
