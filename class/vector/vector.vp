(import 'inc/func.inc)
(import 'class/vector/vector.inc)

(class-macro-new 'vector)
(class-macro-create 'vector)

(def-func 'class/vector/init)
	;inputs
	;r0 = vector object
	;r1 = vtable pointer
	;outputs
	;r1 = 0 if error, else ok
	;trashes
	;all but r0, r4

	;init parent
	(s-call 'vector 'init '(r0 r1) '(r1))
	(vpif '(r1 != 0))
		;init myself
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 r0 vector_array)
		(vp-cpy-ri r2 r0 vector_length)
		(vp-cpy-ri r2 r0 vector_capacity)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/deinit)
	;inputs
	;r0 = vector object
	;trashes
	;all but r0, r4

	(f-call 'vector 'clear '(r0))
	(s-jmp 'vector 'deinit '(r0))

(def-func-end)

(def-func 'class/vector/append)
	;inputs
	;r0 = vector object
	;r1 = source vector object
	;r2 = vector element start
	;r3 = vector element end
	;outputs
	;r0 = vector object
	;trashes
	;r1-r3, r5-r8

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_source)
		(ulong 'local_start)
		(ulong 'local_end)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r1 r2 r3) '((r4 local_inst) (r4 local_source) (r4 local_start) (r4 local_end)))

	;extend existing vector
	(vp-sub-rr r2 r3)
	(vp-cpy-ir r0 vector_length r1)
	(vp-add-rr r3 r1)
	(f-call 'vector 'set_capacity '(r0 r1))

	;copy elements
	(vp-cpy-ir r4 local_start r5)
	(vp-cpy-ir r4 local_end r6)
	(loop-while '(r5 != r6))
		(d-call 'vector 'ref_element '((r4 local_source) r5) '(r1))
		(f-call 'vector 'push_back '((r4 local_inst) r1))
		(vp-inc r5)
	(loop-end)

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/clear)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;trashes
	;all but r0, r4

	;deref all elements
	(f-call 'vector 'for_each '(r0 0 (r0 vector_length) ($ callback) 0) '(_))

	;free dynamic array
	(vp-push r0)
	(f-call 'sys_mem 'free '((r0 vector_array)))
	(vp-pop r0)

	;init myself
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 r0 vector_array)
	(vp-cpy-ri r1 r0 vector_length)
	(vp-cpy-ri r1 r0 vector_capacity)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(f-call 'ref 'deref '((r1 0)))
	(vp-cpy-cr 1 r1)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/for_each)
	;inputs
	;r0 = vector object
	;r1 = start index
	;r2 = end index
	;r3 = predicate function pointer
	;r5 = predicate data pointer
	;outputs
	;r0 = vector object
	;r1 = 0, else break iterator
	;trashes
	;all but r0, r4
		;callback predicate
		;inputs
		;r0 = predicate data pointer
		;r1 = element iterator
		;outputs
		;r1 = 0 if break, else not
		;trashes
		;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_predicate)
		(ptr 'local_predicate_data)
		(ptr 'local_next)
		(ptr 'local_end)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r3 r5) '((r4 local_inst) (r4 local_predicate) (r4 local_predicate_data)))

	;process elements
	(vp-cpy-ir r0 vector_array r0)
	(vp-shl-cr (pow2 ptr_size) r1)
	(vp-shl-cr (pow2 ptr_size) r2)
	(vp-add-rr r0 r1)
	(vp-add-rr r0 r2)
	(vp-cpy-ri r2 r4 local_end)
	(loop-start)
		(vp-cpy-ri r1 r4 local_next)
		(vp-cpy-ir r4 local_end r0)
		(breakif '(r1 == r0))
		(vp-cpy-ir r4 local_predicate_data r0)
		(vp-call-i r4 local_predicate)
		(breakif '(r1 == 0))
		(vp-cpy-ir r4 local_next r1)
		(vp-add-cr ptr_size r1)
	(loop-end)

	;iterator of break point, else 0
	(assign '((r4 local_inst) (r4 local_next) (r4 local_end)) '(r0 r1 r2))
	(vpif '(r1 == r2))
		(vp-xor-rr r1 r1)
	(endif)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/find)
	;inputs
	;r0 = vector object
	;r1 = element object
	;outputs
	;r0 = vector object
	;r1 = -1, else index
	;trashes
	;r1-r3, r5

	(vp-cpy-rr r1 r3)
	(vp-cpy-ir r0 vector_array r2)
	(vp-cpy-ir r0 vector_length r1)
	(vp-shl-cr (pow2 ptr_size) r1)
	(loop-start)
		(vp-sub-cr ptr_size r1)
		(breakif '(r1 < 0))
		(vp-cpy-dr r2 r1 r5)
	(loop-until '(r3 == r5))
	(vp-asr-cr (pow2 ptr_size) r1)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/get_back)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;r1 = object pointer
	;trashes
	;r2

	(vp-cpy-ir r0 vector_length r1)
	(vp-cpy-ir r0 vector_array r2)
	(vp-shl-cr (pow2 ptr_size) r1)
	(vp-add-rr r2 r1)
	(vp-cpy-ir r1 (neg ptr_size) r1)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/get_length)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;r1 = vector length

	(class/vector/get_length)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/pop_back)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;trashes
	;all but r0, r4

	(vp-push r0)
	(vp-cpy-ir r0 vector_length r1)
	(vp-dec r1)
	(vp-cpy-ri r1 r0 vector_length)
	(vp-cpy-ir r0 vector_array r0)
	(vp-shl-cr (pow2 ptr_size) r1)
	(vp-add-rr r1 r0)
	(f-call 'ref 'deref '((r0 0)))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/push_back)
	;inputs
	;r0 = vector object
	;r1 = object pointer
	;outputs
	;r0 = vector object
	;r1 = object pointer
	;trashes
	;r2-r3, r5-r8

	(def-struct 'local)
		(ptr 'local_object)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r1) '((r4 local_object)))

	;increase capacity ?
	(vp-cpy-ir r0 vector_length r1)
	(vp-inc r1)
	(vp-cpy-ri r1 r0 vector_length)
	(vp-cpy-ir r0 vector_capacity r2)
	(vpif '(r1 > r2))
		;double the capacity
		(vp-add-rr r1 r1)
		(f-call 'vector 'set_capacity '(r0 r1))
	(endif)

	;save object
	(vp-cpy-ir r4 local_object r1)
	(vp-cpy-ir r0 vector_length r2)
	(vp-cpy-ir r0 vector_array r3)
	(vp-shl-cr (pow2 ptr_size) r2)
	(vp-add-rr r2 r3)
	(vp-cpy-ri r1 r3 (neg ptr_size))

	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/ref_back)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;r1 = object pointer
	;trashes
	;r2

	(vp-cpy-rr r0 r2)
	(vp-cpy-ir r0 vector_length r1)
	(vp-cpy-ir r0 vector_array r0)
	(vp-shl-cr (pow2 ptr_size) r1)
	(vp-add-rr r1 r0)
	(f-call 'ref 'ref '((r0 (sub 0 ptr_size))))
	(vp-cpy-rr r0 r1)
	(vp-cpy-rr r2 r0)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/ref_element)
	;inputs
	;r0 = vector object
	;r1 = vector element
	;outputs
	;r0 = vector object
	;r1 = object
	;trashes
	;r2

	(vp-cpy-rr r0 r2)
	(vp-cpy-ir r0 vector_array r0)
	(vp-shl-cr (pow2 ptr_size) r1)
	(vp-add-rr r1 r0)
	(f-call 'ref 'ref '((r0 0)))
	(vp-cpy-rr r0 r1)
	(vp-cpy-rr r2 r0)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/set_capacity)
	;inputs
	;r0 = vector object
	;r1 = vector capacity
	;outputs
	;r0 = vector object
	;trashes
	;r1-r3, r5-r8

	;do we allready have room ?
	(vp-cpy-ir r0 vector_capacity r2)
	(vpif '(r1 > r2))
		;grow the dynamic array
		(vp-push r0)
		(vp-shl-cr (pow2 ptr_size) r1)
		(vp-shl-cr (pow2 ptr_size) r2)
		(vp-xchg-rr r1 r2)
		(f-call 'sys_mem 'grow '((r0 vector_array) r1 r2) '(r1 r2))
		(vp-pop r0)
		(vp-shr-cr (pow2 ptr_size) r2)
		(vp-cpy-ri r1 r0 vector_array)
		(vp-cpy-ri r2 r0 vector_capacity)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/set_element)
	;inputs
	;r0 = vector object
	;r1 = object
	;r2 = vector element
	;outputs
	;r0 = vector object
	;trashes
	;all but r0, r4

	(vp-push r0)
	(vp-shl-cr (pow2 ptr_size) r2)
	(vp-cpy-ir r0 vector_array r3)
	(vp-add-rr r3 r2)
	(vp-cpy-ir r2 0 r0)
	(vp-cpy-ri r1 r2 0)
	(f-call 'ref 'deref '(r0))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/slice)
	;inputs
	;r0 = vector object
	;r1 = vector element start
	;r2 = vector element end
	;outputs
	;r0 = vector object
	;r1 = slice vector object
	;trashes
	;r1-r3, r5-r12

	;save inputs
	(assign '(r0 r1 r2) '(r9 r10 r11))

	;create new vector
	(f-call 'vector 'create '() '(r12))
	(vp-cpy-rr r11 r1)
	(vp-sub-rr r10 r1)
	(f-call 'vector 'set_capacity '(r0 r1))

	;copy elements
	(vp-cpy-rr r10 r5)
	(vp-cpy-rr r11 r6)
	(loop-while '(r5 != r6))
		(d-call 'vector 'ref_element '(r9 r5) '(r1))
		(f-call 'vector 'push_back '(r12 r1))
		(vp-inc r5)
	(loop-end)

	(vp-cpy-rr r9 r0)
	(vp-cpy-rr r12 r1)
	(vp-ret)

(def-func-end)
