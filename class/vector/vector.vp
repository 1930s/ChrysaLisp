(import 'sys/func.inc)
(import 'class/vector/vector.inc)

(gen-create 'vector)
(gen-class 'vector)

(def-func 'class/vector/deinit)
	;inputs
	;r0 = vector object
	;trashes
	;all but r0

	(d-call 'vector 'clear '(r0))
	(s-jmp 'vector 'deinit '(r0))

(def-func-end)

(def-func 'class/vector/append)
	;inputs
	;r0 = vector object
	;r1 = source vector object
	;r2 = vector element start
	;r3 = vector element end
	;outputs
	;r0 = vector object
	;trashes
	;r1-r7

	(def-struct 'local)
		(ptr 'this)
		(ptr 'source)
		(uint 'start)
		(uint 'end)
	(def-struct-end)

	;save inputs
	(vp-alloc-stack local_size)
	(f-entry 'vector 'append '((rsp local_this) (rsp local_source) (rsp local_start i) (rsp local_end i)))

	;extend existing vector
	(vp-cpy-ir-ui r0 array_length r1)
	(vp-sub-rr r2 r3)
	(vp-add-rr r3 r1)
	(f-call 'vector 'set_capacity '(r0 r1))

	;copy elements
	(vp-cpy-ir-ui r0 array_length r6)
	(vp-cpy-ir r0 array_array r3)
	(assign '((rsp local_source) (rsp local_start ui) (rsp local_end ui)) '(r0 r4 r5))
	(vp-shl-cr (log2 ptr_size) r6)
	(loop-while '(r4 != r5))
		(d-call 'vector 'ref_element '(r0 r4) '(r0 (r3 r6)))
		(vp-add-cr 1 r4)
		(vp-add-cr ptr_size r6)
	(loop-end)

	(vp-cpy-ir rsp local_this r0)
	(vp-shr-cr (log2 ptr_size) r6)
	(vp-cpy-ri-i r6 r0 array_length)

	(vp-free-stack local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/clear)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;trashes
	;all but r0

	;deref all elements
	(f-call 'vector 'for_each '(r0 0 (r0 array_length ui) ($ callback) 0))
	(s-call 'vector 'clear '(r0))
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(f-call 'ref 'deref '((r1 0)) '(r1))
	(vp-ret)

(def-func-end)

(def-func 'class/vector/pop_back)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;trashes
	;all but r0

	(vp-push r0)
	(vp-cpy-ir-ui r0 array_length r1)
	(vp-sub-cr 1 r1)
	(vp-cpy-ri-i r1 r0 array_length)
	(vp-cpy-ir r0 array_array r0)
	(vp-shl-cr (log2 ptr_size) r1)
	(f-call 'ref 'deref '((r0 r1)))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/ref_back)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;r1 = object pointer
	;trashes
	;r2

	(vp-cpy-ir-ui r0 array_length r1)
	(vp-cpy-rr r0 r2)
	(vp-sub-cr 1 r1)
	(vp-cpy-ir r0 array_array r0)
	(vp-shl-cr (log2 ptr_size) r1)
	(f-call 'ref 'ref '((r0 r1)) '(r1))
	(vp-cpy-rr r2 r0)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/ref_element)
	;inputs
	;r0 = vector object
	;r1 = vector element
	;outputs
	;r0 = vector object
	;r1 = object
	;trashes
	;r2

	(vp-cpy-rr r0 r2)
	(vp-cpy-ir r0 array_array r0)
	(vp-shl-cr (log2 ptr_size) r1)
	(f-call 'ref 'ref '((r0 r1)) '(r1))
	(vp-cpy-rr r2 r0)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/set_element)
	;inputs
	;r0 = vector object
	;r1 = object
	;r2 = vector element
	;outputs
	;r0 = vector object
	;trashes
	;all but r0

	(vp-push r0)
	(vp-shl-cr (log2 ptr_size) r2)
	(vp-cpy-ir r0 array_array r3)
	(vp-cpy-dr r2 r3 r0)
	(vp-cpy-rd r1 r2 r3)
	(f-call 'ref 'deref '(r0))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/slice)
	;inputs
	;r0 = vector object
	;r1 = vector element start
	;r2 = vector element end
	;outputs
	;r0 = vector object
	;r1 = slice vector object
	;trashes
	;r1-r11

	;save inputs
	(f-entry 'vector 'slice '(r8 r9 r10))

	;create new vector
	(f-call 'vector 'create '() '(r11))
	(vp-cpy-rr r10 r1)
	(vp-sub-rr r9 r1)
	(f-call 'vector 'set_capacity '(r0 r1))

	;copy elements
	(vp-cpy-ir r11 array_array r3)
	(vp-cpy-rr r8 r0)
	(vp-xor-rr r6 r6)
	(loop-while '(r9 != r10))
		(d-call 'vector 'ref_element '(r0 r9) '(r0 r1))
		(vp-cpy-rd r1 r3 r6)
		(vp-add-cr 1 r9)
		(vp-add-cr ptr_size r6)
	(loop-end)

	(vp-cpy-rr r11 r1)
	(vp-shr-cr (log2 ptr_size) r6)
	(vp-cpy-ri-i r6 r1 array_length)
	(vp-ret)

(def-func-end)
