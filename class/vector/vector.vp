(import 'inc/func.inc)
(import 'class/vector/vector.inc)

(gen-new 'vector)
(gen-create 'vector)

(def-func 'class/vector/deinit)
	;inputs
	;r0 = vector object
	;trashes
	;all but r0, r4

	(f-call 'vector 'clear '(r0))
	(s-jmp 'vector 'deinit '(r0))

(def-func-end)

(def-func 'class/vector/append)
	;inputs
	;r0 = vector object
	;r1 = source vector object
	;r2 = vector element start
	;r3 = vector element end
	;outputs
	;r0 = vector object
	;trashes
	;r1-r3, r5-r8

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_source)
		(uint 'local_start)
		(uint 'local_end)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(f-entry 'vector 'append '((r4 local_inst) (r4 local_source) (r4 local_start i) (r4 local_end i)))

	;extend existing vector
	(vp-cpy-ir-ui r0 vector_length r1)
	(vp-sub-rr r2 r3)
	(vp-add-rr r3 r1)
	(f-call 'vector 'set_capacity '(r0 r1))

	;copy elements
	(assign '((r4 local_source) (r4 local_start ui) (r4 local_end ui)) '(r8 r5 r6))
	(vp-cpy-ir-ui r0 vector_length r7)
	(vp-cpy-ir r0 vector_array r3)
	(vp-shl-cr (pow2 ptr_size) r7)
	(loop-while '(r5 != r6))
		(d-call 'vector 'ref_element '(r8 r5) '(_ r1))
		(vp-cpy-rd r1 r3 r7)
		(vp-add-cr 1 r5)
		(vp-add-cr ptr_size r7)
	(loop-end)

	(vp-cpy-ir r4 local_inst r0)
	(vp-shr-cr (pow2 ptr_size) r7)
	(vp-cpy-ri-i r7 r0 vector_length)

	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/clear)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;trashes
	;all but r0, r4

	;deref all elements
	(f-call 'vector 'for_each '(r0 0 (r0 vector_length ui) ($ callback) 0))

	;free dynamic array
	(vp-lea-i r0 vector_e1 r1)
	(vp-cpy-ir r0 vector_array r2)
	(vpif '(r2 != r1))
		(vp-cpy-rr r0 r5)
		(f-call 'sys_mem 'free '(r2))
		(vp-cpy-rr r5 r0)
	(endif)

	;init myself
	(vp-xor-rr r1 r1)
	(vp-cpy-ri-i r1 r0 vector_length)
	(vp-cpy-cr (bit-shr (sub vector_size vector_e1) (pow2 ptr_size)) r1)
	(vp-cpy-ri-i r1 r0 vector_capacity)
	(vp-lea-i r0 vector_e1 r1)
	(vp-cpy-ri r1 r0 vector_array)
	(vp-ret)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(f-call 'ref 'deref '((r1 0)))
	(vp-cpy-cr 1 r1)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/for_each)
	;inputs
	;r0 = vector object
	;r1 = start index
	;r2 = end index
	;r3 = predicate function pointer
	;r5 = predicate data pointer
	;outputs
	;r0 = vector object
	;r1 = 0, else break iterator
	;trashes
	;all but r0, r4
		;callback predicate
		;inputs
		;r0 = predicate data pointer
		;r1 = element iterator
		;outputs
		;r1 = 0 if break, else not
		;trashes
		;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_predicate)
		(ptr 'local_predicate_data)
		(ptr 'local_next)
		(ptr 'local_end)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r3 r5) '((r4 local_inst) (r4 local_predicate) (r4 local_predicate_data)))

	;process elements
	(vp-cpy-ir r0 vector_array r0)
	(vp-shl-cr (pow2 ptr_size) r2)
	(vp-shl-cr (pow2 ptr_size) r1)
	(vp-add-rr r0 r2)
	(vp-add-rr r0 r1)
	(vp-cpy-ri r2 r4 local_end)
	(loop-start)
		(vp-cpy-ir r4 local_end r0)
		(vp-cpy-ri r1 r4 local_next)
		(breakif '(r1 == r0))
		(vp-cpy-ir r4 local_predicate_data r0)
		(vp-call-i r4 local_predicate)
		(breakif '(r1 == 0))
		(vp-cpy-ir r4 local_next r1)
		(vp-add-cr ptr_size r1)
	(loop-end)

	;iterator of break point, else 0
	(assign '((r4 local_next) (r4 local_end) (r4 local_inst)) '(r1 r2 r0))
	(vpif '(r1 == r2))
		(vp-xor-rr r1 r1)
	(endif)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/find)
	;inputs
	;r0 = vector object
	;r1 = element object
	;outputs
	;r0 = vector object
	;r1 = -1, else index
	;trashes
	;r1-r3, r5

	(vp-cpy-rr r1 r3)
	(vp-cpy-ir-ui r0 vector_length r1)
	(vp-cpy-ir r0 vector_array r2)
	(vp-shl-cr (pow2 ptr_size) r1)
	(loop-start)
		(vp-sub-cr ptr_size r1)
		(breakif '(r1 < 0))
		(vp-cpy-dr r2 r1 r5)
	(loop-until '(r3 == r5))
	(vp-asr-cr (pow2 ptr_size) r1)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/get_back)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;r1 = object pointer
	;trashes
	;r2

	(vp-cpy-ir-ui r0 vector_length r1)
	(vp-cpy-ir r0 vector_array r2)
	(vp-sub-cr 1 r1)
	(vp-shl-cr (pow2 ptr_size) r1)
	(vp-cpy-dr r2 r1 r1)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/get_length)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;r1 = vector length

	(class/vector/get_length)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/pop_back)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;trashes
	;all but r0, r4

	(vp-push r0)
	(vp-cpy-ir-ui r0 vector_length r1)
	(vp-sub-cr 1 r1)
	(vp-cpy-ri-i r1 r0 vector_length)
	(vp-cpy-ir r0 vector_array r0)
	(vp-shl-cr (pow2 ptr_size) r1)
	(f-call 'ref 'deref '((r0 r1)))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/push_back)
	;inputs
	;r0 = vector object
	;r1 = object pointer
	;outputs
	;r0 = vector object
	;r1 = object pointer
	;trashes
	;r2-r3, r5-r8

	;increase capacity ?
	(vp-cpy-ir-ui r0 vector_length r2)
	(vp-cpy-ir-ui r0 vector_capacity r3)
	(vp-add-cr 1 r2)
	(vp-cpy-ri-i r2 r0 vector_length)
	(vpif '(r2 > r3))
		;double the capacity
		(vp-add-rr r3 r3)
		(vp-push r1)
		(f-call 'vector 'set_capacity '(r0 r3))
		(vp-cpy-ir-ui r0 vector_length r2)
		(vp-pop r1)
	(endif)

	;save object
	(vp-cpy-ir r0 vector_array r3)
	(vp-shl-cr (pow2 ptr_size) r2)
	(vp-add-rr r2 r3)
	(vp-cpy-ri r1 r3 (neg ptr_size))
	(vp-ret)

(def-func-end)

(def-func 'class/vector/ref_back)
	;inputs
	;r0 = vector object
	;outputs
	;r0 = vector object
	;r1 = object pointer
	;trashes
	;r2

	(vp-cpy-ir-ui r0 vector_length r1)
	(vp-cpy-rr r0 r2)
	(vp-sub-cr 1 r1)
	(vp-cpy-ir r0 vector_array r0)
	(vp-shl-cr (pow2 ptr_size) r1)
	(f-call 'ref 'ref '((r0 r1)))
	(vp-cpy-rr r0 r1)
	(vp-cpy-rr r2 r0)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/ref_element)
	;inputs
	;r0 = vector object
	;r1 = vector element
	;outputs
	;r0 = vector object
	;r1 = object
	;trashes
	;r2

	(vp-cpy-rr r0 r2)
	(vp-cpy-ir r0 vector_array r0)
	(vp-shl-cr (pow2 ptr_size) r1)
	(f-call 'ref 'ref '((r0 r1)))
	(vp-cpy-rr r0 r1)
	(vp-cpy-rr r2 r0)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/set_capacity)
	;inputs
	;r0 = vector object
	;r1 = vector capacity
	;outputs
	;r0 = vector object
	;trashes
	;r1-r3, r5-r8

	;do we allready have room ?
	(vp-cpy-ir-ui r0 vector_capacity r2)
	(vpif '(r1 > r2))
		;realloc the dynamic array
		(vp-push r0)
		(vp-shl-cr (pow2 ptr_size) r1)
		(vp-lea-i r0 vector_e1 r3)
		(vp-cpy-ir r0 vector_array r0)
		(vpif '(r0 == r3))
			(f-call 'sys_mem 'alloc '(r1) '(r1 r2))
			(vp-pop r0)
			(vp-cpy-ir r0 vector_e1 r5)
			(vp-cpy-ir r0 vector_e2 r6)
			(vp-cpy-ir r0 vector_e3 r7)
			(vp-cpy-ri r5 r1 (sub vector_e1 vector_e1))
			(vp-cpy-ri r6 r1 (sub vector_e2 vector_e1))
			(vp-cpy-ri r7 r1 (sub vector_e3 vector_e1))
		(else)
			(vp-shl-cr (pow2 ptr_size) r2)
			(vp-xchg-rr r1 r2)
			(f-call 'sys_mem 'realloc '(r0 r1 r2) '(r1 r2))
			(vp-pop r0)
		(endif)
		(vp-shr-cr (pow2 ptr_size) r2)
		(vp-cpy-ri r1 r0 vector_array)
		(vp-cpy-ri-i r2 r0 vector_capacity)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/set_element)
	;inputs
	;r0 = vector object
	;r1 = object
	;r2 = vector element
	;outputs
	;r0 = vector object
	;trashes
	;all but r0, r4

	(vp-push r0)
	(vp-shl-cr (pow2 ptr_size) r2)
	(vp-cpy-ir r0 vector_array r3)
	(vp-cpy-dr r2 r3 r0)
	(vp-cpy-rd r1 r2 r3)
	(f-call 'ref 'deref '(r0))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/vector/slice)
	;inputs
	;r0 = vector object
	;r1 = vector element start
	;r2 = vector element end
	;outputs
	;r0 = vector object
	;r1 = slice vector object
	;trashes
	;r1-r3, r5-r12

	;save inputs
	(f-entry 'vector 'slice '(r9 r10 r11))

	;create new vector
	(f-call 'vector 'create '() '(r12))
	(vp-cpy-rr r11 r1)
	(vp-sub-rr r10 r1)
	(f-call 'vector 'set_capacity '(r0 r1))

	;copy elements
	(vp-cpy-ir r12 vector_array r3)
	(vp-cpy-rr r9 r0)
	(vp-xor-rr r7 r7)
	(loop-while '(r10 != r11))
		(d-call 'vector 'ref_element '(r0 r10) '(_ r1))
		(vp-cpy-rd r1 r3 r7)
		(vp-add-cr 1 r10)
		(vp-add-cr ptr_size r7)
	(loop-end)

	(vp-cpy-rr r12 r1)
	(vp-shr-cr (pow2 ptr_size) r7)
	(vp-cpy-ri-i r7 r1 vector_length)
	(vp-ret)

(def-func-end)
