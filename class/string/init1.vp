(import 'inc/func.inc)
(import 'class/class_string.inc)

(def-func 'class/string/init1)
	;inputs
	;r0 = string object
	;r1 = vtable pointer
	;r2 = string object
	;r3 = string object
	;outputs
	;r1 = 0 if error, else ok

	(def-struct 'local)
		(ptr 'local_inst)
		(long 'local_string1)
		(long 'local_string2)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(set-src r2, r3)
	(set-dst [r4 + local_string1], [r4 + local_string2])
	(map-src-to-dst)

	;init parent
	s_call string, init, {r0, r1}, {r1}
	if r1, !=, 0
		;init myself
		(vp-cpy-ri r0 r4 local_inst)
		(vp-xor-rr r1 r1)
		(vp-cpy-ri r1 r0 string_hashcode)

		(vp-cpy-ir r4 local_string1 r6)
		(vp-cpy-ir r4 local_string2 r7)
		(vp-cpy-ir r6 string_length r1)
		(vp-add-ir r7 string_length r1)
		(vp-cpy-ri r1 r0 string_length)
		f_call sys_mem, copy, {&[r6 + string_data], &[r0 + string_data], [r6 + string_length]}, {_, r1}
		(vp-cpy-ir r7 string_length r2)
		(vp-inc r2)
		f_call sys_mem, copy, {&[r7 + string_data], r1, r2}, {_, _}

		(vp-cpy-ir r4 local_inst r0)
	endif

	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)
