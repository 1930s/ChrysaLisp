(import 'inc/func.inc)
(import 'inc/string.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'class/stream/stream.inc)

(gen-new 'stream)
(gen-create 'stream 4)

(def-func 'class/stream/init)
	;inputs
	;r0 = stream object
	;r1 = vtable pointer
	;r2 = buffer object, 0 if none
	;r3 = buffer pointer, 0 if none
	;r5 = buffer start
	;r6 = buffer length
	;outputs
	;r1 = 0 if error, else ok
	;trashes
	;all but r0, r4

	;save inputs
	(vp-add-rr r5 r6)
	(assign '(r2 r3 r5 r6) '((r0 stream_object) (r0 stream_buffer) (r0 stream_bufp) (r0 stream_bufe)))

	;init parent
	(s-jmp 'stream 'init '(r0 r1))

(def-func-end)

(def-func 'class/stream/deinit)
	;inputs
	;r0 = stream object
	;trashes
	;all but r0, r4

	;deref any buffer object
	(vp-push r0)
	(f-call 'ref 'deref_if '((r0 stream_object)))

	;free any buffer
	(vp-cpy-ir r4 0 r0)
	(f-call 'sys_mem 'free '((r0 stream_buffer)))
	(vp-pop r0)

	;parent deinit
	(s-jmp 'stream 'deinit '(r0))

(def-func-end)

(def-func 'class/stream/read)
	;inputs
	;r0 = stream object
	;r1 = buffer
	;r2 = buffer length
	;outputs
	;r0 = stream object
	;r1 = -1 for EOF, else bytes read
	;trashes
	;all but r0, r4

	(ptr 'inst)
	(pubyte 'buffer 'buffer_end 'start)
	(long 'char)

	;save inputs
	(push-scope)
	(assign '(r0 r1 r2) {inst, buffer, buffer_end})

	(vpif {buffer_end == 0})
		(assign {inst, 0} '(r0 r1))
		(return)
	(endif)

	(assign {buffer, buffer + buffer_end} {start, buffer_end})
	(loop-start)
		(f-call 'stream 'read_char {inst} {char})
		(breakif {char < 0})
		(assign {char} {*buffer})
		(assign {buffer + 1} {buffer})
	(loop-until {buffer == buffer_end})

	(vpif {buffer != start})
		(assign {inst, buffer - start} '(r0 r1))
	(else)
		(assign {inst, char} '(r0 r1))
	(endif)
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/stream/read_char)
	;inputs
	;r0 = stream object
	;outputs
	;r0 = stream object
	;r1 = -1 for EOF, else char read
	;trashes
	;all but r0, r4

	(vp-cpy-ir r0 stream_bufp r2)
	(vp-cpy-ir r0 stream_bufe r1)
	(vpif '(r1 == r2))
		(loop-start)
			(v-call 'stream 'read_next '(r0) '(r1))
			(gotoif '(r1 == -1) 'eof)
			(vp-cpy-ir r0 stream_bufp r2)
			(vp-cpy-ir r0 stream_bufe r1)
		(loop-until '(r1 != r2))
	(endif)
	(vp-cpy-ir-ub r2 0 r1)
	(vp-add-cr 1 r2)
	(vp-cpy-ri r2 r0 stream_bufp)
(vp-label 'eof)
	(vp-ret)

(def-func-end)

(def-func 'class/stream/read_line)
	;inputs
	;r0 = stream object
	;r1 = buffer
	;r2 = buffer length
	;outputs
	;r0 = stream object
	;r1 = -1 for EOF, else bytes read
	;trashes
	;all but r0, r4

	(ptr 'inst)
	(pubyte 'buffer 'buffer_end 'start)
	(long 'char)

	;save inputs
	(push-scope)
	(assign '(r0 r1 r2) {inst, buffer, buffer_end})

	(vpif {buffer_end == 0})
		(assign {inst, 0} '(r0 r1))
		(return)
	(endif)

	(assign {buffer, buffer + buffer_end} {start, buffer_end})
	(loop-start)
		(f-call 'stream 'read_char {inst} {char})
		(continueif {char == 13})
		(breakif {char == 10 || char < 0})
		(assign {char} {*buffer})
		(assign {buffer + 1} {buffer})
	(loop-until {buffer == buffer_end})

	(vpif {buffer == start && char < 0})
		(assign {inst, char} '(r0 r1))
	(else)
		(assign {inst, buffer - start} '(r0 r1))
	(endif)
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/stream/read_next)
	;inputs
	;r0 = stream object
	;outputs
	;r0 = stream object
	;r1 = -1 for EOF, else more data
	;trashes
	;all but r0, r4

	(vp-cpy-cr -1 r1)
	(vp-ret)

(def-func-end)

(def-func 'class/stream/read_ready)
	;inputs
	;r0 = stream object
	;outputs
	;r0 = stream object
	;r1 = 0 if data not available
	;trashes
	;all but r0, r4

	(f-call 'stream 'available '(r0) '(r1))
	(vp-ret)

(def-func-end)

(def-func 'class/stream/skip)
	;inputs
	;r0 = stream object
	;r1 = char to skip
	;trashes
	;all but r0, r4

	(vp-cpy-ir r0 stream_bufp r2)
	(vp-cpy-ir r0 stream_bufe r3)
	(loop-start)
		(loop-while '(r2 == r3))
			(vp-push r1)
			(vp-cpy-ri r2 r0 stream_bufp)
			(v-call 'stream 'read_next '(r0) '(r5))
			(vp-pop r1)
			(gotoif '(r5 == -1) 'exit)
			(vp-cpy-ir r0 stream_bufp r2)
			(vp-cpy-ir r0 stream_bufe r3)
		(loop-end)
		(vp-cpy-ir-ub r2 0 r5)
		(breakif '(r5 != r1))
		(vp-add-cr 1 r2)
	(loop-end)
	(vp-cpy-ri r2 r0 stream_bufp)
(vp-label 'exit)
	(vp-ret)

(def-func-end)

(def-func 'class/stream/skip_not)
	;inputs
	;r0 = stream object
	;r1 = char to not skip
	;trashes
	;all but r0, r4

	(vp-cpy-ir r0 stream_bufp r2)
	(vp-cpy-ir r0 stream_bufe r3)
	(loop-start)
		(loop-while '(r2 == r3))
			(vp-push r1)
			(vp-cpy-ri r2 r0 stream_bufp)
			(v-call 'stream 'read_next '(r0) '(r5))
			(vp-pop r1)
			(gotoif '(r5 == -1) 'exit)
			(vp-cpy-ir r0 stream_bufp r2)
			(vp-cpy-ir r0 stream_bufe r3)
		(loop-end)
		(vp-cpy-ir-ub r2 0 r5)
		(breakif '(r5 == r1))
		(vp-add-cr 1 r2)
	(loop-end)
	(vp-cpy-ri r2 r0 stream_bufp)
(vp-label 'exit)
	(vp-ret)

(def-func-end)

(def-func 'class/stream/split)
	;inputs
	;r0 = stream object
	;r1 = split char
	;outputs
	;r0 = stream object
	;r1 = vector of split streams
	;trashes
	;all but r0, r4

	(ptr 'inst 'splits 'string)
	(pubyte 'start)
	(ulong 'length)
	(ubyte 'char)

	;save inputs
	(push-scope)
	(assign '(r0 r1) {inst, char})

	;create output vector
	(f-call 'vector 'create {} {splits})

	;fill vector with splits
	(loop-start)
		(f-call 'stream 'skip {inst, char})
		(assign {inst->stream_bufp} {start})
		(f-call 'stream 'skip_not {inst, char})
		(assign {inst->stream_bufp - start} {length})
		(breakif {length == 0})
		(f-call 'string 'create_from_buffer {start, length} {string})
		(f-call 'vector 'push_back {splits, string})
	(loop-end)

	(assign {inst, splits} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/stream/write)
	;inputs
	;r0 = stream object
	;r1 = buffer
	;r2 = buffer length
	;outputs
	;r0 = stream object
	;trashes
	;all but r0, r4

	(ptr 'inst)
	(pubyte 'buffer)
	(uint 'length 'gap)

	;check if 1 char
	(vpif '(r2 == 1))
		(f-jmp 'stream 'write_char '(r0 (r1 0 ub)))
	(endif)

	;save inputs
	(push-scope)
	(assign '(r0 r1 r2) {inst, buffer, length})

	(loop-while {length})
		(assign {inst->stream_bufe - inst->stream_bufp} {gap})
		(vpif {gap})
			(vpif {gap > length})
				(assign {length} {gap})
			(endif)
			(f-call 'sys_mem 'copy {buffer, inst->stream_bufp, gap} {buffer, inst->stream_bufp})
			(assign {length - gap} {length})
		(else)
			(v-call 'stream 'write_next {inst})
		(endif)
	(loop-end)

	(assign {inst} '(r0))
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/stream/write_char)
	;inputs
	;r0 = stream object
	;r1 = char
	;outputs
	;r0 = stream object
	;trashes
	;all but r0, r4

	(vp-cpy-ir r0 stream_bufp r2)
	(vp-cpy-ir r0 stream_bufe r3)
	(vpif '(r2 == r3))
		(vp-push r1)
		(v-call 'stream 'write_next '(r0))
		(vp-pop r1)
		(vp-cpy-ir r0 stream_bufp r2)
		(vp-cpy-ir r0 stream_bufe r3)
		(gotoif '(r2 == r3) 'eof)
	(endif)
	(vp-cpy-ri-b r1 r2 0)
	(vp-add-cr 1 r2)
	(vp-cpy-ri r2 r0 stream_bufp)
(vp-label 'eof)
	(vp-ret)

(def-func-end)

(def-func 'class/stream/write_cstr)
	;inputs
	;r0 = stream object
	;r1 = buffer
	;outputs
	;r0 = stream object
	;trashes
	;all but r0, r4

	(vp-cpy-rr r0 r3)
	(f-call 'sys_string 'length '(r1) '(r1))
	(f-jmp 'stream 'write '(r3 r0 r1))

(def-func-end)

(def-func 'class/stream/write_flush)
	;inputs
	;r0 = stream object
	;outputs
	;r0 = stream object
	;trashes
	;all but r0, r4

	(class/stream/write_flush)
	(vp-ret)

(def-func-end)

(def-func 'class/stream/write_next)
	;inputs
	;r0 = stream object
	;outputs
	;r0 = stream object
	;trashes
	;all but r0, r4

	(v-jmp 'stream 'write_flush '(r0))

(def-func-end)
