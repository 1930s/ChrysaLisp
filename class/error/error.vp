(import 'inc/func.inc)
(import 'class/string/string.inc)
(import 'class/error/error.inc)

(gen-new 'error)
(gen-create 'error 4)

(def-func 'class/error/init)
	;inputs
	;r0 = error object
	;r1 = vtable pointer
	;r2 = description cstr pointer
	;r3 = filename cstr pointer
	;r5 = error payload object
	;r6 = line number
	;outputs
	;r1 = 0 if error, else ok
	;trashes
	;r1-r3, r5-r7

	(def-struct 'local)
		(ptr 'local_inst)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r2 r3 r5 r6) '((r4 local_inst) (r0 error_description) (r0 error_file) (r0 error_object) (r0 error_line)))

	;init parent
	(s-call 'error 'init '(r0 r1) '(_ r1))
	(vpif '(r1 != 0))
		;init self
		(f-call 'string 'create_from_cstr '((r0 error_description)) '(r0))
		(vp-cpy-ir r4 local_inst r1)
		(vp-cpy-ri r0 r1 error_description)
		(f-call 'string 'create_from_cstr '((r1 error_file)) '(r0))
		(vp-cpy-ir r4 local_inst r1)
		(vp-cpy-ri r0 r1 error_file)
		(f-call 'ref 'ref '((r1 error_object)))
		(vp-cpy-ir r4 local_inst r0)
	(endif)

	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/error/deinit)
	;inputs
	;r0 = error object
	;trashes
	;all but r0, r4

	(vp-push r0)
	(f-call 'ref 'deref '((r0 error_description)))
	(vp-cpy-ir r4 0 r0)
	(f-call 'ref 'deref '((r0 error_file)))
	(vp-cpy-ir r4 0 r0)
	(f-call 'ref 'deref '((r0 error_object)))
	(vp-pop r0)
	(s-jmp 'error 'deinit '(r0))

(def-func-end)
