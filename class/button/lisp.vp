(import 'sys/func.inc)
(import 'class/button/class.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

(def-method 'button 'lisp_create)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
(errorcases
	(uint 'length))

	(push-scope)
	(f-entry 'button 'lisp_create {this, args})

(errorcases
	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length} 'error1))

	(f-call 'button 'create nil {value})

(vp-label 'exit)
	(f-exit 'button 'lisp_create {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(create-button)", error_msg_wrong_types, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)

(def-method 'button 'lisp_connect_click)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(f-entry 'button 'lisp_connect_click {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 2} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'button 'connect_click {arg0, arg1})
	(f-call 'button 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'button 'lisp_connect_click {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(button-connect-click button id)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'button 'integer))

	(pop-scope-syms)

(def-func-end)
