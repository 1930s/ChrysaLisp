(import 'inc/func.inc)
(import 'inc/gui.inc)
(import 'class/class_window.inc)

(def-func 'class/window/mouse_move)
	;inputs
	;r0 = window object
	;r1 = mouse event message
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_event)
		(long 'local_old_x)
		(long 'local_old_y)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(set-src '(r0, r1))
	(set-dst '([r4 + local_inst], [r4 + local_event]))
	(map-src-to-dst)

	;dirty old area
	(f-call 'window 'dirty '(r0))

	;get smallest size
	(v-call 'window 'pref_size '(r0) '(r10, r11))
	(vp-cpy-rr r10 r12)
	(vp-cpy-rr r11 r13)

	;save old bounds
	(f-call 'window 'get_bounds '(r0) '([r4 + local_old_x], [r4 + local_old_y], r10, r11))

	;get abolute cords of corners
	(vp-add-rr r8 r10)
	(vp-add-rr r9 r11)

	;drag edges
	(vp-cpy-ir r4 local_event r1)
	(vp-cpy-ir r0 window_drag_mode r15)
	(vp-and-cr window_drag_left r15)
	(vpif '(r15 != 0))
		;drag left edge
		(vp-cpy-ir r1 ev_msg_x r8)
		(vp-sub-ir r0 window_offset_x r8)
		(vp-cpy-rr r10 r15)
		(vp-sub-rr r8 r15)
		(vpif '(r15 < r12))
			(vp-cpy-rr r10 r8)
			(vp-sub-rr r12 r8)
		(endif)
	(endif)
	(vp-cpy-ir r0 window_drag_mode r15)
	(vp-and-cr window_drag_right r15)
	(vpif '(r15 != 0))
		;drag right edge
		(vp-cpy-ir r1 ev_msg_x r10)
		(vp-sub-ir r0 window_offset_x r10)
		(vp-cpy-rr r10 r15)
		(vp-sub-rr r8 r15)
		(vpif '(r15 < r12))
			(vp-cpy-rr r8 r10)
			(vp-add-rr r12 r10)
		(endif)
	(endif)
	(vp-cpy-ir r0 window_drag_mode r15)
	(vp-and-cr window_drag_top r15)
	(vpif '(r15 != 0))
		;drag top edge
		(vp-cpy-ir r1 ev_msg_y r9)
		(vp-sub-ir r0 window_offset_y r9)
		(vp-cpy-rr r11 r15)
		(vp-sub-rr r9 r15)
		(vpif '(r15 < r13))
			(vp-cpy-rr r11 r9)
			(vp-sub-rr r13 r9)
		(endif)
	(endif)
	(vp-cpy-ir r0 window_drag_mode r15)
	(vp-and-cr window_drag_bottom r15)
	(vpif '(r15 != 0))
		;drag bottom edge
		(vp-cpy-ir r1 ev_msg_y r11)
		(vp-sub-ir r0 window_offset_y r11)
		(vp-cpy-rr r11 r15)
		(vp-sub-rr r9 r15)
		(vpif '(r15 < r13))
			(vp-cpy-rr r9 r11)
			(vp-add-rr r13 r11)
		(endif)
	(endif)
	(vp-sub-rr r8 r10)
	(vp-sub-rr r9 r11)

	;change window size
	(f-call 'window 'change '(r0, r8, r9, r10, r11))

	;translate old dirty area and dirty all
	(vp-cpy-ir r4 local_old_x r8)
	(vp-cpy-ir r4 local_old_y r9)
	(vp-sub-ir r0 view_x r8)
	(vp-sub-ir r0 view_y r9)
	(vp-lea-ir r0 view_dirty_region r1)
	(f-call 'gui_region 'translate '(r1, r8, r9))

	(vp-cpy-ir r4 local_inst r0)
	(vp-add-cr local_size r4)
	(f-jmp 'window 'dirty_all '(r0))

(def-func-end)
