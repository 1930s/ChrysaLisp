(import 'sys/func.inc)
(import 'gui/gui.inc)
(import 'class/window/window.inc)
(import 'class/title/title.inc)
(import 'class/button/button.inc)
(import 'class/flow/flow.inc)
(import 'class/string/string.inc)

(gen-new 'window)
(gen-create 'window)
(gen-class 'window)

(def-func 'class/window/init)
	;inputs
	;r0 = window object
	;r1 = vtable pointer
	;r2 = options flags
	;outputs
	;r0 = window object
	;r1 = 0 if error, else ok
	;trashes
	;all but r0-r1, r4

	(ptr 'this 'vtable 'title_flow 'string)
	(ulong 'ok 'flags 'min_width)

	(push-scope)
	(f-entry 'window 'init {this, vtable, flags})

	;init parent
	(s-call 'window 'init {this, vtable} {_, ok})
	(vpif {ok})
		;init myself
		(f-call 'sys_mem 'clear {&this->window_start, window_size - window_start})
		(f-call 'window 'set_color {this, 0xffc0c0c0})

		;add flow panel
		(f-call 'flow 'create {} {this->window_flow})
		(f-call 'flow 'set_flow_flags {this->window_flow, flow_flag_down | flow_flag_fillw | flow_flag_lasth})
		(f-call 'window 'add_back {this, this->window_flow})

		;add title flow panel
		(f-call 'flow 'create {} {title_flow})
		(f-call 'flow 'set_flow_flags {title_flow, flow_flag_left | flow_flag_fillh | flow_flag_lastw})
		(v-call 'flow 'add_child {this->window_flow, title_flow})

		;add close button ?
		(f-call 'button 'create {} {this->window_close})
		(f-call 'button 'set_color {this->window_close, 0xffd0d0d0})
		(v-call 'flow 'add_child {title_flow, this->window_close})
		(f-call 'string 'create_from_cstr {"X"} {string})
		(f-call 'button 'set_text {this->window_close, string})
		(v-call 'button 'pref_size {this->window_close} {_, min_width, _})
		(vpifnot {flags & window_flag_close})
			(f-call 'button 'deref {this->window_close})
			(assign {0} {this->window_close})
		(endif)

		;add max button
		(vpif {flags & window_flag_max})
			(f-call 'button 'create {} {this->window_max})
			(f-call 'button 'set_color {this->window_max, 0xffd0d0d0})
			(v-call 'flow 'add_child {title_flow, this->window_max})
			(f-call 'string 'create_from_cstr {"+"} {string})
			(f-call 'button 'set_text {this->window_max, string})
			(f-call 'button 'set_min_size {this->window_max, min_width, 0})
		(endif)

		;add min button
		(vpif {flags & window_flag_min})
			(f-call 'button 'create {} {this->window_min})
			(f-call 'button 'set_color {this->window_min, 0xffd0d0d0})
			(v-call 'flow 'add_child {title_flow, this->window_min})
			(f-call 'string 'create_from_cstr {"-"} {string})
			(f-call 'button 'set_text {this->window_min, string})
			(f-call 'button 'set_min_size {this->window_min, min_width, 0})
		(endif)

		;add title
		(f-call 'title 'create {} {this->window_title})
		(f-call 'title 'set_color {this->window_title, 0xffc0c0c0})
		(v-call 'flow 'add_child {title_flow, this->window_title})

		;add status panel
		(f-call 'flow 'create {} {this->window_panel})
		(f-call 'flow 'set_flow_flags {this->window_panel, flow_flag_up | flow_flag_fillw | flow_flag_lasth})
		(v-call 'flow 'add_child {this->window_flow, this->window_panel})

		;add status label ?
		(vpif {flags & window_flag_status})
			(f-call 'label 'create {} {this->window_status})
			(f-call 'label 'set_color {this->window_status, 0xff808080})
			(v-call 'flow 'add_child {this->window_panel, this->window_status})
		(endif)
	(endif)

	(f-exit 'window 'init {this, ok})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/window/deinit)
	;inputs
	;r0 = window object

	(ptr 'this 'screen)

	(push-scope)
	(f-entry 'window 'deinit {this})

	;dirty my area on parent
	(f-call 'window 'get_parent {this} {_, screen})
	(f-call 'view 'dirty_all {screen})

	;deinit parent
	(assign {this} '(r0))
	(pop-scope)
	(s-jmp 'window 'deinit '(r0))

(def-func-end)

(def-func 'class/window/add_child)
	;inputs
	;r0 = window object
	;r1 = child view object
	;trashes
	;all but r0, r4

	(vp-push r0)
	(v-call 'flow 'add_child '((r0 window_panel) r1))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/window/draw)
	;inputs
	;r0 = window object
	;r1 = ctx object
	;trashes
	;all but r0, r4

	(f-jmp 'window 'draw_panel '(r0 r1 1 window_border_size))

(def-func-end)

(def-func 'class/window/layout)
	;inputs
	;r0 = window object
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(f-entry 'window 'layout '((r4 local_this)))

	(vp-cpy-ir-i r0 view_w r10)
	(vp-cpy-ir-i r0 view_h r11)
	(vp-sub-cr (mul window_border_size 2) r10)
	(vp-sub-cr (mul window_border_size 2) r11)
	(f-call 'flow 'change '((r0 window_flow) window_border_size window_border_size r10 r11))

	(vp-cpy-ir r4 local_this r0)
	(vp-cpy-ir-ui r0 view_color r1)
	(vp-shr-cr 24 r1)
	(vpif '(r1 == 0xff))
		(f-call 'window 'opaque '(r0))
	(endif)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/window/mouse_down)
	;inputs
	;r0 = window object
	;r1 = mouse event message
	;trashes
	;all but r0, r4

	;set drag code and offset
	(vp-cpy-ir-i r1 ev_msg_rx r8)
	(vp-cpy-ir-i r1 ev_msg_ry r9)
	(vp-cpy-rr r8 r12)
	(vp-cpy-rr r9 r13)
	(vp-cpy-ir-i r0 view_w r10)
	(vp-cpy-ir-i r0 view_h r11)
	(vp-sub-cr (mul window_border_size 2) r10)
	(vp-sub-cr (mul window_border_size 2) r11)
	(vp-xor-rr r15 r15)
	(vpif '(r8 < (mul window_border_size 2)))
		;left edge
		(vp-or-cr window_drag_left r15)
	(endif)
	(vpif '(r8 >= r10))
		;right edge
		(vp-or-cr window_drag_right r15)
		(vp-cpy-ir-i r0 view_w r10)
		(vp-sub-rr r10 r12)
	(endif)
	(vpif '(r9 < (mul window_border_size 2)))
		;top edge
		(vp-or-cr window_drag_top r15)
	(endif)
	(vpif '(r9 >= r11))
		;bottom edge
		(vp-or-cr window_drag_bottom r15)
		(vp-cpy-ir-i r0 view_h r11)
		(vp-sub-rr r11 r13)
	(endif)
	(vp-cpy-ri r15 r0 window_drag_mode)
	(vp-cpy-ri-i r12 r0 window_offset_x)
	(vp-cpy-ri-i r13 r0 window_offset_y)
	(vp-ret)

(def-func-end)

(def-func 'class/window/mouse_move)
	;inputs
	;r0 = window object
	;r1 = mouse event message
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'this)
		(ptr 'event)
		(int 'old_x)
		(int 'old_y)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(f-entry 'window 'mouse_move '((r4 local_this) (r4 local_event)))

	;dirty old area
	(f-call 'window 'dirty '(r0))

	;get smallest size
	(v-call 'window 'pref_size '(r0) '(r0 r10 r11))
	(vp-cpy-rr r10 r12)
	(vp-cpy-rr r11 r13)

	;save old bounds
	(f-call 'window 'get_bounds '(r0) '(r0 (r4 local_old_x i) (r4 local_old_y i) r10 r11))

	;get abolute cords of corners
	(vp-add-rr r8 r10)
	(vp-add-rr r9 r11)

	;drag edges
	(vp-cpy-ir r4 local_event r1)
	(vp-cpy-ir r0 window_drag_mode r15)
	(vp-and-cr window_drag_left r15)
	(vpif '(r15 != 0))
		;drag left edge
		(vp-cpy-ir-i r1 ev_msg_x r8)
		(vp-cpy-ir-i r0 window_offset_x r15)
		(vp-sub-rr r15 r8)
		(vp-cpy-rr r10 r15)
		(vp-sub-rr r8 r15)
		(vpif '(r15 < r12))
			(vp-cpy-rr r10 r8)
			(vp-sub-rr r12 r8)
		(endif)
	(endif)
	(vp-cpy-ir r0 window_drag_mode r15)
	(vp-and-cr window_drag_right r15)
	(vpif '(r15 != 0))
		;drag right edge
		(vp-cpy-ir-i r1 ev_msg_x r10)
		(vp-cpy-ir-i r0 window_offset_x r15)
		(vp-sub-rr r15 r10)
		(vp-cpy-rr r10 r15)
		(vp-sub-rr r8 r15)
		(vpif '(r15 < r12))
			(vp-cpy-rr r8 r10)
			(vp-add-rr r12 r10)
		(endif)
	(endif)
	(vp-cpy-ir r0 window_drag_mode r15)
	(vp-and-cr window_drag_top r15)
	(vpif '(r15 != 0))
		;drag top edge
		(vp-cpy-ir-i r1 ev_msg_y r9)
		(vp-cpy-ir-i r0 window_offset_y r15)
		(vp-sub-rr r15 r9)
		(vp-cpy-rr r11 r15)
		(vp-sub-rr r9 r15)
		(vpif '(r15 < r13))
			(vp-cpy-rr r11 r9)
			(vp-sub-rr r13 r9)
		(endif)
	(endif)
	(vp-cpy-ir r0 window_drag_mode r15)
	(vp-and-cr window_drag_bottom r15)
	(vpif '(r15 != 0))
		;drag bottom edge
		(vp-cpy-ir-i r1 ev_msg_y r11)
		(vp-cpy-ir-i r0 window_offset_y r15)
		(vp-sub-rr r15 r11)
		(vp-cpy-rr r11 r15)
		(vp-sub-rr r9 r15)
		(vpif '(r15 < r13))
			(vp-cpy-rr r9 r11)
			(vp-add-rr r13 r11)
		(endif)
	(endif)
	(vp-sub-rr r8 r10)
	(vp-sub-rr r9 r11)

	;change window size
	(f-call 'window 'change '(r0 r8 r9 r10 r11))

	;translate old dirty area and dirty all
	(vp-cpy-ir-i r4 local_old_x r8)
	(vp-cpy-ir-i r4 local_old_y r9)
	(vp-cpy-ir-i r0 view_x r10)
	(vp-cpy-ir-i r0 view_y r11)
	(vp-sub-rr r10 r8)
	(vp-sub-rr r11 r9)
	(vp-lea-i r0 view_dirty_region r1)
	(f-call 'gui_region 'translate '(r1 r8 r9))

	(vp-cpy-ir r4 local_this r0)
	(vp-add-cr local_size r4)
	(f-jmp 'window 'dirty_all '(r0))

(def-func-end)

(def-func 'class/window/pref_size)
	;inputs
	;r0 = window object
	;outputs
	;r0 = window object
	;r10 = preferred width
	;r11 = preferred height
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(f-entry 'window 'pref_size '((r4 local_this)))

	(v-call 'flow 'pref_size '((r0 window_flow)) '(_ r10 r11))
	(vp-add-cr (mul window_border_size 2) r10)
	(vp-add-cr (mul window_border_size 2) r11)

	(vp-cpy-ir r4 local_this r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/window/set_status)
	;inputs
	;r0 = window object
	;r1 = 0, else status string object

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0) '((r4 local_this)))

	(vp-cpy-ir r0 window_status r0)
	(vpif '(r0 != 0))
		(f-call 'label 'set_text '(r0 r1))
		(f-call 'label 'dirty '(r0))
	(endif)

	(vp-cpy-ir r4 local_this r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/window/set_title)
	;inputs
	;r0 = window object
	;r1 = 0, else title string object

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0) '((r4 local_this)))

	(f-call 'title 'set_text '((r0 window_title) r1))

	(vp-cpy-ir r4 local_this r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/window/connect_close)
	;inputs
	;r0 = window object
	;r1 = reciever object
	;r2 = reciever callback
	;outputs
	;r0 = window object
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'this)
		(ptr 'obj)
		(ptr 'callback)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r1 r2) '((r4 local_this) (r4 local_obj) (r4 local_callback)))

	(f-call 'button 'sig_pressed '((r0 window_close)) '(r0 r1))
	(f-call 'button 'connect '(r0 r1 (r4 local_obj) (r4 local_callback)))

	(vp-cpy-ir r4 local_this r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/window/connect_max)
	;inputs
	;r0 = window object
	;r1 = reciever object
	;r2 = reciever callback
	;outputs
	;r0 = window object
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'this)
		(ptr 'obj)
		(ptr 'callback)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r1 r2) '((r4 local_this) (r4 local_obj) (r4 local_callback)))

	(f-call 'button 'sig_pressed '((r0 window_max)) '(r0 r1))
	(f-call 'button 'connect '(r0 r1 (r4 local_obj) (r4 local_callback)))

	(vp-cpy-ir r4 local_this r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'class/window/connect_min)
	;inputs
	;r0 = window object
	;r1 = reciever object
	;r2 = reciever callback
	;outputs
	;r0 = window object
	;trashes
	;all but r0, r4

	(def-struct 'local)
		(ptr 'this)
		(ptr 'obj)
		(ptr 'callback)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r1 r2) '((r4 local_this) (r4 local_obj) (r4 local_callback)))

	(f-call 'button 'sig_pressed '((r0 window_min)) '(r0 r1))
	(f-call 'button 'connect '(r0 r1 (r4 local_obj) (r4 local_callback)))

	(vp-cpy-ir r4 local_this r0)
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)
