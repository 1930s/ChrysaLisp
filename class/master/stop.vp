(import 'inc/func.inc)
(import 'class/class_master.inc)
(import 'class/class_vector.inc)
(import 'class/class_stream_msg_out.inc)
(import 'class/class_stream_msg_in.inc)

(def-func 'class/master/stop)
	;inputs
	;r0 = master object
	;trashes
	;all but r0, r4

	(ptr 'inst 'msg 'stream)
	(ulong 'length)

	(push-scope)
	(assign '(r0) {inst})
	(vpif {inst->master_state != stream_mail_state_stopped})
		;flush remaining
		(func-call 'master 'get_input {inst} {stream})
		(virt-call 'stream_msg_out 'write_flush {stream})

		;send stopping
		(func-call 'stream_msg_out 'set_state {stream, stream_mail_state_stopping})
		(virt-call 'stream_msg_out 'write_next {stream})
		(virt-call 'stream_msg_out 'write_flush {stream})

		;send stopped
		(func-call 'stream_msg_out 'set_state {stream, stream_mail_state_stopped})
		(virt-call 'stream_msg_out 'write_next {stream})
		(virt-call 'stream_msg_out 'write_flush {stream})

		;wait for all stopped, starting with the pipe output, then the error streams
		(devirt-call 'vector 'get_length {inst->master_streams} {length})
		(loop-start)
			(assign {length - 1} {length})
			(breakifnot {length})
			(assign {(inst->master_streams->vector_array)[length * ptr_size]} {stream})
			(loop-start)
				(virt-call 'stream_msg_in 'read_next {stream} {_})
			(loop-until {stream->stream_msg_in_state == stream_mail_state_stopped})
		(loop-end)

		;free streams, select and mailbox array
		(func-call 'vector 'deref {inst->master_streams})
		(func-call 'sys_mem 'free {inst->master_select_array})
		(func-call 'sys_mem 'free {inst->master_mailbox_array})

		;stop state
		(assign {stream_mail_state_stopped} {inst->master_state})
	(endif)

	(assign {inst} '(r0))
	(pop-scope)
	(return)

(def-func-end)
