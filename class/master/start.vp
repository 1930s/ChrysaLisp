(import 'sys/func.inc)
(import 'class/string/string.inc)
(import 'class/stream_msg_out/stream_msg_out.inc)
(import 'class/stream_msg_in/stream_msg_in.inc)
(import 'class/slave/slave.inc)
(import 'class/master/master.inc)

(def-func 'class/master/start)
	;inputs
	;r0 = master object
	;r1 = buffer
	;r2 = length
	;trashes
	;all but r0, r4

	(ptr 'this 'buffer 'msg 'string 'commands 'args 'stream 'mbox 'ids 'prefix 'cmd)
	(pubyte 'start)
	(struct 'nextid 'id)
	(struct 'mailbox 'mailbox)
	(uint 'length 'index 'started)

	;init vars
	(push-scope)
	(f-entry 'master 'start {this, buffer, length})

	(vpif {this->master_state != stream_mail_state_started})
		;split pipe into separate commands and args
		(f-call 'stream 'create {0, 0, buffer, length} {stream})
		(f-call 'stream 'split {stream, pipe_char} {_, args})
		(f-call 'stream 'deref {stream})
		(d-call 'vector 'get_length {args} {_, length})
		(vpif {length != 0})
			;create command pipeline
			(f-call 'string 'create_from_cstr {"cmd/"} {prefix})
			(f-call 'vector 'create {} {commands})
			(f-call 'vector 'set_capacity {commands, length})
			(assign {0} {index})
			(loop-while {index != length})
				(assign {(args->array_array)[index * ptr_size]} {string})
				(f-call 'stream 'create {0, 0, &string->string_data, string->string_length} {stream})
				(f-call 'stream 'skip {stream, char_space})
				(assign {stream->stream_bufp} {start})
				(f-call 'stream 'skip_not {stream, char_space})
				(f-call 'string 'create_from_buffer {start, stream->stream_bufp - start} {string})
				(f-call 'string 'append {prefix, string} {cmd})
				(f-call 'vector 'push_back {commands, cmd})
				(f-call 'string 'deref {string})
				(f-call 'stream 'deref {stream})
				(assign {index + 1} {index})
			(loop-end)
			(f-call 'string 'deref {prefix})

			;open command pipeline
			(f-call 'sys_task 'open_pipe {commands} {ids})
			(f-call 'vector 'deref {commands})

			;count how many started
			(assign {0, 0} {started, index})
			(loop-while {index != length})
				(vpif {ids[index * id_size] .id_mbox != 0})
					(assign {started + 1} {started})
				(endif)
				(assign {index + 1} {index})
			(loop-end)

			;error if some didn't start
			(vpif {started == length})
				;create streams, mailboxes and select array
				(f-call 'vector 'create {} {this->master_streams})
				(f-call 'vector 'set_capacity {this->master_streams, length + 2})
				(f-call 'sys_mem 'alloc {(length + 2) * ptr_size} {this->master_select_array, _})
				(f-call 'sys_mem 'alloc {(length + 2) * mailbox_size} {this->master_mailbox_array, _})
				(assign {0} {index})
				(loop-while {index != (length + 2)})
					(assign {&(this->master_mailbox_array)[index * mailbox_size]} {mbox})
					(f-call 'sys_mail 'init_mailbox {mbox})
					(assign {mbox} {(this->master_select_array)[index * ptr_size]})
					(f-call 'stream_msg_in 'create {mbox} {stream})
					(f-call 'vector 'push_back {this->master_streams, stream})
					(assign {index + 1} {index})
				(loop-end)

				;send args to pipe elements, wiring up id's as we go
				(f-call 'sys_mail 'init_mailbox {&mailbox})
				(assign {mbox} {nextid.id_mbox})
				(f-call 'sys_cpu 'id {} {nextid.id_cpu})
				(assign {index - 2} {index})
				(loop-while {index != 0})
					(assign {index - 1} {index})
					(assign {(args->array_array)[index * ptr_size]} {string})
					(f-call 'sys_mail 'alloc_parcel {slave_mail_init_size + string->string_length} {msg})
					(f-call 'sys_mem 'copy {&string->string_data, &msg->slave_mail_init_args, string->string_length})
					(assign {nextid.id_mbox} {msg->slave_mail_init_stdout_id.id_mbox})
					(assign {nextid.id_cpu} {msg->slave_mail_init_stdout_id.id_cpu})
					(assign {&(this->master_mailbox_array)[(index + 1) * mailbox_size]} {msg->slave_mail_init_stderr_id.id_mbox})
					(f-call 'sys_cpu 'id {} {msg->slave_mail_init_stderr_id.id_cpu})
					(assign {&mailbox} {msg->slave_mail_init_ack_id.id_mbox})
					(f-call 'sys_cpu 'id {} {msg->slave_mail_init_ack_id.id_cpu})
					(assign {ids[index * id_size].id_mbox} {nextid.id_mbox})
					(assign {ids[index * id_size].id_cpu} {nextid.id_cpu})
					(assign {nextid.id_mbox} {msg->msg_dest.id_mbox})
					(assign {nextid.id_cpu} {msg->msg_dest.id_cpu})
					(f-call 'sys_mail 'send {msg})

					;wait for ack
					(f-call 'sys_mail 'read {&mailbox} {msg})
					(f-call 'sys_mem 'free {msg})
				(loop-end)

				;create input stream, free the unused space keeper stream
				(assign {*this->master_streams->array_array} {stream})
				(f-call 'stream_msg_in 'deref {stream})
				(f-call 'stream_msg_out 'create {nextid.id_mbox, nextid.id_cpu} {stream})
				(assign {stream} {*this->master_streams->array_array})

				;no error
				(assign {stream_mail_state_started} {this->master_state})
			(else)
				;send abort to any started pipe elements
				(loop-while {index != 0})
					(assign {index - 1} {index})
					(continueif {ids[index * id_size].id_mbox == 0})
					(f-call 'sys_mail 'alloc {} {msg})
					(assign {ids[index * id_size].id_mbox} {msg->msg_dest.id_mbox})
					(assign {ids[index * id_size].id_cpu} {msg->msg_dest.id_cpu})
					(f-call 'sys_mail 'send {msg})
				(loop-end)
			(endif)

			;free ids
			(f-call 'sys_mem 'free {ids})
		(endif)

		;free args
		(f-call 'vector 'deref {args})
	(endif)

	(f-exit 'master 'start {this})
	(pop-scope)
	(return)

(def-func-end)
