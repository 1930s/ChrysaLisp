(import 'sys/func.inc)
(import 'class/string/string.inc)
(import 'class/stream_msg_out/stream_msg_out.inc)
(import 'class/stream_msg_in/stream_msg_in.inc)
(import 'class/slave/slave.inc)
(import 'class/master/master.inc)

(gen-new 'master)
(gen-create 'master)
(gen-class 'master)

(def-func 'class/master/init)
	;inputs
	;r0 = master object
	;r1 = vtable pointer
	;outputs
	;r1 = 0 if error, else ok
	;trashes
	;all but r0, r4

	(ptr 'this 'vtable)
	(ulong 'error)

	;read init args
	(push-scope)
	(f-entry 'master 'init {this, vtable})

	;init parent
	(s-call 'master 'init {this, vtable} {_, error})
	(vpif {error})
		;init state
		(f-call 'sys_mem 'clear {&this->master_start, master_size - master_start})
		(assign {stream_mail_state_stopped} {this->master_state})
	(endif)

	(f-exit 'master 'init {this, error})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/master/deinit)
	;inputs
	;r0 = master object
	;trashes
	;all but r0, r4

	;call stop
	(f-call 'master 'stop '(r0))

	;deinit parent
	(s-jmp 'master 'deinit '(r0))

(def-func-end)

(def-func 'class/master/get_stream)
	;inputs
	;r0 = master object
	;r1 = mailbox
	;outputs
	;r0 = master object
	;r1 = stream object
	;trashes
	;all but r0, r4

	(ptr 'this 'mailbox)
	(ulong 'index)

	(push-scope)
	(f-entry 'master 'get_stream {this, mailbox})

	(assign {0} {index})
	(loop-while {mailbox != (this->master_select_array)[index]})
		(assign {index + ptr_size} {index})
	(loop-end)

	(f-exit 'master 'get_stream {this, (this->master_streams->array_array)[index]})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/master/select)
	;inputs
	;r0 = master object
	;r1 = user mailbox
	;outputs
	;r0 = master object
	;r1 = mailbox with mail
	;trashes
	;all but r0, r4

	(ptr 'this 'mailbox)
	(uint 'length)

	(push-scope)
	(f-entry 'master 'select {this, mailbox})

	(vpif {this->master_state != stream_mail_state_started})
		;not yet running, so just wait on user mailbox
		(f-call 'sys_mail 'select {&mailbox, 1} {mailbox})
	(else)
		;wait on user and pipe mailboxes
		(assign {mailbox} {*this->master_select_array})
		(d-call 'vector 'get_length {this->master_streams} {_, length})
		(f-call 'sys_mail 'select {this->master_select_array, length} {mailbox})
	(endif)

	(f-exit 'master 'select {this, mailbox})
	(pop-scope)
	(return)

(def-func-end)
