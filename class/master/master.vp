(import 'inc/func.inc)
(import 'class/string/string.inc)
(import 'class/stream_msg_out/stream_msg_out.inc)
(import 'class/stream_msg_in/stream_msg_in.inc)
(import 'class/slave/slave.inc)
(import 'class/master/master.inc)

(gen-new 'master)
(gen-create 'master)

(def-func 'class/master/init)
	;inputs
	;r0 = master object
	;r1 = vtable pointer
	;outputs
	;r1 = 0 if error, else ok
	;trashes
	;all but r0, r4

	(ptr 'inst 'vtable)
	(ulong 'error)

	;read init args
	(push-scope)
	(assign '(r0 r1) {inst, vtable})

	;init parent
	(s-call 'master 'init {inst, vtable} {error})
	(vpif {error != 0})
		;init state
		(f-call 'sys_mem 'clear {&inst->master_start, master_size - master_start} {_})
		(assign {stream_mail_state_stopped} {inst->master_state})
	(endif)

	(assign {inst, error} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/master/deinit)
	;inputs
	;r0 = master object
	;trashes
	;all but r0, r4

	;call stop
	(f-call 'master 'stop '(r0))

	;deinit parent
	(s-jmp 'master 'deinit '(r0))

(def-func-end)

(def-func 'class/master/get_stream)
	;inputs
	;r0 = master object
	;r1 = mailbox
	;outputs
	;r0 = master object
	;r1 = stream object
	;trashes
	;all but r0, r4

	(ptr 'inst 'mailbox)
	(ulong 'index)

	(push-scope)
	(assign '(r0 r1) {inst, mailbox})

	(assign {0} {index})
	(loop-while {mailbox != (inst->master_select_array)[index]})
		(assign {index + ptr_size} {index})
	(loop-end)

	(assign {inst, (inst->master_streams->vector_array)[index]} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/master/select)
	;inputs
	;r0 = master object
	;r1 = user mailbox
	;outputs
	;r0 = master object
	;r1 = mailbox with mail
	;trashes
	;all but r0, r4

	(ptr 'inst 'mailbox)
	(uint 'length)

	(push-scope)
	(assign '(r0 r1) {inst, mailbox})

	(vpif {inst->master_state != stream_mail_state_started})
		;not yet running, so just wait on user mailbox
		(f-call 'sys_mail 'select {&mailbox, 1} {mailbox})
	(else)
		;wait on user and pipe mailboxes
		(assign {mailbox} {*inst->master_select_array})
		(d-call 'vector 'get_length {inst->master_streams} {length})
		(f-call 'sys_mail 'select {inst->master_select_array, length} {mailbox})
	(endif)

	(assign {inst, mailbox} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/master/start)
	;inputs
	;r0 = master object
	;r1 = buffer
	;r2 = length
	;trashes
	;all but r0, r4

	(ptr 'inst 'buffer 'msg 'string 'commands 'args 'stream 'mbox 'ids 'prefix 'cmd)
	(pubyte 'start)
	(struct 'nextid 'id)
	(struct 'mailbox 'mailbox)
	(uint 'length 'index 'started)

	;init vars
	(push-scope)
	(assign '(r0 r1 r2) {inst, buffer, length})
	(vpif {inst->master_state != stream_mail_state_started})
		;split pipe into separate commands and args
		(f-call 'stream 'create {0, 0, buffer, length} {stream})
		(f-call 'stream 'split {stream, pipe_char} {args})
		(f-call 'stream 'deref {stream})
		(d-call 'vector 'get_length {args} {length})
		(vpif {length != 0})
			;create command pipeline
			(f-call 'string 'create_from_cstr {"cmd/"} {prefix})
			(f-call 'vector 'create {} {commands})
			(f-call 'vector 'set_capacity {commands, length})
			(assign {0} {index})
			(loop-while {index != length})
				(assign {(args->vector_array)[index * ptr_size]} {string})
				(f-call 'stream 'create {0, 0, &string->string_data, string->string_length} {stream})
				(f-call 'stream 'skip {stream, char_space})
				(assign {stream->stream_bufp} {start})
				(f-call 'stream 'skip_not {stream, char_space})
				(f-call 'string 'create_from_buffer {start, stream->stream_bufp - start} {string})
				(f-call 'string 'append {prefix, string} {cmd})
				(f-call 'vector 'push_back {commands, cmd})
				(f-call 'string 'deref {string})
				(f-call 'stream 'deref {stream})
				(assign {index + 1} {index})
			(loop-end)
			(f-call 'string 'deref {prefix})

			;open command pipeline
			(f-call 'sys_task 'open_pipe {commands} {ids})
			(f-call 'vector 'deref {commands})

			;count how many started
			(assign {0, 0} {started, index})
			(loop-while {index != length})
				(vpif {ids[index * id_size] .id_mbox != 0})
					(assign {started + 1} {started})
				(endif)
				(assign {index + 1} {index})
			(loop-end)

			;error if some didn't start
			(vpif {started == length})
				;create streams, mailboxes and select array
				(f-call 'vector 'create {} {inst->master_streams})
				(f-call 'vector 'set_capacity {inst->master_streams, length + 2})
				(f-call 'sys_mem 'alloc {(length + 2) * ptr_size} {inst->master_select_array, _})
				(f-call 'sys_mem 'alloc {(length + 2) * mailbox_size} {inst->master_mailbox_array, _})
				(assign {0} {index})
				(loop-while {index != (length + 2)})
					(assign {&(inst->master_mailbox_array)[index * mailbox_size]} {mbox})
					(f-call 'sys_mail 'init_mailbox {mbox})
					(assign {mbox} {(inst->master_select_array)[index * ptr_size]})
					(f-call 'stream_msg_in 'create {mbox} {stream})
					(f-call 'vector 'push_back {inst->master_streams, stream})
					(assign {index + 1} {index})
				(loop-end)

				;send args to pipe elements, wiring up id's as we go
				(f-call 'sys_mail 'init_mailbox {&mailbox})
				(assign {mbox} {nextid.id_mbox})
				(f-call 'sys_cpu 'id {} {nextid.id_cpu})
				(assign {index - 2} {index})
				(loop-while {index != 0})
					(assign {index - 1} {index})
					(assign {(args->vector_array)[index * ptr_size]} {string})
					(f-call 'sys_mail 'alloc_parcel {slave_mail_init_size + string->string_length} {msg})
					(f-call 'sys_mem 'copy {&string->string_data, &msg->slave_mail_init_args, string->string_length} {_, _})
					(assign {nextid.id_mbox} {msg->slave_mail_init_stdout_id.id_mbox})
					(assign {nextid.id_cpu} {msg->slave_mail_init_stdout_id.id_cpu})
					(assign {&(inst->master_mailbox_array)[(index + 1) * mailbox_size]} {msg->slave_mail_init_stderr_id.id_mbox})
					(f-call 'sys_cpu 'id {} {msg->slave_mail_init_stderr_id.id_cpu})
					(assign {&mailbox} {msg->slave_mail_init_ack_id.id_mbox})
					(f-call 'sys_cpu 'id {} {msg->slave_mail_init_ack_id.id_cpu})
					(assign {ids[index * id_size].id_mbox} {nextid.id_mbox})
					(assign {ids[index * id_size].id_cpu} {nextid.id_cpu})
					(assign {nextid.id_mbox} {msg->msg_dest.id_mbox})
					(assign {nextid.id_cpu} {msg->msg_dest.id_cpu})
					(f-call 'sys_mail 'send {msg})

					;wait for ack
					(f-call 'sys_mail 'read {&mailbox} {msg})
					(f-call 'sys_mem 'free {msg})
				(loop-end)

				;create input stream, free the unused space keeper stream
				(assign {*inst->master_streams->vector_array} {stream})
				(f-call 'stream_msg_in 'deref {stream})
				(f-call 'stream_msg_out 'create {nextid.id_mbox, nextid.id_cpu} {stream})
				(assign {stream} {*inst->master_streams->vector_array})

				;no error
				(assign {stream_mail_state_started} {inst->master_state})
			(else)
				;send abort to any started pipe elements
				(loop-while {index != 0})
					(assign {index - 1} {index})
					(continueif {ids[index * id_size].id_mbox == 0})
					(f-call 'sys_mail 'alloc {} {msg})
					(assign {ids[index * id_size].id_mbox} {msg->msg_dest.id_mbox})
					(assign {ids[index * id_size].id_cpu} {msg->msg_dest.id_cpu})
					(f-call 'sys_mail 'send {msg})
				(loop-end)
			(endif)

			;free ids
			(f-call 'sys_mem 'free {ids})
		(endif)

		;free args
		(f-call 'vector 'deref {args})
	(endif)

	(assign {inst} '(r0))
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/master/stop)
	;inputs
	;r0 = master object
	;trashes
	;all but r0, r4

	(ptr 'inst 'msg 'stream)
	(uint 'length)

	(push-scope)
	(assign '(r0) {inst})
	(vpif {inst->master_state != stream_mail_state_stopped})
		;flush remaining
		(f-call 'master 'get_input {inst} {stream})
		(v-call 'stream_msg_out 'write_flush {stream})

		;send stopping
		(f-call 'stream_msg_out 'set_state {stream, stream_mail_state_stopping})
		(v-call 'stream_msg_out 'write_next {stream})
		(v-call 'stream_msg_out 'write_flush {stream})

		;send stopped
		(f-call 'stream_msg_out 'set_state {stream, stream_mail_state_stopped})
		(v-call 'stream_msg_out 'write_next {stream})
		(v-call 'stream_msg_out 'write_flush {stream})

		;wait for all stopped, starting with the pipe output, then the error streams
		(d-call 'vector 'get_length {inst->master_streams} {length})
		(loop-start)
			(assign {length - 1} {length})
			(breakifnot {length})
			(assign {(inst->master_streams->vector_array)[length * ptr_size]} {stream})
			(loop-start)
				(v-call 'stream_msg_in 'read_next {stream} {_})
			(loop-until {stream->stream_msg_in_state == stream_mail_state_stopped})
		(loop-end)

		;free streams, select and mailbox array
		(f-call 'vector 'deref {inst->master_streams})
		(f-call 'sys_mem 'free {inst->master_select_array})
		(f-call 'sys_mem 'free {inst->master_mailbox_array})

		;stop state
		(assign {stream_mail_state_stopped} {inst->master_state})
	(endif)

	(assign {inst} '(r0))
	(pop-scope)
	(return)

(def-func-end)
