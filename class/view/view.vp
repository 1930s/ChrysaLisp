(import 'sys/func.inc)
(import 'gui/gui.inc)
(import 'class/view/view.inc)

(gen-class 'view)

(def-func 'class/view/init)
	;inputs
	;r0 = object
	;r1 = vtable pointer
	;outputs
	;r0 = object
	;r1 = 0 if error, else ok

	;init parent
	(s-call 'view 'init '(r0 r1) '(r0 r1))
	(vpif '(r1 != 0))
		;init myself
		(vp-push r0)
		(f-call 'sys_mem 'clear '((& r0 view_start) (sub view_size view_start)))
		(vp-pop r0)
		(vp-cpy-cr view_flag_solid r1)
		(vp-cpy-ri-i r1 r0 view_flags)
		(vp-lea-i r0 view_list r1)
		(lh-init r1 r2)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/view/deinit)
	;inputs
	;r0 = view object
	;trashes
	;all but r0

	;save object
	(vp-push r0)

	;sub view from any parent
	(f-call 'view 'sub '(r0))

	;deref any child views
	(vp-cpy-ir rsp 0 r0)
	(loop-list-forward r0 view_list r0 r1)
		(vp-sub-cr view_node r0)
		(vp-push r1)
		(f-call 'view 'sub '(r0))
		(f-call 'view 'deref '(r0))
		(vp-pop r1)
	(loop-end)

	;free view object data
	(vp-cpy-ir rsp 0 r0)
	(vp-lea-i r0 view_dirty_region r1)
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)
	(f-call 'gui_region 'free '(r0 r1))
	(vp-cpy-ir rsp 0 r1)
	(vp-add-cr view_opaque_region r1)
	(f-call 'gui_region 'free '(r0 r1))

	;deinit parent
	(vp-pop r0)
	(s-jmp 'view 'deinit '(r0))

(def-func-end)

(def-func 'class/view/add_back)
	;inputs
	;r0 = view object
	;r1 = child view object
	;trashes
	;r1-r3

	;remove from any existing parent
	(vp-cpy-rr r0 r3)
	(f-call 'view 'sub '(r1))

	;add to parent
	(vp-cpy-ri r3 r0 view_parent)
	(vp-lea-i r0 view_node r2)
	(vp-cpy-rr r3 r0)
	(vp-add-cr view_list r3)
	(lh-add-at-tail r3 r2 r1)
	(vp-ret)

(def-func-end)

(def-func 'class/view/add_dirty)
	;inputs
	;r0 = view object
	;r7 = x
	;r8 = y
	;r9 = width
	;r10 = height
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(assign '(r0) '((rsp local_this)))

	;paste dirty region
	(vp-add-rr r7 r9)
	(vp-add-rr r8 r10)
	(vp-lea-i r0 view_dirty_region r1)
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)
	(f-call 'gui_region 'paste_rect '(r0 r1 r7 r8 r9 r10))

	(vp-cpy-ir rsp local_this r0)
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/view/add_front)
	;inputs
	;r0 = view object
	;r1 = parent view object
	;trashes
	;r1-r3

	;remove from any existing parent
	(vp-cpy-rr r0 r3)
	(f-call 'view 'sub '(r1))

	;add to parent
	(vp-cpy-ri r3 r0 view_parent)
	(vp-lea-i r0 view_node r2)
	(vp-cpy-rr r3 r0)
	(vp-add-cr view_list r3)
	(lh-add-at-head r3 r2 r1)
	(vp-ret)

(def-func-end)

(def-func 'class/view/add_opaque)
	;inputs
	;r0 = view object
	;r7 = x
	;r8 = y
	;r9 = width
	;r10 = height
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(assign '(r0) '((rsp local_this)))

	;paste opaque region
	(vp-add-rr r7 r9)
	(vp-add-rr r8 r10)
	(vp-lea-i r0 view_opaque_region r1)
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)
	(f-call 'gui_region 'paste_rect '(r0 r1 r7 r8 r9 r10))

	(vp-cpy-ir rsp local_this r0)
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/view/backward)
	;inputs
	;r0 = view object
	;r1 = user data pointer
	;r2 = callback
	;outputs
	;r0 = view object
	;trashes
	;dependant on callback
		;callback api
		;inputs
		;r0 = child view object
		;r1 = user data pointer
		;outputs
		;r0 = child view object

	(def-struct 'local)
		(ptr 'this)
		(ptr 'data)
		(ptr 'callback)
	(def-struct-end)

	(vp-alloc local_size)
	(vp-cpy-ri r0 rsp local_this)
	(vp-cpy-ri r1 rsp local_data)
	(vp-cpy-ri r2 rsp local_callback)

	(lh-get-tail r0 view_list r0)
	(loop-start)
		(ln-get-pred r0 0 r1)
		(breakif '(r1 == 0))

		;callback
		(vp-sub-cr view_node r0)
		(vp-cpy-ir rsp local_data r1)
		(vp-call-i rsp local_callback)

		;across to sibling
		(ln-get-pred r0 view_node r0)
	(loop-end)

	(vp-cpy-ir rsp local_this r0)
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/view/backward_tree)
	;inputs
	;r0 = view object
	;r1 = user data pointer
	;r2 = down callback
	;r3 = up callback
	;outputs
	;r0 = view object
	;trashes
	;dependant on callbacks
		;callback api
		;inputs
		;r0 = view object
		;r1 = user data pointer
		;outputs
		;r0 = view object
		;r1 = 0 if should not descend after down callback

	(def-struct 'local)
		(ptr 'this)
		(ptr 'data)
		(ptr 'down)
		(ptr 'up)
	(def-struct-end)

	(vp-alloc local_size)
	(vp-cpy-ri r0 rsp local_this)
	(vp-cpy-ri r1 rsp local_data)
	(vp-cpy-ri r2 rsp local_down)
	(vp-cpy-ri r3 rsp local_up)
	(vp-cpy-rr r0 r1)
	(loop-start)
	(vp-label 'down_loop_ctx)
		(vp-cpy-rr r1 r0)

		;down callback
		(vp-cpy-ir rsp local_data r1)
		(vp-call-i rsp local_down)
		(breakif '(r1 == 0))

		;down to child
		(lh-get-tail r0 view_list r1)
		(vp-sub-cr view_node r1)

		(ln-get-pred r1 view_node r2)
	(loop-until '(r2 == 0))
	(loop-start)
		;up callback
		(vp-cpy-ir rsp local_data r1)
		(vp-call-i rsp local_up)

		;back at root ?
		(vp-cpy-ir rsp local_this r2)
		(breakif '(r0 == r2))

		;across to sibling
		(ln-get-pred r0 view_node r1)
		(vp-sub-cr view_node r1)

		(ln-get-pred r1 view_node r2)
		(gotoif '(r2 != 0) 'down_loop_ctx)

		;up to parent
		(vp-cpy-ir r0 view_parent r0)
	(loop-end)

	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/view/change)
	;inputs
	;r0 = view object
	;r7 = new x
	;r8 = new y
	;r9 = new w
	;r10 = new h
	;trashes
	;all but r0

	;save old info
	(vp-cpy-ir-i r0 view_w r11)
	(vp-cpy-ir-i r0 view_h r12)

	;set new info
	(f-call 'view 'set_bounds '(r0 r7 r8 r9 r10))

	;layout if changed size
	(vpif '(r9 == r11))
		(vpif '(r10 == r12))
			(vp-ret)
		(endif)
	(endif)
	(v-jmp 'view 'layout '(r0))

(def-func-end)

(def-func 'class/view/dirty)
	;inputs
	;r0 = view object
	;trashes
	;all but r0

	;paste dirty region
	(vp-cpy-ir-i r0 view_w r9)
	(vp-cpy-ir-i r0 view_h r10)
	(f-jmp 'view 'add_dirty '(r0 0 0 r9 r10))

(def-func-end)

(def-func 'class/view/dirty_all)
	;inputs
	;r0 = view object
	;trashes
	;all but r0

	;iterate through views
	;dirty all
	(f-jmp 'view 'forward_tree '(r0 r0 ($ dirty_down_callback) ($ null_up_callback)))

(vp-label 'dirty_down_callback)
	(f-call 'view 'dirty '(r0) '(r1))
(vp-label 'null_up_callback)
	(vp-ret)

(def-func-end)

(def-func 'class/view/draw_panel)
	;inputs
	;r0 = view object
	;r1 = ctx object
	;r2 = flags
	;r3 = depth
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(vp-cpy-ri r0 rsp local_this)

	(f-call 'view 'get_bounds '(r0) '(r4 r7 r8 r9 r10))
	(f-call 'gui_ctx 'panel '(r1 (r4 view_color ui) r2 r3 0 0 r9 r10) '())

	(vp-cpy-ir rsp local_this r0)
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/view/event)
	;inputs
	;r0 = view object
	;r1 = event message
	;trashes
	;all but r0

	;what type of event ?
	(vp-cpy-ir r1 ev_msg_type r2)
	(switch)
	(case '(r2 == ev_type_mouse))
		;so what state are we in ?
		(vp-cpy-ir r1 ev_msg_buttons r2)
		(vp-cpy-ir-ui r0 view_last_buttons r3)
		(vpif '(r3 != 0))
			;was down previously
			(vpif '(r2 != 0))
				;is down now, so move
				(v-jmp 'view 'mouse_move '(r0 r1))
			(else)
				;is not down now, so release
				(vp-cpy-ri-i r2 r0 view_last_buttons)
				(v-jmp 'view 'mouse_up '(r0 r1))
			(endif)
		(else)
			;was not down previously
			(vpif '(r2 != 0))
				;is down now, so first down
				(vp-cpy-ri-i r2 r0 view_last_buttons)
				(v-jmp 'view 'mouse_down '(r0 r1))
			(else)
				;is not down now, so hover
				(v-jmp 'view 'mouse_hover '(r0 r1))
			(endif)
		(endif)
		(break)
	(case '(r2 == ev_type_key))
		(vp-cpy-ir r1 ev_msg_keycode r2)
		(vpif '(r2 >= 0))
			(v-jmp 'view 'key_down '(r0 r1))
		(else)
			(v-jmp 'view 'key_up '(r0 r1))
		(endif)
	(endswitch)
	(vp-ret)

(def-func-end)

(def-func 'class/view/find_owner)
	;inputs
	;r0 = view object
	;outputs
	;r1 = 0, else tcb of owner
	;trashes
	;r2

	;walk up tree to parent
	(vp-cpy-rr r0 r2)
	(loop-while '(r2 != 0))
		(vp-cpy-ir r2 view_tcb r1)
		(vp-cpy-ir r2 view_parent r2)
		(continueif '(r1 == 0))
		(vp-ret)
	(loop-end)
	(vp-xor-rr r1 r1)
	(vp-ret)

(def-func-end)

(def-func 'class/view/forward)
	;inputs
	;r0 = view object
	;r1 = user data pointer
	;r2 = callback
	;outputs
	;r0 = view object
	;trashes
	;dependant on callback
		;callback api
		;inputs
		;r0 = child view object
		;r1 = user data pointer
		;outputs
		;r0 = child view object

	(def-struct 'local)
		(ptr 'this)
		(ptr 'data)
		(ptr 'callback)
	(def-struct-end)

	(vp-alloc local_size)
	(vp-cpy-ri r0 rsp local_this)
	(vp-cpy-ri r1 rsp local_data)
	(vp-cpy-ri r2 rsp local_callback)

	(lh-get-head r0 view_list r0)
	(loop-start)
	 	(ln-get-succ r0 0 r1)
		(breakif '(r1 == 0))

		;callback
		(vp-sub-cr view_node r0)
		(vp-cpy-ir rsp local_data r1)
		(vp-call-i rsp local_callback)

		;across to sibling
		(ln-get-succ r0 view_node r0)
	(loop-end)

	(vp-cpy-ir rsp local_this r0)
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/view/forward_tree)
	;inputs
	;r0 = view object
	;r1 = user data pointer
	;r2 = down callback
	;r3 = up callback
	;outputs
	;r0 = view object
	;trashes
	;dependant on callbacks
		;callback api
		;inputs
		;r0 = view object
		;r1 = user data pointer
		;outputs
		;r0 = view object
		;r1 = 0 if should not descend after down callback

	(def-struct 'local)
		(ptr 'this)
		(ptr 'data)
		(ptr 'down)
		(ptr 'up)
	(def-struct-end)

	(vp-alloc local_size)
	(vp-cpy-ri r0 rsp local_this)
	(vp-cpy-ri r1 rsp local_data)
	(vp-cpy-ri r2 rsp local_down)
	(vp-cpy-ri r3 rsp local_up)
	(vp-cpy-rr r0 r1)
	(loop-start)
	(vp-label 'down_loop_ctx)
		(vp-cpy-rr r1 r0)

		;down callback
		(vp-cpy-ir rsp local_data r1)
		(vp-call-i rsp local_down)
		(breakif '(r1 == 0))

		;down to child
		(lh-get-head r0 view_list r1)
		(vp-sub-cr view_node r1)

		(ln-get-succ r1 view_node r2)
	(loop-until '(r2 == 0))
	(loop-start)
		;up callback
		(vp-cpy-ir rsp local_data r1)
		(vp-call-i rsp local_up)

		;back at root ?
		(vp-cpy-ir rsp local_this r2)
		(breakif '(r0 == r2))

		;across to sibling
		(ln-get-succ r0 view_node r1)
		(vp-sub-cr view_node r1)

		(ln-get-succ r1 view_node r2)
		(gotoif '(r2 != 0) 'down_loop_ctx)

		;up to parent
		(vp-cpy-ir r0 view_parent r0)
	(loop-end)

	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/view/get_bounds)
	;inputs
	;r0 = view object
	;outputs
	;r0 = view object
	;r7 = x
	;r8 = y
	;r9 = width
	;r10 = height

	(vp-cpy-ir-i r0 view_x r7)
	(vp-cpy-ir-i r0 view_y r8)
	(vp-cpy-ir-i r0 view_w r9)
	(vp-cpy-ir-i r0 view_h r10)
	(vp-ret)

(def-func-end)

(def-func 'class/view/get_first)
	;inputs
	;r0 = view object
	;outputs
	;r0 = view object
	;r1 = 0 if empty, else first child
	;trashes
	;r2

	(lh-get-head r0 view_list r1)
	(ln-get-succ r1 0 r2)
	(vpif '(r2 == 0))
		(vp-cpy-rr r2 r1)
	(else)
		(vp-sub-cr view_node r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/view/get_last)
	;inputs
	;r0 = view object
	;outputs
	;r0 = view object
	;r1 = 0 if empty, else last child
	;trashes
	;r2

	(lh-get-tail r0 view_list r1)
	(ln-get-pred r1 0 r2)
	(vpif '(r2 == 0))
		(vp-cpy-rr r2 r1)
	(else)
		(vp-sub-cr view_node r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/view/get_relative)
	;inputs
	;r0 = view object
	;r1 = ancestor view object
	;r7 = view x
	;r8 = view y
	;outputs
	;r7 = relative x
	;r8 = relative y
	;trashes
	;r2, r9-r10

	;walk up tree to parent
	(vp-cpy-rr r0 r2)
	(loop-while '(r2 != r1))
		(vp-cpy-ir-i r2 view_x r9)
		(vp-cpy-ir-i r2 view_y r10)
		(vp-add-rr r9 r7)
		(vp-add-rr r10 r8)
		(vp-cpy-ir r2 view_parent r2)
		(assert '(r2 != 0))
	(loop-end)
	(vp-ret)

(def-func-end)

(def-func 'class/view/hit)
	;inputs
	;r0 = view object
	;r7 = x
	;r8 = y
	;outputs
	;r0 = view object
	;r1 = 0 if not, else hit

	(vpif '(r7 >= 0))
		(vpif '(r8 >= 0))
			(vp-cpy-ir-i r0 view_w r1)
			(vpif '(r7 < r1))
				(vp-cpy-ir-i r0 view_h r1)
				(vpif '(r8 < r1))
					;hit ?
					(vp-cpy-ir-ui r0 view_flags r1)
					(vp-and-cr view_flag_solid r1)
					(vp-ret)
				(endif)
			(endif)
		(endif)
	(endif)
	(vp-xor-rr r1 r1)
	(vp-ret)

(def-func-end)

(def-func 'class/view/hit_tree)
	;inputs
	;r0 = view object
	;r7 = x
	;r8 = y
	;outputs
	;r0 = view object
	;r1 = 0 if not hit, else hit view
	;r7 = x relative to hit
	;r8 = y relative to hit
	;trashes
	;r1-r3

	(def-struct 'local)
		(ptr 'this)
		(ptr 'hit)
		(ptr 'jump)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(vp-cpy-ri r0 rsp local_this)
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 rsp local_hit)
	(vp-lea-p 'early_ret r1)
	(vp-cpy-ri r1 rsp local_jump)

	;iterate through views front to back
	(f-call 'view 'forward_tree '(r0 rsp ($ hit_down_callback) ($ hit_up_callback)))

(vp-label 'early_ret)
	(vp-cpy-ir rsp local_this r0)
	(vp-cpy-ir rsp local_hit r1)
	(vp-free local_size)
	(vp-ret)

(vp-label 'hit_down_callback)
	(vp-cpy-ir-i r0 view_x r1)
	(vp-sub-rr r1 r7)
	(vp-cpy-ir-i r0 view_y r1)
	(vp-sub-rr r1 r8)
	(vp-cpy-ir-ui r0 view_flags r1)
	(vp-and-cr view_flag_solid r1)
	(vp-ret)

(vp-label 'hit_up_callback)
	(vp-cpy-rr r1 r2)
	(v-call 'view 'hit '(r0 r7 r8) '(r0 r1))
	(vpif '(r1 != 0))
		;early exit back to caller !
		(vp-cpy-rr r2 rsp)
		(vp-cpy-ri r0 r2 local_hit)
		(vp-jmp-i r2 local_jump)
	(endif)
	(vp-cpy-ir-i r0 view_x r1)
	(vp-add-rr r1 r7)
	(vp-cpy-ir-i r0 view_y r1)
	(vp-add-rr r1 r8)
	(vp-xor-rr r1 r1)
	(vp-ret)

(def-func-end)

(def-func 'class/view/opaque)
	;inputs
	;r0 = view object
	;trashes
	;all but r0

	;remove any opaque region
	(f-call 'view 'sub_opaque '(r0 -1000000 -1000000 2000000 2000000))

	;paste opaque region
	(vp-cpy-ir-i r0 view_w r9)
	(vp-cpy-ir-i r0 view_h r10)
	(f-jmp 'view 'add_opaque '(r0 0 0 r9 r10))

(def-func-end)

(def-func 'class/view/pref_size)
	;inputs
	;r0 = view object
	;outputs
	;r9 = preferred width
	;r10 = preferred height
	;trashes
	;all but r0

	(vp-cpy-ir-i r0 view_min_w r9)
	(vp-cpy-ir-i r0 view_min_h r10)
	(vp-ret)

(def-func-end)

(def-func 'class/view/set_bounds)
	;inputs
	;r0 = view object
	;r7 = x
	;r8 = y
	;r9 = width
	;r10 = height

	(vp-cpy-ri-i r7 r0 view_x)
	(vp-cpy-ri-i r8 r0 view_y)
	(vp-cpy-ri-i r9 r0 view_w)
	(vp-cpy-ri-i r10 r0 view_h)
	(vp-ret)

(def-func-end)

(def-func 'class/view/sub)
	;inputs
	;r0 = object
	;trashes
	;r1-r2

	;test parent
	(vp-cpy-ir r0 view_parent r1)
	(vpif '(r1 != 0))
		;clear parent field
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 r0 view_parent)

		;remove from parent list
		(vp-lea-i r0 view_node r2)
		(ln-remove-node r2 r1)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/view/sub_opaque)
	;inputs
	;r0 = view object
	;r7 = x
	;r8 = y
	;r9 = width
	;r10 = height
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(assign '(r0) '((rsp local_this)))

	;cut opaque region
	(vp-add-rr r7 r9)
	(vp-add-rr r8 r10)
	(vp-lea-i r0 view_opaque_region r1)
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)
	(f-call 'gui_region 'remove_rect '(r0 r1 r7 r8 r9 r10))

	(vp-cpy-ir rsp local_this r0)
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-func 'class/view/to_front)
	;inputs
	;r0 = view object
	;outputs
	;r0 = view object
	;trashes
	;all but r0

	;are we already front ?
	(ln-is-first r0 view_node r1)
	(vpif '(r1 != 0))
		(vp-push r0)
		(f-call 'view 'add_front '((r0 view_parent) r0))
		(vp-pop r0)
		(f-jmp 'view 'dirty_all '(r0))
	(endif)
	(vp-ret)

(def-func-end)
