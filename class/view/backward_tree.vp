(import 'inc/func.inc)
(import 'inc/gui.inc)
(import 'class/class_view.inc)

(def-func 'class/view/backward_tree)
	;inputs
	;r0 = view object
	;r1 = user data pointer
	;r2 = down callback
	;r3 = up callback
	;outputs
	;r0 = view object
	;trashes
	;dependant on callbacks
		;callback api
		;inputs
		;r0 = view object
		;r1 = user data pointer
		;outputs
		;r0 = view object
		;r1 = 0 if should not decend after down callback

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_data)
		(ptr 'local_down)
		(ptr 'local_up)
	(def-struct-end)

	(vp-sub-cr local_size r4)
	(vp-cpy-ri r0 r4 local_inst)
	(vp-cpy-ri r1 r4 local_data)
	(vp-cpy-ri r2 r4 local_down)
	(vp-cpy-ri r3 r4 local_up)
	(vp-cpy-rr r0 r1)
	(loop-start)
	(vp-label 'down_loop_ctx)
		(vp-cpy-rr r1 r0)

		;down callback
		(vp-cpy-ir r4 local_data r1)
		(vp-call-i r4 local_down)
		(breakif '(r1 == 0))

		;down to child
		lh-get-tail r0 + view_list, r1
		(vp-sub-cr view_node r1)

		ln-get-pred r1 + view_node, r2
	(loop-until '(r2 == 0))
	(loop-start)
		;up callback
		(vp-cpy-ir r4 local_data r1)
		(vp-call-i r4 local_up)

		;back at root ?
		(breakif '(r0 == (r4 local_inst)))

		;across to sibling
		ln-get-pred r0 + view_node, r1
		(vp-sub-cr view_node r1)

		ln-get-pred r1 + view_node, r2
		(vp-jmpif '(r2 != 0) 'down_loop_ctx)

		;up to parent
		(vp-cpy-ir r0 view_parent r0)
	(loop-end)

	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)
