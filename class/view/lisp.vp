(import 'sys/func.inc)
(import 'class/view/class.inc)
(import 'class/integer/class.inc)
(import 'class/string/class.inc)
(import 'class/lisp/class.inc)

(def-method 'view 'lisp_event)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(f-entry 'view 'lisp_event {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 2} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(v-call 'view 'event {arg0, &arg1->string_data})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_event {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-event view str)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view 'string))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_layout)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0)

	(push-scope)
	(f-entry 'view 'lisp_layout {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 1} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(v-call 'view 'layout {arg0})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_layout {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-layout view)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_find_id)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(f-entry 'view 'lisp_find_id {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 2} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'find_id {arg0, arg1} {_, arg0})
	(vpifnot {arg0})
		(assign {this->lisp_sym_nil} {arg0})
	(endif)
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_find_id {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-find-id view id)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_sub)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0)

	(push-scope)
	(f-entry 'view 'lisp_sub {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 1} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'sub {arg0})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_sub {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-sub view)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_add_child)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(f-entry 'view 'lisp_add_child {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 2} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(v-call 'view 'add_child {arg0, arg1})
	(f-call 'obj 'ref {arg1})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_add_child {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-add-child view view)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view 'view))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_add_front)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(f-entry 'view 'lisp_add_front {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 2} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'add_front {arg0, arg1})
	(f-call 'obj 'ref {arg1})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_add_front {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-add-front view view)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view 'view))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_add_back)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(f-entry 'view 'lisp_add_back {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 2} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'add_back {arg0, arg1})
	(f-call 'obj 'ref {arg1})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_add_back {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-add-back view view)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view 'view))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_pref_size)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2)

	(push-scope)
	(f-entry 'view 'lisp_pref_size {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 1} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(v-call 'view 'pref_size {arg0} {_, arg1, arg2})
	(f-call 'vector 'create nil {value})
	(f-call 'integer 'create {arg1} {arg1})
	(f-call 'integer 'create {arg2} {arg2})
	(f-call 'vector 'push_back {value, arg1})
	(f-call 'vector 'push_back {value, arg2})

(vp-label 'exit)
	(f-exit 'view 'lisp_pref_size {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-pref-size view)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_change)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4)

	(push-scope)
	(f-entry 'view 'lisp_change {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 5} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'change {arg0, arg1, arg2, arg3, arg4})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_change {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-change view x y w h)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_set_bounds)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4)

	(push-scope)
	(f-entry 'view 'lisp_set_bounds {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 5} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'set_bounds {arg0, arg1, arg2, arg3, arg4})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_set_bounds {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-set-bounds view x y w h)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_get_bounds)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4)

	(push-scope)
	(f-entry 'view 'lisp_get_bounds {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 1} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'get_bounds {arg0} {_, arg1, arg2, arg3, arg4})
	(f-call 'vector 'create nil {value})
	(f-call 'integer 'create {arg1} {arg1})
	(f-call 'integer 'create {arg2} {arg2})
	(f-call 'integer 'create {arg3} {arg3})
	(f-call 'integer 'create {arg4} {arg4})
	(f-call 'vector 'push_back {value, arg1})
	(f-call 'vector 'push_back {value, arg2})
	(f-call 'vector 'push_back {value, arg3})
	(f-call 'vector 'push_back {value, arg4})

(vp-label 'exit)
	(f-exit 'view 'lisp_get_bounds {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-get-bounds view)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_add_opaque)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4)

	(push-scope)
	(f-entry 'view 'lisp_add_opaque {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 5} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'add_opaque {arg0, arg1, arg2, arg3, arg4})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_add_opaque {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-add-opaque view x y w h)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_sub_opaque)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4)

	(push-scope)
	(f-entry 'view 'lisp_sub_opaque {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 5} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'sub_opaque {arg0, arg1, arg2, arg3, arg4})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_sub_opaque {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-sub-opaque view x y w h)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_opaque)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 )

	(push-scope)
	(f-entry 'view 'lisp_opaque {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 1} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'opaque {arg0})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_opaque {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-opaque view)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_add_dirty)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4)

	(push-scope)
	(f-entry 'view 'lisp_add_dirty {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 5} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'add_dirty {arg0, arg1, arg2, arg3, arg4})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_add_dirty {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-add-dirty view x y w h)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_dirty)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0)

	(push-scope)
	(f-entry 'view 'lisp_dirty {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 1} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'dirty {arg0})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_dirty {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-dirty view)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view))

	(pop-scope-syms)

(def-func-end)

(def-method 'view 'lisp_dirty_all)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0)

	(push-scope)
	(f-entry 'view 'lisp_dirty_all {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 1} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'view 'dirty_all {arg0})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'view 'lisp_dirty_all {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(view-dirty-all view)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'view))

	(pop-scope-syms)

(def-func-end)
