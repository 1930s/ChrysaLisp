(import 'inc/func.inc)
(import 'class/class_view.inc)

(def-func 'class/view/hit_tree)
	;inputs
	;r0 = view object
	;r8 = x
	;r9 = y
	;outputs
	;r0 = view object
	;r1 = 0 if not hit, else hit view
	;r8 = x relative to hit
	;r9 = y relative to hit
	;trashes
	;r1-r3

	(def-struct 'local)
		(ptr 'local_inst)
		(ptr 'local_hit)
		(ptr 'local_jump)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(vp-cpy-ri r0 r4 local_inst)
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 r4 local_hit)
	(vp-lea-p 'early_ret r1)
	(vp-cpy-ri r1 r4 local_jump)

	;iterate through views front to back
	(f-call 'view 'forward_tree '(r0 r4 ($ hit_down_callback) ($ hit_up_callback)))

(vp-label 'early_ret)
	(vp-cpy-ir r4 local_inst r0)
	(vp-cpy-ir r4 local_hit r1)
	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'hit_down_callback)
	(vp-sub-ir r0 view_x r8)
	(vp-sub-ir r0 view_y r9)
	(vp-cpy-ir r0 view_flags r1)
	(vp-and-cr view_flag_solid r1)
	(vp-ret)

(vp-label 'hit_up_callback)
	(vp-cpy-rr r1 r2)
	(v-call 'view 'hit '(r0 r8 r9) '(r1))
	(vpif '(r1 != 0))
		;early exit back to caller !
		(vp-cpy-rr r2 r4)
		(vp-cpy-ri r0 r2 local_hit)
		(vp-jmp-i r2 local_jump)
	(endif)
	(vp-add-ir r0 view_x r8)
	(vp-add-ir r0 view_y r9)
	(vp-ret)

(def-func-end)
