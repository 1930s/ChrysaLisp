(import 'inc/func.inc)
(import 'class/pair/pair.inc)

(class-macro-new 'pair)

(def-func 'class/pair/create)
	;inputs
	;r0 = first object
	;r1 = second object
	;outputs
	;r0 = 0 if error, else object
	;trashes
	;r1-r3, r5-r7

	;save data
	(vp-cpy-rr r0 r6)
	(vp-cpy-rr r1 r7)

	;create new string object
	(f-call 'pair 'new '() '(r0))
	(vpif '(r0 != 0))
		;init the object
		(f-path 'class 'pair)
		(f-call 'pair 'init `(r0 (@ ,_function_) r6 r7) '(r1))
		(vpif '(r1 == 0))
			;error with init
			(v-call 'pair 'delete '(r0) '() 'r1)
			(vp-xor-rr r0 r0)
		(endif)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'class/pair/init)
	;inputs
	;r0 = pair object
	;r1 = vtable pointer
	;r2 = first object
	;r3 = second object
	;outputs
	;r1 = 0 if error, else ok

	;save inputs
	(vp-cpy-ri r2 r0 pair_first)
	(vp-cpy-ri r3 r0 pair_second)

	;init parent
	(s-jmp 'pair 'init '(r0 r1))

(def-func-end)

(def-func 'class/pair/deinit)
	;inputs
	;r0 = pair object
	;trashes
	;all but r0, r4

	(vp-push r0)
	(f-call 'ref 'deref '((r0 pair_first)))
	(vp-cpy-ir r4 0 r0)
	(f-call 'ref 'deref '((r0 pair_second)))
	(vp-pop r0)
	(s-jmp 'pair 'deinit '(r0))

(def-func-end)

(def-func 'class/pair/get_length)
	;inputs
	;r0 = pair object
	;outputs
	;r0 = pair object
	;r1 = pair length

	(class/pair/get_length)
	(vp-ret)

(def-func-end)

(def-func 'class/pair/ref_element)
	;inputs
	;r0 = pair object
	;r1 = pair element
	;outputs
	;r0 = pair object
	;r1 = object
	;trashes
	;r2

	(vp-cpy-rr r0 r2)
	(vp-add-cr pair_first r0)
	(vp-shl-cr (pow2 ptr_size) r1)
	(vp-add-rr r1 r0)
	(f-call 'ref 'ref '((r0 0)))
	(vp-cpy-rr r0 r1)
	(vp-cpy-rr r2 r0)
	(vp-ret)

(def-func-end)

(def-func 'class/pair/ref_first)
	;inputs
	;r0 = pair object
	;outputs
	;r0 = pair object
	;r1 = object pointer
	;trashes
	;r2

	(vp-cpy-rr r0 r2)
	(f-call 'ref 'ref '((r0 pair_first)))
	(vp-cpy-rr r0 r1)
	(vp-cpy-rr r2 r0)
	(vp-ret)

(def-func-end)

(def-func 'class/pair/ref_second)
	;inputs
	;r0 = pair object
	;outputs
	;r0 = pair object
	;r1 = object pointer
	;trashes
	;r2

	(vp-cpy-rr r0 r2)
	(f-call 'ref 'ref '((r0 pair_second)))
	(vp-cpy-rr r0 r1)
	(vp-cpy-rr r2 r0)
	(vp-ret)

(def-func-end)

(def-func 'class/pair/slice)
	;inputs
	;r0 = pair object
	;r1 = pair element start
	;r2 = pair element end
	;outputs
	;r0 = pair object
	;r1 = slice pair object

	(f-call 'pair 'ref '(r0))
	(vp-cpy-rr r0 r1)
	(vp-ret)

(def-func-end)

(def-func 'class/pair/set_first)
	;inputs
	;r0 = pair object
	;r1 = object pointer
	;outputs
	;r0 = pair object
	;trashs
	;all but r0, r4

	(vp-push r0)
	(vp-cpy-ir r0 pair_first r2)
	(vp-cpy-ri r1 r0 pair_first)
	(f-call 'ref 'deref '(r2))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/pair/set_second)
	;inputs
	;r0 = pair object
	;r1 = object pointer
	;outputs
	;r0 = pair object
	;trashs
	;all but r0, r4

	(vp-push r0)
	(vp-cpy-ir r0 pair_second r2)
	(vp-cpy-ri r1 r0 pair_second)
	(f-call 'ref 'deref '(r2))
	(vp-pop r0)
	(vp-ret)

(def-func-end)
