(import 'sys/func.inc)
(import 'class/font/font.inc)
(import 'class/symbol/symbol.inc)
(import 'class/vector/vector.inc)
(import 'class/hash_map/hash_map.inc)
(import 'class/pair/pair.inc)
(import 'gui/sdl2.inc)

(gen-new 'font)
(gen-create 'font)
(gen-class 'font)

(def-func 'class/font/open)
	;r0 = name string pointer
	;r1 = font size
	;outputs
	;r0 = 0 if error, else font object
	;trashes
	;all

	(ptr 'this 'name 'set)
	(union
		'(pptr 'iter)
		'(uint 'points))

	(push-scope)
	(f-entry 'font 'open {name, points})

	(assign {ptr($fonts)} {set})
	(vpifnot {set})
		;note only 1 bucket, so no hash method is needed !
		(f-call 'hash_set 'create {$key_callback, 1} {set})
		(assign {set} {ptr($fonts)})
	(endif)

	;intern font
	(f-call 'font 'create {name, points} {this})
	(vpif {this})
		(f-call 'hash_set 'insert {set, this} {_, iter, _})
		(f-call 'font 'deref {this})
		(f-call 'font 'ref {*iter} {this})
	(endif)

	(f-exit 'font 'open {this})
	(pop-scope)
	(return)

(vp-label 'key_callback)
	;inputs
	;r0 = element 1
	;r1 = element 2
	;outputs
	;r1 = 0 if same, else +/-

	(ptr 'elem1 'elem2)

	(push-scope)
	(f-entry 'hash_set 'key_callback {elem1, elem2})
	(f-exit 'hash_set 'key_callback {0,
		!((elem1->font_name == elem2->font_name) && (elem1->font_points == elem2->font_points))})
	(pop-scope)
	(return)

;;;;;;;;;;;;;;;;;
; interned fonts
;;;;;;;;;;;;;;;;;

	(vp-align ptr_size)
(vp-label 'fonts)
	(vp-long 0)

(def-func-end)

(def-func 'class/font/init)
	;inputs
	;r0 = font object
	;r1 = vtable pointer
	;r2 = name string pointer
	;r3 = font size
	;outputs
	;r0 = font object
	;r1 = 0 if error, else ok
	;trashes
	;all but r0

	(ptr 'this 'vtable 'name)
	(ulong 'ok)
	(uint 'points)

	(push-scope)
	(f-entry 'font 'init {this, vtable, name, points})

	;init parent
	(s-call 'font 'init {this, vtable} {_, ok})
	(vpif {ok})
		;init state
		(assign {points} {this->font_points})
		(f-call 'symbol 'intern_cstr {name} {this->font_name})
		(f-call 'hash_map 'create (cat {@} (f-path 'symbol 'same) {, 61}) {this->font_word_map})

		;kernel callback for open
		(f-call 'sys_task 'callback {$open_callback, this})
		(vpifnot {this->font_handle})
			(f-call 'string 'deref {this->font_name})
			(f-call 'hash_map 'deref {this->font_word_map})
			(assign {0} {ok})
		(endif)
	(endif)

	(f-exit 'font 'init {this, ok})
	(pop-scope)
	(return)

(vp-label 'open_callback)
	;inputs
	;r0 = user data

	(ptr 'user 'old_stack)

	;align stack
	(vp-cpy-rr rsp r1)
	(push-scope)
	(vp-and-cr -16 rsp)
	(l-entry {user, old_stack})

	(sdl-call 'sdl 'ttf_open_font {&user->font_name->string_data, user->font_points} {user->font_handle})
	(vpif {user->font_handle})
		;fill in ascent, descent and height
		(sdl-call 'sdl 'ttf_font_ascent {user->font_handle} {user->font_ascent})
		(sdl-call 'sdl 'ttf_font_descent {user->font_handle} {user->font_descent})
		(sdl-call 'sdl 'ttf_font_height {user->font_handle} {user->font_height})
	(endif)

	(assign {old_stack} '(rsp))
	(pop-scope-syms)
	(return)

(def-func-end)

(def-func 'class/font/deinit)
	;inputs
	;r0 = font object
	;trashes
	;all but r0

	(ptr 'this)

	(push-scope)
	(f-entry 'font 'deinit {this})

	(f-call 'sys_task 'callback {$close_callback, this})
	(f-call 'string 'deref {this->font_name})
	(f-call 'hash_map 'deref {this->font_word_map})

	(f-exit 'font 'deinit {this})
	(pop-scope)
	(s-jmp 'font 'deinit '(r0))

(vp-label 'close_callback)
	;inputs
	;r0 = user data

	(ptr 'user 'old_stack)

	;align stack
	(vp-cpy-rr rsp r1)
	(push-scope)
	(vp-and-cr -16 rsp)
	(l-entry {user, old_stack})

	(f-call 'hash_map 'for_each {user->font_word_map, $callback, user})
	(f-call 'hash_map 'clear {user->font_word_map})
	(sdl-call 'sdl 'ttf_close_font {user->font_handle})

	(assign {old_stack} '(rsp))
	(pop-scope-syms)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(def-struct 'local)
		(ptr 'old_stack)
	(def-struct-end)

	(vp-cpy-rr rsp r2)
	(vp-alloc local_size)
	(vp-and-cr -16 rsp)
	(vp-cpy-ri r2 rsp local_old_stack)

	(f-entry 'array 'each_callback '(r0 r1))

	(f-call 'array 'get_first '((r1 0)) '(_ r0))
	(sdl-call 'sdl 'sdl_destroy_texture '(r0))

	(f-exit 'array 'each_callback '(1))
	(vp-cpy-ir rsp local_old_stack rsp)
	(vp-ret)

(def-func-end)

(def-func 'class/font/get_word)
	;inputs
	;r0 = font object
	;r1 = string object
	;outputs
	;r0 = font object
	;r1 = 0 if error, word texture handle
	;r2 = 0 if error, else width
	;r3 = 0 if error, else height
	;trashes
	;all but r0

	(def-struct 'local)
		(ptr 'this 'word 'array)
	(def-struct-end)

	(ptr 'this 'word 'array)

	(union
		'(pptr 'iter 'bucket)
		'(uint 'width 'height))

	(push-scope)
	(f-entry 'font 'get_word {this, word})

	;look up string in word map
	(f-call 'hash_map 'find {this->font_word_map, word} {_, iter, bucket})
	(vpifnot {iter})
		;add new entry, not using insert as that does another find
		(f-call 'array 'create {} {array})
		(f-call 'array 'set_capacity {array, 3})
		(d-call 'array 'set_element {array, 0, 0})
		(d-call 'array 'set_element {array, 0, 1})
		(d-call 'array 'set_element {array, 0, 2})
		(f-call 'symbol 'ref {word})
		(f-call 'pair 'create {word, array} {iter})
		(f-call 'vector 'push_back {bucket, iter})

		;kernel callback for word texture creation
		(f-call 'sys_task 'callback {$word_callback, &this})
	(else)
		(f-call 'pair 'get_second {*iter} {_, array})
	(endif)

	(f-call 'array 'get_first {array} {_, word})
	(f-call 'array 'get_second {array} {_, width})
	(f-call 'array 'get_third {array} {_, height})

	(f-exit 'font 'get_word {this, word, width, height})
	(pop-scope)
	(return)

(vp-label 'word_callback)
	;inputs
	;r0 = user data

	(ptr 'user 'surface 'old_stack)
	(union
		'(ptr 'statics)
		'(ulong 'texture))

	;align stack
	(vp-cpy-rr rsp r1)
	(push-scope)
	(vp-and-cr -16 rsp)
	(l-entry {user, old_stack})

	(sdl-call 'sdl 'ttf_render_utf8_blended {user->local_this->font_handle, user->local_word->string_data, 0xffffff} {surface})
	(vpif {surface})
		;create word texture
		(assign (cat {@} (f-path 'gui_gui 'statics)) {statics})
		(sdl-call 'sdl 'sdl_create_texture_from_surface {statics->gui_statics_renderer, surface} {texture})
		(vpif {texture})
			;texture blend mode and save details
			(sdl-call 'sdl 'sdl_set_texture_blend_mode {texture, SDL_BLENDMODE_BLEND})
			(d-call 'array 'set_element {user->local_array, texture, 0})
			(d-call 'array 'set_element {user->local_array, surface->sdl_surface_w, 1})
			(d-call 'array 'set_element {user->local_array, surface->sdl_surface_h, 2})
		(endif)
		(sdl-call 'sdl 'sdl_free_surface {surface})
	(endif)

	(assign {old_stack} '(rsp))
	(pop-scope-syms)
	(return)

(def-func-end)
