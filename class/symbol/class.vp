(import 'sys/func.inc)
(import 'class/symbol/class.inc)
(import 'class/hash_set/class.inc)

(gen-class 'symbol)

(def-method 'symbol 'intern)
	;inputs
	;r0 = symbol object (ptr)
	;outputs
	;r0 = interned symbol object (ptr)
	;trashes
	;all

	(def-struct 'local)
		(ptr 'this)
		(pptr 'iter)
	(def-struct-end)

	(vp-alloc local_size)
	(entry 'symbol 'intern '((rsp local_this)))

	(assign '(($ symbols)) '(r0))
	(vp-cpy-ir r0 0 r0)
	(vpif '(r0 == 0))
		(call 'hash_set 'create `((@ ,(f-path 'symbol 'same)) 101) '(r0))
		(assign '(($ symbols)) '(r1))
		(assign '(r0) '((r1 0)))
	(endif)

	(call 'hash_set 'insert '(r0 (rsp local_this)) '(_ (rsp local_iter) _))
	(call 'obj 'deref '((rsp local_this)))
	(vp-cpy-ir rsp local_iter r0)
	(call 'obj 'ref '((r0 0)) '(r0))
	(assign `((@ ,(f-path 'symbol 'vtable))) '(r1))
	(vp-cpy-ri 'r1 r0 obj_vtable)

	(exit 'symbol 'intern '(r0))
	(vp-free local_size)
	(vp-ret)

;;;;;;;;;;;;;;;;;;
; interned symbols
;;;;;;;;;;;;;;;;;;

	(vp-align ptr_size)
(vp-label 'symbols)
	(vp-long 0)

(def-func-end)

(def-method 'symbol 'intern_cstr)
	;inputs
	;r0 = c string (ptr)
	;outputs
	;r0 = interned symbol object (ptr)
	;trashes
	;all

	(entry 'symbol 'intern_cstr '(r0))
	(call 'symbol 'create_from_cstr '(r0) '(r0))
	(jump 'symbol 'intern '(r0))

(def-func-end)
