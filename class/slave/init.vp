(import 'inc/func.inc)
(import 'class/class_stream_msg_out.inc)
(import 'class/class_stream_msg_in.inc)
(import 'class/class_slave.inc)

(def-func 'class/slave/init)
	;inputs
	;r0 = slave object
	;r1 = vtable pointer
	;outputs
	;r1 = 0 if error, else ok
	;trashes
	;all but r0, r4

	(const 'space_char (ascii " "))

	(ptr 'inst 'vtable 'stream 'msg 'mymailbox)
	(ulong 'error)

	;read init args
	(push-scope)
	(retire '(r0 r1) {inst, vtable})

	;init parent
	(super-call 'slave 'init {inst, vtable} {error})
	(vpif {error != 0})
		;init myself
		(func-call 'sys_task 'mailbox {} {mymailbox, _})
		(func-call 'sys_mail 'read {mymailbox} {msg})
		(vpif {msg -> msg_length != msg_header_size})
			;create stdin, stdout, stderr
			(func-call 'stream_msg_in 'create {mymailbox} {inst -> slave_stdin})
			(func-call 'stream_msg_out 'create {msg -> slave_mail_init_stdout_id . id_mbox, msg -> slave_mail_init_stdout_id . id_cpu} {inst -> slave_stdout})
			(func-call 'stream_msg_out 'create {msg -> slave_mail_init_stderr_id . id_mbox, msg -> slave_mail_init_stderr_id . id_cpu} {inst -> slave_stderr})

			;create args
			(func-call 'stream 'create {0, 0, & msg -> slave_mail_init_args, msg -> msg_length - slave_mail_init_size} {stream})
			(func-call 'stream 'split {stream, space_char} {inst -> slave_args})
			(func-call 'stream 'deref {stream})

			;send back ack
			(assign {msg -> slave_mail_init_ack_id . id_mbox} {msg -> msg_dest . id_mbox})
			(assign {msg -> slave_mail_init_ack_id . id_cpu} {msg -> msg_dest . id_cpu})
			(assign {msg_header_size} {msg -> msg_length})
			(func-call 'sys_mail 'send {msg})
		(else)
			;abort
			(func-call 'sys_mem 'free {msg})
			(assign {0} {error})
		(endif)
	(endif)

	(expr {inst, error} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
