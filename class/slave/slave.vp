(import 'sys/func.inc)
(import 'class/vector/vector.inc)
(import 'class/stream_msg_out/stream_msg_out.inc)
(import 'class/stream_msg_in/stream_msg_in.inc)
(import 'class/string/string.inc)
(import 'class/slave/slave.inc)

(gen-new 'slave)
(gen-create 'slave)
(gen-class 'slave)

(def-func 'class/slave/init)
	;inputs
	;r0 = slave object
	;r1 = vtable pointer
	;outputs
	;r1 = 0 if error, else ok
	;trashes
	;all but r0, r4

	(ptr 'this 'vtable 'stream 'msg 'mymailbox)
	(ulong 'error)

	;read init args
	(push-scope)
	(f-entry 'slave 'init {this, vtable})

	;init parent
	(s-call 'slave 'init {this, vtable} {_, error})
	(vpif {error != 0})
		;init myself
		(f-call 'sys_task 'mailbox {} {mymailbox, _})
		(f-call 'sys_mail 'read {mymailbox} {msg})
		(vpif {msg->msg_length != msg_header_size})
			;create stdin, stdout, stderr
			(f-call 'stream_msg_in 'create {mymailbox} {this->slave_stdin})
			(f-call 'stream_msg_out 'create {msg->slave_mail_init_stdout_id.id_mbox, msg->slave_mail_init_stdout_id.id_cpu} {this->slave_stdout})
			(f-call 'stream_msg_out 'create {msg->slave_mail_init_stderr_id.id_mbox, msg->slave_mail_init_stderr_id.id_cpu} {this->slave_stderr})

			;create args
			(f-call 'stream 'create {0, 0, &msg->slave_mail_init_args, msg->msg_length - slave_mail_init_size} {stream})
			(f-call 'stream 'split {stream, char_space} {_, this->slave_args})
			(f-call 'stream 'deref {stream})

			;send back ack
			(assign {msg->slave_mail_init_ack_id.id_mbox} {msg->msg_dest.id_mbox})
			(assign {msg->slave_mail_init_ack_id.id_cpu} {msg->msg_dest.id_cpu})
			(assign {msg_header_size} {msg->msg_length})
			(f-call 'sys_mail 'send {msg})
		(else)
			;abort
			(f-call 'sys_mem 'free {msg})
			(assign {0} {error})
		(endif)
	(endif)

	(f-exit 'slave 'init {this, error})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'class/slave/deinit)
	;inputs
	;r0 = slave object
	;trashes
	;all but r0, r4

	(ptr 'this 'msg)

	(push-scope)
	(f-entry 'slave 'deinit {this})

	;flush remaining
	(v-call 'stream_msg_out 'write_flush {this->slave_stderr})
	(v-call 'stream_msg_out 'write_flush {this->slave_stdout})

	;send stopping on stdout
	(f-call 'stream_msg_out 'set_state {this->slave_stdout, stream_mail_state_stopping})
	(v-call 'stream_msg_out 'write_next {this->slave_stdout})
	(v-call 'stream_msg_out 'write_flush {this->slave_stdout})

	;wait for stopped
	(loop-start)
		(v-call 'stream_msg_in 'read_next {this->slave_stdin})
	(loop-until {this->slave_stdin->stream_msg_in_state == stream_mail_state_stopped})

	;send stopped on stdout and stderr
	(f-call 'stream_msg_out 'set_state {this->slave_stdout, stream_mail_state_stopped})
	(f-call 'stream_msg_out 'set_state {this->slave_stderr, stream_mail_state_stopped})
	(v-call 'stream_msg_out 'write_next {this->slave_stdout})
	(v-call 'stream_msg_out 'write_flush {this->slave_stdout})
	(v-call 'stream_msg_out 'write_next {this->slave_stderr})
	(v-call 'stream_msg_out 'write_flush {this->slave_stderr})

	;free stdin, stdout and stderr
	(f-call 'stream_msg_in 'deref {this->slave_stdin})
	(f-call 'stream_msg_out 'deref {this->slave_stdout})
	(f-call 'stream_msg_out 'deref {this->slave_stderr})

	;free args
	(f-call 'vector 'deref {this->slave_args})

	;deinit parent
	(assign {this} '(r0))
	(pop-scope)
	(s-jmp 'slave 'deinit '(r0))

(def-func-end)
