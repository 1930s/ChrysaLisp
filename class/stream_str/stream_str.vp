(import 'inc/func.inc)
(import 'class/string/string.inc)
(import 'class/stream_str/stream_str.inc)

(class-macro-new 'stream_str)
(class-macro-create 'stream_str 1)

(def-func 'class/stream_str/init)
	;inputs
	;r0 = stream_str object
	;r1 = vtable pointer
	;r2 = string object
	;outputs
	;r1 = 0 if error, else ok
	;trashes
	;all but r0, r4

	;init parent
	(s-jmp 'stream_str 'init '(r0 r1 r2 0 (& r2 string_data) (r2 string_length)))

(def-func-end)

(def-func 'class/stream_str/ref_string)
	;inputs
	;r0 = stream_str object
	;outputs
	;r0 = stream_str object
	;r1 = string object
	;trashes
	;r2

	(vp-push r0)
	(vp-xor-rr r2 r2)
	(vp-cpy-ir r0 stream_bufp r1)
	(vp-cpy-ri-b r2 r1 0)
	(vp-cpy-ir r0 stream_object r0)
	(vp-cpy-ri r2 r0 string_hashcode)
	(vp-lea-i r0 string_data r2)
	(vp-sub-rr r2 r1)
	(vp-cpy-ri r1 r0 string_length)
	(f-call 'string 'ref '(r0))
	(vp-cpy-rr r0 r1)
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'class/stream_str/write_next)
	;inputs
	;r0 = stream_str object
	;outputs
	;r0 = stream_str object
	;trashes
	;all but r0, r4

	(ptr 'inst 'new_str)
	(uint 'length 'new_length)

	(push-scope)
	(assign '(r0) {inst})

	(assign {inst->stream_bufp - inst->stream_object} {length})
	(f-call 'sys_mem 'alloc {length * 2} {new_str, new_length})
	(f-call 'sys_mem 'copy {inst->stream_object, new_str, length} {_, inst->stream_bufp})
	(assign {new_str + new_length - 1} {inst->stream_bufe})
	(assign {1} {new_str->ref_count})
	(f-call 'string 'deref {inst->stream_object})
	(assign {new_str} {inst->stream_object})

	(assign {inst} '(r0))
	(pop-scope)
	(return)

(def-func-end)
