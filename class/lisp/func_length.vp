(import 'sys/func.inc)
(import 'class/integer/integer.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_length)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'value)
	(union
		'(ptr 'args)
		'(uint 'length))

	(push-scope)
	(f-entry 'lisp 'func_length {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 1} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'vector 'get_first {args} {_, args})
	(v-call 'sequence 'get_length {args} {_, length})
	(f-call 'integer 'create {length} {value})

(vp-label 'exit)
	(f-exit 'lisp 'func_length {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(length seq)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'sequence))

	(pop-scope-syms)

(def-func-end)
