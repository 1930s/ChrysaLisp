(import 'inc/func.inc)
(import 'class/string/string.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_cmp)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'value 'arg1)
	(union
		'(pptr 'iter_begin)
		'(ptr 'args)
		'(ptr 'arg2)
		'(int 'result))

	(push-scope)
	(f-entry 'lisp 'func_cmp {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 2} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size]} {arg1, arg2})
	(f-call 'boxed_long 'create {} {value})
	(vpif {arg1 != arg2})
		(f-call 'string 'compare {arg1, arg2} {_, result})
		(f-call 'boxed_long 'set_value {value, result})
	(endif)

(vp-label 'exit)
	(f-exit 'lisp 'func_cmp {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(cmp str str)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'string 'string))

	(pop-scope-syms)

(def-func-end)
