(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_not)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_not {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 1} 'error)
	(f-call 'vector 'get_element {args, 0} {_, args})
	(vpif {args == this->lisp_sym_nil})
		(assign {this->lisp_sym_t} {args})
	(else)
		(assign {this->lisp_sym_nil} {args})
	(endif)
	(f-call 'ref 'ref {args} '(_))

(vp-label 'exit)
	(f-exit 'lisp 'func_not {this, args})
	(return)

(errorcases
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, "(not form) wrong number of args", args} {_, args})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
