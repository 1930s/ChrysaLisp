(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'class/master/master.inc)
(import 'class/stream_msg_out/stream_msg_out.inc)
(import 'class/error/error.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_pipe)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'pipe)
	(uint 'length 'state)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length == 1})
		(f-call 'vector 'get_element {args, 0} {pipe})
		(vpif {pipe->obj_vtable == @class/class_string || pipe->obj_vtable == @class/class_symbol})
			(f-call 'master 'create {} {value})
			(f-call 'master 'start {value, &pipe->string_data, pipe->string_length})
			(f-call 'master 'get_state {value} {state})
			(breakif {state == stream_mail_state_started})
			(f-call 'ref 'deref {value})
			(f-call 'lisp 'repl_error {this, "(pipe cmd) error creating pipe", args} {value})
		(else)
			(f-call 'lisp 'repl_error {this, "(pipe cmd) not string", args} {value})
		(endif)
	(else)
		(f-call 'lisp 'repl_error {this, "(pipe cmd) wrong number of args", args} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
