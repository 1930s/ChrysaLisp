(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'class/master/master.inc)
(import 'class/stream_msg_out/stream_msg_out.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_pipe)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'pipe)
	(uint 'length 'state)

	(push-scope)
	(f-entry 'lisp 'func_pipe {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 1} 'error1)
	(f-call 'vector 'get_element {args, 0} {_, pipe})

(errorcases
	(f-call 'obj 'inst_of (cat {pipe, @} (f-path 'class 'string)) {_, value})
	(errorifnot {value} 'error2))

	(f-call 'master 'create {} {value})
	(f-call 'master 'start {value, &pipe->string_data, pipe->string_length})
	(f-call 'master 'get_state {value} {_, state})
	(errorif {state != stream_mail_state_started} 'error3)

(vp-label 'exit)
	(f-exit 'lisp 'func_pipe {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(pipe cmd) wrong number of args"} {value})
	(goto 'error)
(vp-label 'error2)
	(assign {"(pipe cmd) not string"} {value})
	(goto 'error)
(vp-label 'error3)
	(f-call 'ref 'deref {value})
	(assign {"(pipe cmd) error creating pipe"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
