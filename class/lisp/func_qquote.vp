(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_qquote)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_cat_list)
	(def-struct-end)

	(ptr 'this 'cat_list 'args 'value)
	(ulong 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length == 1})
		(f-call 'vector 'get_element {args, 0} {args})
		(switch)
		(case {args->obj_vtable == @class/class_vector})
			(f-call 'vector 'create {} {cat_list})
			(assign {this->lisp_sym_cat} {value})
			(f-call 'ref 'ref {value})
			(f-call 'vector 'push_back {cat_list, value})
			(d-call 'vector 'get_length {args} {length})
			(f-call 'vector 'for_each {args, 0, length, $callback, &this} {_})
			(f-call 'lisp 'repl_eval {this, cat_list} {value})
			(f-call 'ref 'deref {cat_list})
			(break)
		(default)
			(assign {args} {value})
			(f-call 'ref 'ref {value})
		(endswitch)
	(else)
		(f-call 'error 'create {"(quasi-quote arg) wrong number of args", args} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata 'elem 'list 'sym 'quote_list)
	(ulong 'length)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(assign {*iter} {elem})
	(vpif {elem->obj_vtable == @class/class_vector})
		(d-call 'vector 'get_length {elem} {length})
		(gotoifnot {length} 'list_quote)
		(f-call 'vector 'get_element {elem, 0} {sym})
		(switch)
		(case {sym == pdata->pdata_this->lisp_sym_unquote})
			(f-call 'vector 'create {} {list})
			(assign {pdata->pdata_this->lisp_sym_list} {sym})
			(f-call 'ref 'ref {sym})
			(f-call 'vector 'push_back {list, sym})
			(d-call 'vector 'ref_element {elem, 1} {quote_list})
			(f-call 'vector 'push_back {list, quote_list})
			(break)
		(case {sym == pdata->pdata_this->lisp_sym_splicing})
			(d-call 'vector 'ref_element {elem, 1} {list})
			(break)
		(default)
			(struct 'pdata1 'pdata)
			(push-scope)
			(assign {pdata->pdata_this} {pdata1.pdata_this})
			(f-call 'vector 'create {} {pdata1.pdata_cat_list})
			(assign {pdata->pdata_this->lisp_sym_cat} {sym})
			(f-call 'ref 'ref {sym})
			(f-call 'vector 'push_back {pdata1.pdata_cat_list, sym})
			(f-call 'vector 'for_each {elem, 0, length, $callback, & pdata1} {_})
			(f-call 'lisp 'repl_eval {pdata->pdata_this, pdata1.pdata_cat_list} {elem})
			(f-call 'ref 'deref {pdata1.pdata_cat_list})
			(pop-scope)
			(gotoif {elem)} 'list_quote1)
			(assign {0} '(r1))
			(return)
		(endswitch)
	(else)
	(vp-label 'list_quote)
		(f-call 'ref 'ref {elem})
	(vp-label 'list_quote1)
		(f-call 'vector 'create {} {list})
		(assign {pdata->pdata_this->lisp_sym_list} {sym})
		(f-call 'ref 'ref {sym})
		(f-call 'vector 'push_back {list, sym})
		(f-call 'vector 'create {} {quote_list})
		(assign {pdata->pdata_this->lisp_sym_quote} {sym})
		(f-call 'ref 'ref {sym})
		(f-call 'vector 'push_back {quote_list, sym})
		(f-call 'vector 'push_back {quote_list, elem})
		(f-call 'vector 'push_back {list, quote_list})
	(endif)
	(f-call 'vector 'push_back {pdata->pdata_cat_list, list})

	(assign {1} '(r1))
	(pop-scope)
	(return)

(def-func-end)
