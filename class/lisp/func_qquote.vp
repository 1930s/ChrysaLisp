(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_qquote)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'local)
		(ptr 'this)
		(ptr 'cat_list)
	(def-struct-end)

	(ptr 'this 'cat_list 'args 'value)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_qquote {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 1} 'error)
	(f-call 'vector 'get_element {args, 0} {_, args})
	(vpif (cat {args->obj_vtable == @} (f-path 'class 'vector)))
		(f-call 'vector 'create {} {cat_list})
		(assign {this->lisp_sym_cat} {value})
		(f-call 'ref 'ref {value})
		(f-call 'vector 'push_back {cat_list, value})
		(d-call 'vector 'get_length {args} {_, length})
		(f-call 'vector 'for_each {args, 0, length, $callback, &this})
		(f-call 'lisp 'repl_eval {this, cat_list} {_, value})
		(f-call 'ref 'deref {cat_list})
	(else)
		(assign {args} {value})
		(f-call 'ref 'ref {value})
	(endif)

(vp-label 'exit)
	(f-exit 'lisp 'func_qquote {this, value})
	(return)

(errorcases
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, "(quasi-quote arg) wrong number of args", args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(ptr 'pdata 'elem 'list 'sym 'quote_list)
	(pptr 'iter)
	(uint 'length)

	(push-scope)
	(f-entry 'vector 'callback {pdata, iter})

	(assign {*iter} {elem})
	(vpif (cat {elem->obj_vtable == @} (f-path 'class 'vector)))
		(d-call 'vector 'get_length {elem} {_, length})
		(gotoifnot {length} 'list_quote)
		(f-call 'vector 'get_element {elem, 0} {_, sym})
		(switch)
		(case {sym == pdata->local_this->lisp_sym_unquote})
			(f-call 'vector 'create {} {list})
			(assign {pdata->local_this->lisp_sym_list} {sym})
			(f-call 'ref 'ref {sym})
			(f-call 'vector 'push_back {list, sym})
			(d-call 'vector 'ref_element {elem, 1} {_, quote_list})
			(f-call 'vector 'push_back {list, quote_list})
			(break)
		(case {sym == pdata->local_this->lisp_sym_splicing})
			(d-call 'vector 'ref_element {elem, 1} {_, list})
			(break)
		(default)
			(struct 'pdata1 'local)
			(push-scope)
			(assign {pdata->local_this} {pdata1.local_this})
			(f-call 'vector 'create {} {pdata1.local_cat_list})
			(assign {pdata->local_this->lisp_sym_cat} {sym})
			(f-call 'ref 'ref {sym})
			(f-call 'vector 'push_back {pdata1.local_cat_list, sym})
			(f-call 'vector 'for_each {elem, 0, length, $callback, &pdata1})
			(f-call 'lisp 'repl_eval {pdata->local_this, pdata1.local_cat_list} {_, elem})
			(f-call 'ref 'deref {pdata1.local_cat_list})
			(pop-scope)
			(gotoif {elem)} 'list_quote1)
			(f-exit 'vector 'callback '(0))
			(return)
		(endswitch)
	(else)
	(vp-label 'list_quote)
		(f-call 'ref 'ref {elem})
	(vp-label 'list_quote1)
		(f-call 'vector 'create {} {list})
		(assign {pdata->local_this->lisp_sym_list} {sym})
		(f-call 'ref 'ref {sym})
		(f-call 'vector 'push_back {list, sym})
		(f-call 'vector 'create {} {quote_list})
		(assign {pdata->local_this->lisp_sym_quote} {sym})
		(f-call 'ref 'ref {sym})
		(f-call 'vector 'push_back {quote_list, sym})
		(f-call 'vector 'push_back {quote_list, elem})
		(f-call 'vector 'push_back {list, quote_list})
	(endif)
	(f-call 'vector 'push_back {pdata->local_cat_list, list})

	(f-exit 'vector 'callback '(-1))
	(pop-scope)
	(return)

(def-func-end)
