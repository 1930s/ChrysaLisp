(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_boxed_long.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_sub)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value)
	(pptr 'iter)
	(long 'length 'accum)

	(push-scope)
	(retire '(r0 r1) {this, args})

	(devirt-call 'vector 'get_length {args} {length})
	(vpif {length > 1})
		(func-call 'vector 'get_element {args, 0} {value})
		(vpif {value -> obj_vtable == @class/class_boxed_long})
			(func-call 'boxed_long 'get_value {value} {accum})
			(func-call 'vector 'for_each {args, 1, length, $ callback, & accum} {iter})
			(gotoif {iter} 'error)
			(func-call 'boxed_long 'create {} {value})
			(func-call 'boxed_long 'set_value {value, accum})
		(else)
		(vp-label 'error)
			(func-call 'error 'create {"(sub val val ...) vals are not all numbers", args} {value})
		(endif)
	(else)
		(func-call 'error 'create {"(sub val val ...) not enough args", args} {value})
	(endif)

	(expr {this, value} '(r0 r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(plong 'pdata)
	(long 'val)

	(push-scope)
	(retire '(r0 r1) {pdata, iter})

	(vpif {( * iter ) -> obj_vtable == @class/class_boxed_long})
		(func-call 'boxed_long 'get_value {* iter} {val})
		(assign {* pdata - val} {* pdata})
		(expr {1} '(r1))
	(else)
		(expr {0} '(r1))
	(endif)

	(pop-scope)
	(return)

(def-func-end)
