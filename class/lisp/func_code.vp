(include 'sys/func.inc)
(include 'class/string/class.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_code)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2)
(errorcases
	(uint 'length))

	(push-scope)
	(entry 'lisp 'func_code {this, args})

(errorcases
	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length < 1 || length > 3} 'error1)
	(call 'lisp 'env_args_type {args, $sig, length})
	(errorif (list (method-return 'lisp 'env_args_type 0) '== 0) 'error2))

	(assign {1, 0, 0} {arg1, arg2, value})
	(call 'lisp 'env_args_set {args, &arg0, 0})
	(errorif {arg1 + arg2 > arg0->string_length} 'error3)
	(call 'sys_mem 'copy {&arg0->string_data + arg2, &value, ((arg1 - 1) & 7) + 1})
	(call 'integer 'create {value} {value})

(vp-label 'funcexit)
	(exit 'lisp 'func_code {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(code str [width index])", error_msg_wrong_num_of_args, args} {_, value})
	(goto 'funcexit)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(code str [width index])", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
(vp-label 'error3)
	(call 'lisp 'repl_error {this, "(code str [width index])", error_msg_not_valid_index, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'string 'integer 'integer))

	(pop-scope-syms)

(def-func-end)
