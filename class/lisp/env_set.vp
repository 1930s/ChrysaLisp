(import 'inc/func.inc)
(import 'class/pair/pair.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/env_set)
	;inputs
	;r0 = lisp object
	;r1 = symbol
	;r2 = value
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'symbol 'value)
	(pptr 'iter)

	(push-scope)
	(assign '(r0 r1 r2) {this, symbol, value})

	(f-call 'lisp 'env_find {this, symbol} {iter, _})
	(vpif {iter})
		;change existing value
		(f-call 'ref 'ref {value})
		(f-call 'ref 'ref {value})
		(f-call 'pair 'set_second {*iter, value})
	(else)
		(f-call 'lisp 'repl_error {this, "symbol not bound", symbol} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
