(import 'inc/func.inc)
(import 'class/class_stream.inc)
(import 'class/class_vector.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_repl)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(const 'char_lf 10)

	(ptr 'this 'args 'stream 'ast 'value)
	(ulong 'length 'char 'flag)

	(push-scope)
	(retire '(r0, r1) '(this, args))

	(devirt-call 'vector 'get_length '(args) '(length))
	(vpif '((length == 1)))
		(func-call 'vector 'get_element '(args, 0) '(stream))

		(func-call 'stream 'read_char '(stream) '(char))
		(loop-start)
			(virt-call 'stream 'write_flush '(this -> lisp_stdout))
			(func-call 'sys_task 'yield)
			(virt-call 'stream 'write_flush '(this -> lisp_stderr))

			(func-call 'lisp 'repl_read '(this, stream, char) '(ast, char))
			(breakif '((char == -1)))

			(vpif '((stream == this -> lisp_stdin)))
				(func-call 'stream 'write_cstr '(this -> lisp_stdout, "--Ast--"))
				(func-call 'stream 'write_char '(this -> lisp_stdout, char_lf))
				(func-call 'lisp 'repl_print '(this, this -> lisp_stdout, ast))
				(func-call 'stream 'write_char '(this -> lisp_stdout, char_lf))
				(func-call 'stream 'write_cstr '(this -> lisp_stdout, "--Macro expanding--"))
				(func-call 'stream 'write_char '(this -> lisp_stdout, char_lf))
			(endif)

			(loop-start)
				(func-call 'lisp 'repl_expand '(this, & ast) '(flag))
				(vpif '((stream == this -> lisp_stdin)))
					(func-call 'lisp 'repl_print '(this, this -> lisp_stdout, ast))
					(func-call 'stream 'write_char '(this -> lisp_stdout, 10))
				(endif)
			(loop-until '((flag)))

			(vpif '((stream == this -> lisp_stdin)))
				(func-call 'stream 'write_cstr '(this -> lisp_stdout, "--Eval--"))
				(func-call 'stream 'write_char '(this -> lisp_stdout, char_lf))
			(endif)

			(func-call 'lisp 'repl_eval '(this, ast) '(value))
			(func-call 'ref 'deref '(ast))

			(vpif '((value -> obj_vtable == @class/class_error)))
				(func-call 'lisp 'repl_print '(this, this -> lisp_stderr, value))
				(func-call 'stream 'write_char '(this -> lisp_stderr, char_lf))
			(vpelseif '((stream == this -> lisp_stdin)))
				(func-call 'lisp 'repl_print '(this, this -> lisp_stdout, value))
				(func-call 'stream 'write_char '(this -> lisp_stdout, char_lf))
			(endif)

			(func-call 'ref 'deref '(value))
		(loop-end)

		(assign '(this -> lisp_sym_t) '(value))
		(func-call 'ref 'ref '(value))
	(else)
		(func-call 'error 'create '("(repl stream) wrong number of args", args) '(value))
	(endif)

	(expr '(this, value) '(r0, r1))
	(pop-scope)
	(return)

(def-func-end)
