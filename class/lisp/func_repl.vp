(import 'inc/func.inc)
(import 'class/stream/stream.inc)
(import 'class/vector/vector.inc)
(import 'class/unordered_map/unordered_map.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_repl)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(const 'char_lf 10)

	(ptr 'this 'args 'stream 'ast 'value 'old_file 'old_line)
	(ulong 'char 'cnt)
	(uint 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length == 2})
		(f-call 'vector 'get_element {args, 0} {stream})
		(f-call 'obj 'inst_of {stream, @class/class_stream} {value})
		(vpif {value})
			(f-call 'vector 'get_element {args, 1} {value})
			(vpif {value->obj_vtable == @class/class_string || value->obj_vtable == @class/class_symbol})
				;push old file and line, set to this stream info
				(f-call 'lisp 'env_get {this, this->lisp_sym_stream_name} {old_file})
				(f-call 'lisp 'env_get {this, this->lisp_sym_stream_line} {old_line})
				(f-call 'lisp 'env_set {this, this->lisp_sym_stream_name, value} {value})
				(f-call 'ref 'deref {value})
				(f-call 'boxed_long 'create {} {value})
				(f-call 'boxed_long 'set_value {value, 1})
				(f-call 'lisp 'env_set {this, this->lisp_sym_stream_line, value} {ast})
				(f-call 'ref 'deref {value})
				(f-call 'ref 'deref {ast})

				(f-call 'stream 'read_char {stream} {char})
				(loop-start)
					(v-call 'stream 'write_flush {this->lisp_stdout})
					(v-call 'stream 'write_flush {this->lisp_stderr})

					(f-call 'lisp 'repl_read {this, stream, char} {ast, char})
					(breakif {char == -1})

					(loop-start)
						(f-call 'lisp 'repl_expand {this, &ast, 0} {cnt})
;						(f-call 'lisp 'repl_print {this, this->lisp_stdout, ast})
;						(f-call 'stream 'write_char {this->lisp_stdout, char_lf})
					(loop-untilnot {cnt})

					(f-call 'lisp 'repl_eval {this, ast} {value})
					(f-call 'ref 'deref {ast})
					(vpif {stream == this->lisp_stdin})
						(f-call 'lisp 'repl_print {this, this->lisp_stdout, value})
						(f-call 'stream 'write_char {this->lisp_stdout, char_lf})
					(endif)

					(gotoif {value->obj_vtable == @class/class_error} 'error)
					(f-call 'ref 'deref {value})
				(loop-end)

				;pop old file and line info
				(f-call 'lisp 'env_set {this, this->lisp_sym_stream_name, old_file} {value})
				(f-call 'ref 'deref {old_file})
				(f-call 'ref 'deref {value})
				(f-call 'lisp 'env_set {this, this->lisp_sym_stream_line, old_line} {value})
				(f-call 'ref 'deref {old_line})
				(f-call 'ref 'deref {value})

				(assign {this->lisp_sym_t} {value})
				(f-call 'ref 'ref {value})
			(else)
				(f-call 'lisp 'repl_error {this, "(repl stream filename) not string", args} {value})
			(endif)
		(else)
			(f-call 'lisp 'repl_error {this, "(repl stream filename) not stream", args} {value})
		(endif)
	(else)
		(f-call 'lisp 'repl_error {this, "(repl stream filename) wrong number of args", args} {value})
	(endif)

(vp-label 'error)
	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
