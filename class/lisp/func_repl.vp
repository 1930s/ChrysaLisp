(import 'inc/func.inc)
(import 'class/stream/stream.inc)
(import 'class/vector/vector.inc)
(import 'class/unordered_map/unordered_map.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)
(import 'class/string/string.inc)

(def-func 'class/lisp/func_repl)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'stream 'ast 'value 'old_file 'old_line)
	(ulong 'char 'cnt)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_repl {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 2} 'error1)
	(f-call 'vector 'get_element {args, 0} {_, stream})
	(f-call 'obj 'inst_of (cat {stream, @} (f-path 'class 'stream)) {_, value})
	(errorifnot {value} 'error2)
	(f-call 'vector 'get_element {args, 1} {_, value})
	(f-call 'obj 'inst_of (cat {value, @} (f-path 'class 'string)) {_, old_file})
	(errorifnot {old_file} 'error3)

	;push old file and line, set to this stream info
	(f-call 'lisp 'env_get {this, this->lisp_sym_stream_name} {_, old_file})
	(f-call 'lisp 'env_get {this, this->lisp_sym_stream_line} {_, old_line})
	(f-call 'lisp 'env_set {this, this->lisp_sym_stream_name, value} {_, value})
	(f-call 'ref 'deref {value} '(_))
	(f-call 'boxed_long 'create {} {value})
	(f-call 'boxed_long 'set_value {value, 1})
	(f-call 'lisp 'env_set {this, this->lisp_sym_stream_line, value} {_, ast})
	(f-call 'ref 'deref {value} '(_))
	(f-call 'ref 'deref {ast} '(_))

	(f-call 'stream 'read_char {stream} {char})
	(loop-start)
		(v-call 'stream 'write_flush {this->lisp_stdout})
		(v-call 'stream 'write_flush {this->lisp_stderr})

		(f-call 'lisp 'repl_read {this, stream, char} {_, ast, char})
		(breakif {char == -1})

		(loop-start)
			(f-call 'lisp 'repl_expand {this, &ast, 0} {_, cnt})
;			(f-call 'lisp 'repl_print {this, this->lisp_stdout, ast} '(_))
;			(f-call 'stream 'write_char {this->lisp_stdout, char_lf})
		(loop-untilnot {cnt})

		(f-call 'lisp 'repl_eval {this, ast} {_,value})
		(f-call 'ref 'deref {ast} '(_))
		(vpif {stream == this->lisp_stdin})
			(f-call 'lisp 'repl_print {this, this->lisp_stdout, value} '(_))
			(f-call 'stream 'write_char {this->lisp_stdout, char_lf})
		(endif)

		(errorif (cat {value->obj_vtable == @} (f-path 'class 'error)) 'exit)
		(f-call 'ref 'deref {value} '(_))
	(loop-end)

	;pop old file and line info
	(f-call 'lisp 'env_set {this, this->lisp_sym_stream_name, old_file} {_, value})
	(f-call 'ref 'deref {old_file} '(_))
	(f-call 'ref 'deref {value} '(_))
	(f-call 'lisp 'env_set {this, this->lisp_sym_stream_line, old_line} {_, value})
	(f-call 'ref 'deref {old_line} '(_))
	(f-call 'ref 'deref {value} '(_))

	(assign {this->lisp_sym_t} {value})
	(f-call 'ref 'ref {value} '(_))

(vp-label 'exit)
	(f-exit 'lisp 'func_repl {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(repl stream filename) wrong number of args"} {value})
	(goto 'error)
(vp-label 'error2)
	(assign {"(repl stream filename) not stream"} {value})
	(goto 'error)
(vp-label 'error3)
	(assign {"(repl stream filename) not string"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
