(import 'sys/func.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

;eq all the same

(def-method 'lisp 'func_eq)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this)
	(union
		'(ptr 'args)
		'(ptr 'value))

	(push-scope)
	(entry 'lisp 'func_eq {this, args})

(errorcases
	(call 'lisp 'env_args_type (cat {args, @} (f-path 'integer 'vtable) {, -2}) '(r1))
	(errorif '(r1 == 0) 'error1))

	(call 'vector 'get_iters {args} '(_ r1 r2))
	(vp-cpy-ir r1 0 r0)
	(vp-add-cr ptr_size r1)
	(vp-cpy-ir r0 integer_value r0)
	(loop-start)
		(vp-cpy-ir r1 0 r3)
		(vp-add-cr ptr_size r1)
		(vp-cpy-ir r3 integer_value r3)
		(gotoif '(r3 != r0) 'fail)
	(loop-until '(r1 == r2))

	(call 'obj 'ref {this->lisp_sym_t} {value})
	(exit 'lisp 'func_eq {this, value})
	(return)

(vp-label 'fail)
	(call 'obj 'ref {this->lisp_sym_nil} {value})
(vp-label 'funcexit)
	(exit 'lisp 'func_eq {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(eq num num ...)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
