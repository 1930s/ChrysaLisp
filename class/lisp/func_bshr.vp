(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_boxed_long.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_bshr)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = else value

	(ptr 'this 'args 'value 'num 'shift)
	(ulong 'length 'cnt)

	(push-scope)
	(retire '(r0, r1) '(this, args))

	(devirt-call 'vector 'get_length '(args) '(length))
	(vpif '((length == 2)))
		(func-call 'vector 'get_element '(args, 0) '(num))
		(vpif '((num -> obj_vtable == @class/class_boxed_long)))
			(func-call 'vector 'get_element '(args, 1) '(shift))
			(vpif '((shift -> obj_vtable == @class/class_boxed_long)))
				(func-call 'boxed_long 'get_value '(num) '(length))
				(func-call 'boxed_long 'get_value '(shift) '(cnt))
				(assign '(length >> cnt) '(length))
				(func-call 'boxed_long 'create '() '(value))
				(func-call 'boxed_long 'set_value '(value, length))
			(else)
				(func-call 'error 'create '("(bit-shr num cnt) not a count", args) '(value))
			(endif)
		(else)
			(func-call 'error 'create '("(bit-shr num cnt) not a number", args) '(value))
		(endif)
	(else)
		(func-call 'error 'create '("(bit-shr num cnt) wrong number of args", args) '(value))
	(endif)

	(expr '(this, value) '(r0, r1))
	(pop-scope)
	(return)

(def-func-end)
