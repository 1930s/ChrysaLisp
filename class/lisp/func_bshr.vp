(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_bshr)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = else value

	(ptr 'this 'args 'value 'num 'shift)
	(uint 'length 'cnt)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(gotoif {length != 2} 'error1)
	(f-call 'vector 'get_element {args, 0} {num})
	(gotoif (cat {num->obj_vtable != @} (f-path 'class 'boxed_long)) 'error2)
	(f-call 'vector 'get_element {args, 1} {shift})
	(gotoif (cat {shift->obj_vtable != @} (f-path 'class 'boxed_long)) 'error3)
	(f-call 'boxed_long 'get_value {num} {length})
	(f-call 'boxed_long 'get_value {shift} {cnt})
	(assign {length >> cnt} {length})
	(f-call 'boxed_long 'create {} {value})
	(f-call 'boxed_long 'set_value {value, length})

(vp-label 'exit)
	(assign {this, value} '(r0 r1))
	(return)

(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(bit-shr num cnt) wrong number of args", args} {value})
	(goto 'exit)

(vp-label 'error2)
	(f-call 'lisp 'repl_error {this, "(bit-shr num cnt) not a number", args} {value})
	(goto 'exit)

(vp-label 'error3)
	(f-call 'lisp 'repl_error {this, "(bit-shr num cnt) not a count", args} {value})
	(goto 'exit)

	(pop-scope-syms)

(def-func-end)
