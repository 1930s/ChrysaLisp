(include 'sys/func.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_bshr)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'value)
	(union
		'(pptr 'iter_begin 'args)
		'(long 'shift 'num))

	(push-scope)
	(entry 'lisp 'func_bshr {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2} {value})
	(errorifnot {value} 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(call 'integer 'get_value {iter_begin[0]} {_, num})
	(call 'integer 'get_value {iter_begin[ptr_size]} {_, shift})
	(call 'integer 'create {num >> shift} {value})

(vp-label 'funcexit)
	(exit 'lisp 'func_bshr {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(bit-shr num cnt)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'integer 'integer))

	(pop-scope-syms)

(def-func-end)
