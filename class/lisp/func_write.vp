(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_stream_str.inc)
(import 'class/class_string.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_write)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'stream)
	(long 'length)

	(push-scope)
	(retire '(r0, r1) '(this, args))

	(devirt-call 'vector 'get_length '(args) '(length))
	(vpif '((length == 2)))
		(func-call 'vector 'get_element '(args, 0) '(stream))
		(vpif '((stream -> obj_vtable == @class/class_stream_str)))
			(func-call 'vector 'get_element '(args, 1) '(value))
			(vpif '((value -> obj_vtable == @class/class_string)))
				(func-call 'ref 'ref '(value))
				(func-call 'stream_str 'write '(stream, & value -> string_data, value -> string_length))
			(else)
				(func-call 'error 'create '("(write-line stream str) not a string", args) '(value))
			(endif)
		(else)
			(func-call 'error 'create '("(write-line stream str) not a stream", args) '(value))
		(endif)
	(else)
		(func-call 'error 'create '("(write-line stream str) wrong number of args", args) '(value))
	(endif)

	(eval '(this, value) '(r0, r1))
	(pop-scope)
	return

(def-func-end)
