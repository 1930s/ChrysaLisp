(import 'sys/func.inc)
(import 'class/string/class.inc)
(import 'class/pipe/class.inc)
(import 'class/msg_in/class.inc)
(import 'class/msg_out/class.inc)
(import 'class/stream_str/class.inc)
(import 'class/lisp/class.inc)

(def-method 'lisp 'func_rpipe)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value 'pipe 'stream 'str_stream)
	(uint 'state 'index)
	(int 'char 'ready)

	(push-scope)
	(f-entry 'lisp 'func_rpipe {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 1} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'vector 'get_first {args} {_, pipe})
	(f-call 'pipe 'get_state {pipe} {_, state})
	(vpif {state == stream_mail_state_started})
		(f-call 'pipe 'select {pipe, 0} {_, index})
		(f-call 'vector 'get_element {pipe->pipe_streams, index} {_, stream})
		(f-call 'string 'create_from_buffer {0, string_gap} {value})
		(f-call 'stream_str 'create {value} {str_stream})
		(loop-start)
			(f-call 'stream 'read_char {stream} {_, char})
			(breakif {char == -1})
			(f-call 'stream 'write_char {str_stream, char})
			(v-call 'stream 'read_ready {stream} {_, ready})
		(loop-untilnot {ready})
		(vpif {char == -1})
			;EOF
			(f-call 'pipe 'set_state {pipe, stream_mail_state_stopping})
		(endif)
		(f-call 'stream_str 'ref_string {str_stream} {_, value})
		(f-call 'obj 'deref {str_stream})
	(else)
		;closed
		(f-call 'obj 'ref {this->lisp_sym_nil} {value})
	(endif)

(vp-label 'exit)
	(f-exit 'lisp 'func_rpipe {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(pipe-read pipe)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'pipe))

	(pop-scope-syms)

(def-func-end)
