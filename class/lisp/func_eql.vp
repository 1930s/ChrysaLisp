(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_string.inc)
(import 'class/class_boxed_ptr.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_eql)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'arg1 'arg2)
	(ulong 'length 'v1 'v2)

	(push-scope)
	(retire '(r0, r1) '(this, args))

	(devirt-call 'vector 'get_length '(args) '(length))
	(vpif '((length == 2)))
		(func-call 'vector 'get_element '(args, 0) '(arg1))
		(func-call 'vector 'get_element '(args, 1) '(arg2))
		(gotoif '((arg1 == arg2)) 'same)
		(assign '(this -> lisp_sym_nil) '(value))
		(switch)
		(breakif '((arg1 -> obj_vtable != arg2 -> obj_vtable)))
		(case '((arg1 -> obj_vtable == @class/class_string)))
			(func-call 'string 'compare '(arg1, arg2) '(length))
			(gotoifnot '((length)) 'same)
			(break)
		(case '((arg1 -> obj_vtable == @class/class_boxed_ptr || arg1 -> obj_vtable == @class/class_boxed_long)))
			(func-call 'boxed_ptr 'get_value '(arg1) '(v1))
			(func-call 'boxed_ptr 'get_value '(arg2) '(v2))
			(breakif '((v1 != v2)))
		(vp-label 'same)
			(assign '(this -> lisp_sym_t) '(value))
		(endswitch)
		(func-call 'ref 'ref '(value))
	(else)
		(func-call 'error 'create '("(eql form form) wrong number of args", args) '(value))
	(endif)

	(eval '(this, value) '(r0, r1))
	(pop-scope)
	(return)

(def-func-end)
