(import 'sys/func.inc)
(import 'class/string/class.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

(def-method 'lisp 'func_eql)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value 'arg1 'arg2)
	(ulong 'v1 'v2)
	(uint 'length)

	(push-scope)
	(entry 'lisp 'func_eql {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 2} 'error1)
	(call 'vector 'get_first {args} {_, arg1})
	(call 'vector 'get_second {args} {_, arg2})
	(gotoif {arg1 == arg2} 'same)
	(assign {this->lisp_sym_nil} {value})
	(switch)
	(breakif {arg1->obj_vtable != arg2->obj_vtable})
	(case (cat {arg1->obj_vtable == @} (f-path 'string 'vtable)))
		(call 'string 'same {arg1, arg2} {_, length})
		(gotoifnot {length} 'same)
		(break)
	(case (cat {arg1->obj_vtable == @} (f-path 'function 'vtable)
		{|| arg1->obj_vtable == @} (f-path 'integer 'vtable)))
		(call 'function 'get_value {arg1} {_, v1})
		(call 'function 'get_value {arg2} {_, v2})
		(breakif {v1 != v2})
	(vp-label 'same)
		(assign {this->lisp_sym_t} {value})
	(endswitch)
	(call 'obj 'ref {value})

(vp-label 'funcexit)
	(exit 'lisp 'func_eql {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(eql form form)", error_msg_wrong_num_of_args, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
