(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'class/boxed_ptr/boxed_ptr.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_eql)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'arg1 'arg2)
	(ulong 'v1 'v2)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_eql {this, args})

	(d-call 'vector 'get_length {args} {length})
	(errorif {length != 2} 'error)
	(f-call 'vector 'get_element {args, 0} {arg1})
	(f-call 'vector 'get_element {args, 1} {arg2})
	(gotoif {arg1 == arg2} 'same)
	(assign {this->lisp_sym_nil} {value})
	(switch)
	(breakif {arg1->obj_vtable != arg2->obj_vtable})
	(case (cat {arg1->obj_vtable == @} (f-path 'class 'string)))
		(f-call 'string 'same {arg1, arg2} {length})
		(gotoifnot {length} 'same)
		(break)
	(case (cat {arg1->obj_vtable == @} (f-path 'class 'boxed_ptr)
		{|| arg1->obj_vtable == @} (f-path 'class 'boxed_long)))
		(f-call 'boxed_ptr 'get_value {arg1} {v1})
		(f-call 'boxed_ptr 'get_value {arg2} {v2})
		(breakif {v1 != v2})
	(vp-label 'same)
		(assign {this->lisp_sym_t} {value})
	(endswitch)
	(f-call 'ref 'ref {value})

(vp-label 'exit)
	(f-exit 'lisp 'func_eql {this, value})
	(return)

(errorcases
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, "(eql form form) wrong number of args", args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
