(import 'inc/func.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_cond)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value)
	(pptr 'iter_begin 'iter_end 'clause_iter_begin 'clause_iter_end)

	(push-scope)
	(f-entry 'lisp 'func_cond {this, args})

	(f-call 'vector 'get_begin {args} {_, iter_begin})
	(f-call 'vector 'get_end {args} {_, iter_end})
	(loop-while {iter_begin != iter_end})
		(assign {*iter_begin} {value})
		(errorif (cat {value->obj_vtable != @} (f-path 'class 'vector)) 'error1)
		(f-call 'vector 'get_begin {value} {_, clause_iter_begin})
		(f-call 'vector 'get_end {value} {_, clause_iter_end})
		(errorif {clause_iter_begin == clause_iter_end} 'error2)
		(f-call 'lisp 'repl_eval {this, *clause_iter_begin} {_, value})
		(vpif {value != this->lisp_sym_nil})
			(errorif (cat {value->obj_vtable == @} (f-path 'class 'error)) 'exit)
			(f-call 'ref 'deref {value})
			(assign {this->lisp_sym_nil} {value})
			(f-call 'ref 'ref {value})
			(loop-start)
				(assign {clause_iter_begin + ptr_size} {clause_iter_begin})
				(gotoif {clause_iter_begin == clause_iter_end} 'exit)
				(f-call 'ref 'deref {value})
				(f-call 'lisp 'repl_eval {this, *clause_iter_begin} {_, value})
				(errorif (cat {value->obj_vtable == @} (f-path 'class 'error)) 'exit)
			(loop-end)
		(endif)
		(f-call 'ref 'deref {value})
		(assign {iter_begin + ptr_size} {iter_begin})
	(loop-end)
	(assign {this->lisp_sym_nil} {value})
	(f-call 'ref 'ref {value})

(vp-label 'exit)
	(f-exit 'lisp 'func_cond {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(cond (tst form ...) ...) clause not list"} {value})
	(goto 'error)
(vp-label 'error2)
	(assign {"(cond (tst form ...) ...) clause wrong number of args"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, 0, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
