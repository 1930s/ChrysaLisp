(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_cond)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_value)
	(def-struct-end)

	(ptr 'this 'value 'args)
	(uint 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(assign {this->lisp_sym_nil} {value})
	(f-call 'ref 'ref {value})
	(d-call 'vector 'get_length {args} {length})
	(f-call 'vector 'for_each {args, 0, length, $callback, &this} {_})

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata 'test)
	(uint 'length)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(vpif (cat {(*iter)->obj_vtable == @} (f-path 'class 'vector)))
		(d-call 'vector 'get_length {*iter} {length})
		(vpif {length})
			(f-call 'vector 'get_element {*iter, 0} {test})
			(f-call 'lisp 'repl_eval {pdata->pdata_this, test} {test})
			(vpif (cat {test->obj_vtable == @} (f-path 'class 'error)))
				(f-call 'ref 'deref {pdata->pdata_value})
				(assign {test} {pdata->pdata_value})
				(assign {0} '(r1))
				(return)
			(endif)
			(vpif {test != pdata->pdata_this->lisp_sym_nil})
				(f-call 'ref 'deref {test})
				(f-call 'vector 'for_each {*iter, 1, length, $callback1, pdata} {_})
				(assign {0} '(r1))
				(return)
			(else)
				(f-call 'ref 'deref {test})
				(assign {1} '(r1))
				(return)
			(endif)
		(else)
			(f-call 'ref 'deref {pdata->pdata_value})
			(f-call 'lisp 'repl_error {pdata->pdata_this, "(cond (tst form ...) ...) clause wrong number of args", *iter} {pdata->pdata_value})
		(endif)
	(else)
		(f-call 'ref 'deref {pdata->pdata_value})
		(f-call 'lisp 'repl_error {pdata->pdata_this, "(cond (tst form ...) ...) clause not list", *iter} {pdata->pdata_value})
	(endif)

	(assign {0} '(r1))
	(pop-scope)
	(return)

(vp-label 'callback1)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(f-call 'ref 'deref {pdata->pdata_value})
	(f-call 'lisp 'repl_eval {pdata->pdata_this, *iter} {pdata->pdata_value})

	(assign (cat {pdata->pdata_value->obj_vtable != @} (f-path 'class 'error)) '(r1))
	(pop-scope)
	(return)

(def-func-end)
