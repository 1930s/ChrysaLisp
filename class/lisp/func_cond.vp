(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_cond)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'this)
		(ptr 'value)
	(def-struct-end)

	(ptr 'this 'value 'args)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_cond {this, args})

	(assign {this->lisp_sym_nil} {value})
	(f-call 'ref 'ref {value})
	(d-call 'vector 'get_length {args} {_, length})
	(f-call 'vector 'for_each {args, 0, length, $callback, &this})

	(f-exit 'lisp 'func_cond {this, value})
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata 'test)
	(uint 'length)

	(push-scope)
	(f-entry 'vector 'callback {pdata, iter})

	(errorif (cat {(*iter)->obj_vtable != @} (f-path 'class 'vector)) 'error1)
	(d-call 'vector 'get_length {*iter} {_, length})
	(errorifnot {length} 'error2)
	(f-call 'vector 'get_element {*iter, 0} {_, test})
	(f-call 'lisp 'repl_eval {pdata->pdata_this, test} {_, test})
	(errorif (cat {test->obj_vtable == @} (f-path 'class 'error)) 'error)
	(vpif {test == pdata->pdata_this->lisp_sym_nil})
		(f-call 'ref 'deref {test})
		(f-exit 'vector 'callback '(-1))
	(else)
		(f-call 'ref 'deref {test})
		(f-call 'vector 'for_each {*iter, 1, length, $callback1, pdata})
		(f-exit 'vector 'callback '(0))
	(endif)
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(cond (tst form ...) ...) clause not list"} {test})
	(goto 'error3)
(vp-label 'error2)
	(assign {"(cond (tst form ...) ...) clause wrong number of args"} {test})
(vp-label 'error3)
	(f-call 'lisp 'repl_error {pdata->pdata_this, test, *iter} {_, test})
(vp-label 'error)
	(f-call 'ref 'deref {pdata->pdata_value})
	(assign {test} {pdata->pdata_value})
	(f-exit 'vector 'callback '(0))
	(return))

	(pop-scope-syms)

(vp-label 'callback1)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(ptr 'pdata)
	(pptr 'iter)

	(push-scope)
	(f-entry 'vector 'callback {pdata, iter})

	(f-call 'ref 'deref {pdata->pdata_value})
	(f-call 'lisp 'repl_eval {pdata->pdata_this, *iter} {_, pdata->pdata_value})

	(errorassign (cat {pdata->pdata_value->obj_vtable != @} (f-path 'class 'error)) '(r1))
	(pop-scope)
	(return)

(def-func-end)
