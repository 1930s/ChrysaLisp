(import 'sys/func.inc)
(import 'class/hash_map/hash_map.inc)
(import 'class/symbol/symbol.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/env_bind)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = vars list object (ptr)
	;r2 = vals sequence object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'vars 'vals 'symbol 'value 'args)
	(uint 'index_vars 'index_vals 'len_vars 'len_vals 'state)

	(push-scope)
	(f-entry 'lisp 'env_bind {this, vars, vals})

(errorcases
	(errorif (cat {vars->obj_vtable != @} (f-path 'vector 'vtable)) 'error1)
	(f-call 'obj 'inst_of (cat {vals, @} (f-path 'sequence 'vtable)) {_, value})
	(errorifnot {value} 'error2))

	(assign {0, 0, 0} {index_vars, index_vals, state})
	(f-call 'obj 'ref {this->lisp_sym_nil} {value})
	(d-call 'vector 'get_length {vars} {_, len_vars})
	(v-call 'sequence 'get_length {vals} {_, len_vals})
	(loop-while {index_vars != len_vars})
		(f-call 'vector 'get_element {vars, index_vars} {_, symbol})
		(vpif {symbol == this->lisp_sym_rest})
			(assign {1, index_vars + 1} {state, index_vars})
		(elseif {symbol == this->lisp_sym_optional})
			(assign {2, index_vars + 1} {state, index_vars})
		(endif)
		(breakif {index_vars == len_vars})
		(f-call 'vector 'get_element {vars, index_vars} {_, symbol})
		(f-call 'obj 'deref {value})
		(vpif (cat {symbol->obj_vtable == @} (f-path 'symbol 'vtable)))
			(vpif {state == 1})
				;rest
				(v-call 'sequence 'slice {vals, index_vals, len_vals} {_, value})
				(assign {index_vars + 1, len_vals} {index_vars, index_vals})
			(elseif {state == 2})
				;optional
				(gotoif {index_vals != len_vals} 'normal)
				(f-call 'obj 'ref {this->lisp_sym_nil} {value})
				(assign {index_vars + 1} {index_vars})
			(else)
				;normal
				(errorif {index_vals == len_vals} 'error)
			(vp-label 'normal)
				(v-call 'sequence 'ref_element {vals, index_vals} {_, value})
				(assign {index_vars + 1, index_vals + 1} {index_vars, index_vals})
			(endif)
			(f-call 'hash_map 'insert {this->lisp_environment, symbol, value})
		(else)
			(errorif (cat {symbol->obj_vtable != @} (f-path 'vector 'vtable)) 'error3)
			(errorif {index_vals == len_vals} 'error)
			(v-call 'sequence 'ref_element {vals, index_vals} {_, args})
			(assign {index_vars + 1, index_vals + 1} {index_vars, index_vals})
			(f-call 'lisp 'env_bind {this, symbol, args} {_, value})
			(f-call 'obj 'deref {args})
			(errorif (cat {value->obj_vtable == @} (f-path 'error 'vtable)) 'exit)
		(endif)
	(loop-end)
	(errorif {index_vals != len_vals} 'error4)

(vp-label 'exit)
	(f-exit 'lisp 'env_bind {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(bind (param ...) seq)", error_msg_not_a_list, vars} {_, value})
	(goto 'exit)
(vp-label 'error2)
	(f-call 'lisp 'repl_error {this, "(bind (param ...) seq)", error_msg_not_a_sequence, vals} {_, value})
	(goto 'exit)
(vp-label 'error3)
	(f-call 'lisp 'repl_error {this, "(bind (param ...) seq)", error_msg_not_a_symbol, vars} {_, value})
	(goto 'exit)
(vp-label 'error4)
	(f-call 'obj 'deref {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, "(bind (param ...) seq)", error_msg_wrong_num_of_args, vals} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
