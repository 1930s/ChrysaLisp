(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_unordered_map.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/env_bind)
	;inputs
	;r0 = lisp object
	;r1 = vars list
	;r2 = vals list
	;r3 = vals start index
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'vars 'vals 'symbol 'value)
	(ushort 'len_vars 'len_vals 'index_vars 'index_vals 'state)

	(push-scope)
	(retire '(r0 r1 r2 r3) {this, vars, vals, index_vals})

	(vpif {vars->obj_vtable == @class/class_vector})
		(vpif {vals->obj_vtable == @class/class_vector})
			(assign {0, 0} {index_vars, state})
			(assign {this->lisp_sym_nil} {value})
			(func-call 'ref 'ref {value})
			(devirt-call 'vector 'get_length {vars} {len_vars})
			(devirt-call 'vector 'get_length {vals} {len_vals})
			(loop-while {index_vars != len_vars})
				(func-call 'vector 'get_element {vars, index_vars} {symbol})
				(vpif {symbol == this->lisp_sym_rest})
					(assign {1, index_vars + 1} {state, index_vars})
				(elseif {symbol == this->lisp_sym_optional})
					(assign {2, index_vars + 1} {state, index_vars})
				(endif)
				(breakif {index_vars == len_vars})
				(func-call 'vector 'get_element {vars, index_vars} {symbol})
				(func-call 'ref 'deref {value})
				(vpif {symbol->obj_vtable != @class/class_symbol})
					(func-call 'error 'create {"(bind vars vals) not a symbol", vars} {value})
					(goto 'error1)
				(endif)
				(switch)
				(case {state == 1})
					;rest
					(devirt-call 'vector 'slice {vals, index_vals, len_vals} {value})
					(assign {len_vars, len_vals} {index_vars, index_vals})
					(break)
				(case {state == 2})
					;optional
					(gotoif {index_vals != len_vals} 'normal)
					(assign {this->lisp_sym_nil} {value})
					(func-call 'ref 'ref {value})
					(assign {index_vars + 1} {index_vars})
					(break)
				(default)
					;normal
					(gotoif {index_vals == len_vals} 'error)
				(vp-label 'normal)
					(devirt-call 'vector 'ref_element {vals, index_vals} {value})
					(assign {index_vars + 1, index_vals + 1} {index_vars, index_vals})
				(endswitch)
				(func-call 'unordered_map 'insert {this->lisp_enviroment, symbol, value} {_, _})
			(loop-end)
			(breakif {index_vals == len_vals})
			(func-call 'ref 'deref {value})
		(vp-label 'error)
			(func-call 'error 'create {"(bind vars vals) wrong number of vals", vals} {value})
		(else)
			(func-call 'error 'create {"(bind vars vals) vals not a list", vals} {value})
		(endif)
	(else)
		(func-call 'error 'create {"(bind vars vals) vars not a list", vars} {value})
	(endif)
(vp-label 'error1)
	(expr {this, value} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
