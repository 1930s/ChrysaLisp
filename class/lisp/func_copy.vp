(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_copy)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args)
	(ulong 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(devirt-call 'vector 'get_length {args} {length})
	(vpif {length == 1})
		(func-call 'vector 'get_element {args, 0} {args})
		(vpif {args->obj_vtable == @class/class_vector})
			(devirt-call 'vector 'get_length {args} {length})
			(devirt-call 'vector 'slice {args, 0, length} {args})
			(func-call 'vector 'for_each {args, 0, length, $callback, 0} {_})
		(else)
			(func-call 'ref 'ref {args})
		(endif)
	(else)
		(func-call 'error 'create {"(copy form) wrong number of args", args} {args})
	(endif)

	(assign {this, args} '(r0 r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)
	(ulong 'length)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(assign {*iter} {pdata})
	(vpif {pdata->obj_vtable == @class/class_vector})
		(devirt-call 'vector 'get_length {pdata} {length})
		(devirt-call 'vector 'slice {pdata, 0, length} {pdata})
		(func-call 'vector 'for_each {pdata, 0, length, $callback, 0} {_})
		(func-call 'ref 'deref {*iter})
		(assign {pdata} {*iter})
	(endif)

	(assign {1} '(r1))
	(pop-scope)
	(return)

(def-func-end)
