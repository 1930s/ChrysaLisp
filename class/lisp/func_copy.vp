(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_copy)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_copy {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 1} 'error)
	(f-call 'vector 'get_element {args, 0} {_, args})
	(vpif (cat {args->obj_vtable == @} (f-path 'class 'vector)))
		(d-call 'vector 'get_length {args} {_, length})
		(d-call 'vector 'slice {args, 0, length} {_, args})
		(f-call 'vector 'for_each {args, 0, length, $callback, 0} {_})
	(else)
		(f-call 'ref 'ref {args} '(_))
	(endif)

(vp-label 'exit)
	(f-exit 'lisp 'func_copy {this, args})
	(return)

(errorcases
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, "(copy form) wrong number of args", args} {_, args})
	(goto 'exit))

	(pop-scope-syms)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)
	(uint 'length)

	(push-scope)
	(f-entry 'vector 'callback {pdata, iter})

	(assign {*iter} {pdata})
	(vpif (cat {pdata->obj_vtable == @} (f-path 'class 'vector)))
		(d-call 'vector 'get_length {pdata} {_, length})
		(d-call 'vector 'slice {pdata, 0, length} {_, pdata})
		(f-call 'vector 'for_each {pdata, 0, length, $callback, 0} {_})
		(f-call 'ref 'deref {*iter} '(_))
		(assign {pdata} {*iter})
	(endif)

	(f-exit 'vector 'callback '(1))
	(pop-scope)
	(return)

(def-func-end)
