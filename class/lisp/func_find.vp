(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_find)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'seq 'elem)
	(int 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(errorif {length != 2} 'error1)
	(f-call 'vector 'get_element {args, 0} {elem})
	(f-call 'vector 'get_element {args, 1} {seq})
	(vpif (cat {seq->obj_vtable == @} (f-path 'class 'string)))
		(errorif (cat {elem->obj_vtable != @} (f-path 'class 'string)) 'error2)
		(f-call 'string 'find {seq, ubyte (elem->string_data)} {length})
		(goto 'ok)
	(else)
		(errorif (cat {seq->obj_vtable != @} (f-path 'class 'vector)) 'error2)
		(f-call 'vector 'find {seq, elem} {length})
	(vp-label 'ok)
		(vpif {length == -1})
			(assign {this->lisp_sym_nil} {value})
			(f-call 'ref 'ref {value})
		(else)
			(f-call 'boxed_long 'create {} {value})
			(f-call 'boxed_long 'set_value {value, length})
		(endif)
	(endif)

(vp-label 'exit)
	(assign {this, value} '(r0 r1))
	(return)

(errorcases
(vp-label 'error2)
	(assign {"(find elem seq) not sequence"} {value})
	(goto 'error)
(vp-label 'error1)
	(assign {"(find elem seq) wrong number of args"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
