(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/error/error.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_find)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'seq 'elem)
	(ulong 'length)
	(pubyte 'charp)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length == 2})
		(f-call 'vector 'get_element {args, 0} {elem})
		(f-call 'vector 'get_element {args, 1} {seq})
		(vpif {seq->obj_vtable == @class/class_string})
			(gotoif {elem->obj_vtable != @class/class_string} 'error)
			(assign {&elem->string_data} {charp})
			(f-call 'string 'find {seq, *charp} {length})
			(goto 'ok)
		(elseif {seq->obj_vtable == @class/class_vector})
			(f-call 'vector 'find {seq, elem} {length})
		(vp-label 'ok)
			(vpif {length == -1})
				(assign {this->lisp_sym_nil} {value})
				(f-call 'ref 'ref {value})
			(else)
				(f-call 'boxed_long 'create {} {value})
				(f-call 'boxed_long 'set_value {value, length})
			(endif)
		(else)
		(vp-label 'error)
			(f-call 'error 'create {"(find elem seq) not sequence", args} {value})
		(endif)
	(else)
		(f-call 'error 'create {"(find elem seq) wrong number of args", args} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
