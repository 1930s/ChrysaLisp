(import 'sys/func.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

(def-method 'lisp 'func_mul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)

	(push-scope)
	(entry 'lisp 'func_mul {this, args})

(errorcases
	(call 'lisp 'env_args_type (cat {args, @} (f-path 'integer 'vtable) {, -2}) '(r1))
	(errorif '(r1 == 0) 'error1))

	(call 'vector 'get_iters {args} '(_ r1 r2))
	(vp-cpy-cr 1 r0)
	(loop-start)
		(vp-cpy-ir r1 0 r3)
		(vp-add-cr ptr_size r1)
		(vp-cpy-ir r3 integer_value r3)
		(vp-mul-rr r3 r0)
	(loop-until '(r1 == r2))
	(call 'integer 'create '(r0) {value})

(vp-label 'funcexit)
	(exit 'lisp 'func_mul {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(mul num num ...)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
