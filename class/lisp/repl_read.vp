(import 'inc/func.inc)
(import 'class/class_stream.inc)
(import 'class/class_vector.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/repl_read)
	;inputs
	;r0 = lisp object
	;r1 = stream
	;r2 = next char
	;outputs
	;r0 = lisp object
	;r1 = ast
	;r2 = next char

	(const 'char_space (ascii " "))
	(const 'char_lrb (ascii "("))
	(const 'char_rrb (ascii ")"))
	(const 'char_lab (ascii "<"))
	(const 'char_rab (ascii ">"))
	(const 'char_0 (ascii "0"))
	(const 'char_9 (ascii "9"))
	(const 'char_minus (ascii "-"))
	(const 'char_quote (ascii "'"))
	(const 'char_double_quote 34)
	(const 'char_quasi_quote (ascii "`"))
	(const 'char_unquote (ascii ","))
	(const 'char_splicing (ascii "~"))
	(const 'char_semi (ascii ";"))
	(const 'char_lf 10)
	(const 'char_lcurly (ascii "{"))
	(const 'char_rcurly (ascii "}"))

	(ptr 'this 'stream 'ast)
	(ulong 'char)

	(push-scope)
	(retire '(r0 r1 r2) {this, stream, char})

	;skip white space
(vp-label 'skip_white)
	(loop-while {char <= char_space && char != -1})
		(func-call 'stream 'read_char {stream} {char})
	(loop-end)

	;what are we reading ?
	(vpif {char != -1})
		(switch)
		(case {char == char_semi})
			(func-call 'stream 'skip_not {stream, char_lf})
			(func-call 'stream 'read_char {stream} {char})
			goto skip_white
		(case {char == char_rrb})
			(func-call 'error 'create {"unexpected )", this -> lisp_sym_nil} {ast})
			(func-call 'stream 'read_char {stream} {char})
			(break)
		(case {char == char_rcurly})
			(func-call 'error 'create {"unexpected }", this -> lisp_sym_nil} {ast})
			(func-call 'stream 'read_char {stream} {char})
			(break)
;		(case {char == char_rab})
;			(func-call 'error 'create {"unexpected >", this -> lisp_sym_nil} {ast})
;			(func-call 'stream 'read_char {stream} {char})
;			(break)
		(case {char == char_lrb})
			(func-call 'lisp 'repl_read_list {this, stream, char} {ast, char})
			(break)
;		(case {char == char_lab})
;			(func-call 'lisp 'repl_read_pair {this, stream, char} {ast, char})
;			(break)
		(case {char == char_minus || (char >= char_0 && char <= char_9)})
			(func-call 'lisp 'repl_read_num {this, stream, char} {ast, char})
			(break)
		(case {char == char_double_quote})
			(func-call 'lisp 'repl_read_str {this, stream, char} {ast, char})
			(break)
		(case {char == char_lcurly})
			(func-call 'lisp 'repl_read_group {this, stream, char} {ast, char})
			(break)
		(case {char == char_quote})
			(func-call 'lisp 'repl_read_quote {this, stream, char} {ast, char})
			(break)
		(case {char == char_quasi_quote})
			(func-call 'lisp 'repl_read_qquote {this, stream, char} {ast, char})
			(break)
		(case {char == char_unquote})
			(func-call 'lisp 'repl_read_unquote {this, stream, char} {ast, char})
			(break)
		(case {char == char_splicing})
			(func-call 'lisp 'repl_read_splicing {this, stream, char} {ast, char})
			(break)
		(default)
			(func-call 'lisp 'repl_read_sym {this, stream, char} {ast, char})
		(endswitch)
	(else)
		(assign {this -> lisp_sym_nil} {ast})
		(func-call 'ref 'ref {ast})
	(endif)

	(expr {this, ast, char} '(r0 r1 r2))
	(pop-scope)
	(return)

(def-func-end)
