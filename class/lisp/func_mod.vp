(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_mod)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value)
	(pptr 'iter)
	(long 'accum)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_mod {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length < 2} 'error1)
	(f-call 'vector 'get_element {args, 0} {_, value})
	(errorif (cat {value->obj_vtable != @} (f-path 'class 'boxed_long)) 'error2)
	(f-call 'boxed_long 'get_value {value} {accum})
	(f-call 'vector 'for_each {args, 1, length, $callback, &accum} {_, iter})
	(errorif {iter} 'error2)
	(f-call 'boxed_long 'create {} {value})
	(f-call 'boxed_long 'set_value {value, accum})

(vp-label 'exit)
	(f-exit 'lisp 'func_mod {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(mod val val ...) not enough args"} {value})
	(goto 'error)
(vp-label 'error2)
	(assign {"(mod val val ...) not all numbers"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(plong 'pdata)
	(long 'val)

	(push-scope)
	(f-entry 'vector 'callback {pdata, iter})

	(errorif (cat {(*iter)->obj_vtable != @} (f-path 'class 'boxed_long)) 'error3)
	(f-call 'boxed_long 'get_value {*iter} {val})
	(errorifnot {val} 'error3)
	(assign {*pdata %% val} {*pdata})

	(f-exit 'vector 'callback '(1))
	(return)

(errorcases
(vp-label 'error3)
	(f-exit 'vector 'callback '(0))
	(return))

	(pop-scope-syms)

(def-func-end)
