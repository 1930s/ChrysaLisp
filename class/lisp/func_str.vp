(import 'inc/func.inc)
(import 'class/string/string.inc)
(import 'class/stream_str/stream_str.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_str)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'stream)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_str {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 1} 'error)
	(f-call 'vector 'get_element {args, 0} {_, args})
	(vpif (cat {args->obj_vtable == @} (f-path 'class 'string)))
		(assign {args} {value})
		(f-call 'ref 'ref {value})
	(elseif (cat {args->obj_vtable == @} (f-path 'class 'symbol)))
		(f-call 'string 'create_from_buffer {args->string_data, args->string_length} {value})
	(elseif (cat {args->obj_vtable == @} (f-path 'class 'stream_str)))
		(f-call 'stream_str 'ref_string {args} {_, value})
	(else)
		(f-call 'string 'create_raw {string_gap} {value})
		(f-call 'stream_str 'create {value} {stream})
		(f-call 'lisp 'repl_print {this, stream, args})
		(f-call 'stream_str 'ref_string {stream} {_, value})
		(f-call 'ref 'deref {stream})
	(endif)

(vp-label 'exit)
	(f-exit 'lisp 'func_str {this, value})
	(return)

(errorcases
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, "(str arg) wrong number of args", 0, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
