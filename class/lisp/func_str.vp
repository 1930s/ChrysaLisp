(import 'sys/func.inc)
(import 'class/symbol/symbol.inc)
(import 'class/stream_str/stream_str.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_str)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value 'stream)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_str {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 1} 'error1)
	(f-call 'vector 'get_first {args} {_, args})
	(vpif (cat {args->obj_vtable == @} (f-path 'string 'vtable)))
		(f-call 'obj 'ref {args} {value})
	(elseif (cat {args->obj_vtable == @} (f-path 'symbol 'vtable)))
		(f-call 'string 'create_from_buffer {args->string_data, args->string_length} {value})
	(elseif (cat {args->obj_vtable == @} (f-path 'stream_str 'vtable)))
		(f-call 'stream_str 'ref_string {args} {_, value})
	(else)
		(f-call 'string 'create_from_buffer {0, string_gap} {value})
		(f-call 'stream_str 'create {value} {stream})
		(f-call 'lisp 'repl_print {this, stream, args})
		(f-call 'stream_str 'ref_string {stream} {_, value})
		(f-call 'obj 'deref {stream})
	(endif)

(vp-label 'exit)
	(f-exit 'lisp 'func_str {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(str form)", error_msg_wrong_num_of_args, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
