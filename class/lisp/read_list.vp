(import 'sys/func.inc)
(import 'class/stream/stream.inc)
(import 'class/lisp/lisp.inc)
(import 'class/string/string.inc)

(def-func 'class/lisp/read_list)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = stream object (ptr)
	;r2 = next char (uint)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = list vector object (ptr)
	;r2 = next char (uint)

	(ptr 'this 'stream 'list 'ast)
	(int 'char)

	(push-scope)
	(f-entry 'lisp 'read_list {this, stream, char})

	;skip "(" and white space
	(loop-start)
		(f-call 'lisp 'read_char {this, stream, char} {_, char})
	(loop-until {char > char_space || char == -1})

	(f-call 'vector 'create '() {list})
	(loop-whilenot {char == -1 || char == char_rrb})
		(f-call 'lisp 'read {this, stream, char} {_, ast, char})
		(errorif (cat {ast->obj_vtable == @} (f-path 'class 'error)) 'error)
		(f-call 'vector 'push_back {list, ast})

		;skip white space/comments
		(loop-start)
			(loop-whilenot {char > char_space || char == -1})
				(f-call 'lisp 'read_char {this, stream, char} {_, char})
			(loop-end)
			(breakif {char != char_semi})
			(f-call 'stream 'skip_not {stream, char_lf})
			(f-call 'stream 'read_char {stream} {_, char})
		(loop-end)
	(loop-end)

	;skip ")"
	(f-call 'stream 'read_char {stream} {_, char})

(vp-label 'exit)
	(f-exit 'lisp 'read_list {this, list, char})
	(return)

(errorcases
(vp-label 'error)
	(f-call 'obj 'deref {list})
	(assign {ast} {list})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
