(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_string.inc)
(import 'class/class_symbol.inc)
(import 'class/class_stream_str.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_sym)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'stream)
	(ulong 'length)

	(push-scope)
	(retire '(r0, r1) '(this, args))

	(devirt-call 'vector 'get_length '(args) '(length))
	(vpif '((length == 1)))
		(func-call 'vector 'get_element '(args, 0) '(args))
		(vpif '((args -> obj_vtable == @class/class_symbol)))
			(assign '(args) '(value))
			(func-call 'ref 'ref '(value))
		(vpelseif '((args -> obj_vtable == @class/class_string)))
			(func-call 'symbol 'create_from_buffer '(args -> string_data, args -> string_length) '(value))
			(func-call 'lisp 'sym_intern '(this, value) '(value))
		(else)
			(func-call 'string 'create_from_cstr '("                ") '(value))
			(func-call 'stream_str 'create '(value) '(stream))
			(func-call 'lisp 'repl_print '(this, stream, args))
			(func-call 'stream_str 'ref_string '(stream) '(value))
			(func-call 'ref 'deref '(stream))
			(func-call 'symbol 'create_from_buffer '(value -> string_data, value -> string_length) '(value))
			(func-call 'lisp 'sym_intern '(this, value) '(value))
		(endif)
	(else)
		(func-call 'error 'create '("(sym arg) wrong numbers of args", args) '(value))
	(endif)

	(expr '(this, value) '(r0, r1))
	(pop-scope)
	(return)

(def-func-end)
