(import 'inc/func.inc)
(import 'class/boxed_ptr/boxed_ptr.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/repl_apply)
	;inputs
	;r0 = lisp object
	;r1 = function
	;r2 = ast
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_value)
	(def-struct-end)

	(ptr 'this 'value 'func 'ast)

	(push-scope)
	(f-entry 'lisp 'repl_apply {this, func, ast})

	(vpif (cat {func->obj_vtable == @} (f-path 'class 'boxed_ptr)))
		;built in or compiled function
		(assign {this, ast, func} '(r0 r1 r2))
		(vp-cpy-ir r2 boxed_ptr_value r2)
		(vp-and-cr -8 r2)
		(vp-call-r r2)
		(assign {this} '(r0))
		(return)
	(endif)

	;lambda ?
	(ptr 'vars)
	(uint 'length)
	(push-scope)

	(errorif (cat {func->obj_vtable != @} (f-path 'class 'vector)) 'error2)
	(d-call 'vector 'get_length {func} {_, length})
	(errorif {length < 2} 'error1)
	(f-call 'vector 'get_element {func, 0} {_, vars})
	(errorif {vars != this->lisp_sym_lambda} 'error2)
	(f-call 'lisp 'env_push {this})
	(f-call 'vector 'get_element {func, 1} {_, vars})
	(f-call 'lisp 'env_bind {this, vars, ast, 0} {_,value})
	(errorif (cat {value->obj_vtable == @} (f-path 'class 'error)) 'exit1)
	(f-call 'vector 'for_each {func, 2, length, $callback, &this})
(vp-label 'exit1)
	(f-call 'lisp 'env_pop {this})
(vp-label 'exit)
	(f-exit 'lisp 'repl_apply {this, value})
	(return)

(errorcases
(vp-label 'error2)
	(assign {"(lambda vars body) not a lambda list"} {value})
	(goto 'error)
(vp-label 'error1)
	(assign {"(lambda vars body) wrong number of args"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, func} {_, value})
	(goto 'exit))

	(pop-scope-syms)
	(pop-scope-syms)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(f-entry 'vector 'callback {pdata, iter})

	(f-call 'ref 'deref {pdata->pdata_value})
	(f-call 'lisp 'repl_eval {pdata->pdata_this, *iter} {_,pdata->pdata_value})
	(errorif (cat {pdata->pdata_value->obj_vtable == @} (f-path 'class 'error)) 'error3)

	(f-exit 'vector 'callback '(1))
	(return)

(errorcases
(vp-label 'error3)
	(f-exit 'vector 'callback '(0))
	(return))

	(pop-scope-syms)

(def-func-end)
