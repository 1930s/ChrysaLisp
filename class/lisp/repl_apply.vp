(import 'inc/func.inc)
(import 'class/boxed_ptr/boxed_ptr.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/repl_apply)
	;inputs
	;r0 = lisp object
	;r1 = function
	;r2 = ast
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_value)
	(def-struct-end)

	(ptr 'this 'value 'func 'ast)

	(push-scope)
	(assign '(r0 r1 r2) {this, func, ast})

	(vpif (cat {func->obj_vtable == @} (f-path 'class 'boxed_ptr)))
		;built in or compiled function
		(assign {this, ast, func} '(r0 r1 r2))
		(vp-cpy-ir r2 boxed_ptr_value r2)
		(vp-and-cr -8 r2)
		(vp-call-r r2)
		(assign '(r1) {value})
	(elseif (cat {func->obj_vtable == @} (f-path 'class 'vector)))
		;lambda
		(ptr 'vars)
		(uint 'length)
		(push-scope)
		(d-call 'vector 'get_length {func} {length})
		(vpif {length > 1})
			(f-call 'vector 'get_element {func, 0} {vars})
			(vpif {vars == this->lisp_sym_lambda})
				(f-call 'lisp 'env_push {this})
				(f-call 'vector 'get_element {func, 1} {vars})
				(f-call 'lisp 'env_bind {this, vars, ast, 0} {value})
				(vpif (cat {value->obj_vtable != @} (f-path 'class 'error)))
					(f-call 'vector 'for_each {func, 2, length, $callback, &this} {_})
				(endif)
				(f-call 'lisp 'env_pop {this})
			(else)
				(f-call 'lisp 'repl_error {this, "(lambda vars body) not lambda", vars} {value})
			(endif)
		(else)
			(f-call 'lisp 'repl_error {this, "(lambda vars body) wrong number of args", func} {value})
		(endif)
		(pop-scope)
	(else)
		(f-call 'lisp 'repl_error {this, "(lambda vars body) not a lambda list", func} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(f-call 'ref 'deref {pdata->pdata_value})
	(f-call 'lisp 'repl_eval {pdata->pdata_this, *iter} {pdata->pdata_value})

	(assign (cat {pdata->pdata_value->obj_vtable != @} (f-path 'class 'error)) '(r1))
	(pop-scope)
	(return)

(def-func-end)
