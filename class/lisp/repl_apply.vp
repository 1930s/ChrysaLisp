(import 'sys/func.inc)
(import 'class/boxed_ptr/boxed_ptr.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/repl_apply)
	;inputs
	;r0 = lisp object
	;r1 = args
	;r2 = function
	;outputs
	;r0 = lisp object
	;r1 = value
	;trashes
	;all but r0

	(f-entry 'lisp 'repl_apply '(r0 r1 r2))

	(assign `((r2 obj_vtable) (@ ,(f-path 'class 'boxed_ptr))) '(r3 r4))
	(vpif '(r3 == r4))
		;built in or compiled function
		(vp-cpy-ir r2 boxed_ptr_value r2)
		(vp-and-cr (neg ptr_size) r2)
		(vp-jmp-r r2)
	(endif)

	(ptr 'this 'args)
	(union
		'(ptr 'func)
		'(pptr 'iter_end))
	(ptr 'value)
	(pptr 'iter_begin)
	(uint 'length)

	(push-scope)
	(assign '(r0 r1 r2) {this, args, func})

	;lambda ?
	(errorif (cat {func->obj_vtable != @} (f-path 'class 'vector)) 'error2)
	(d-call 'vector 'get_length {func} {_, length})
	(errorif {length < 2} 'error1)
	(f-call 'vector 'get_iters {func} {_, iter_begin, iter_end})
	(assign {iter_begin[ptr_size * 0]} {value})
(errorcases
	(vpif {value != this->lisp_sym_lambda})
		(errorif {value != this->lisp_sym_macro} 'error2)
	(endif))

	(f-call 'lisp 'env_push {this})
	(f-call 'lisp 'env_bind {this, iter_begin[ptr_size * 1], args} {_, value})
	(errorif (cat {value->obj_vtable == @} (f-path 'class 'error)) 'exit1)

	(assign {&iter_begin[ptr_size * 2]} {iter_begin})
	(loop-while {iter_begin != iter_end})
		(f-call 'obj 'deref {value})
		(f-call 'lisp 'repl_eval {this, *iter_begin} {_, value})
		(errorif (cat {value->obj_vtable == @} (f-path 'class 'error)) 'exit1)
		(assign {iter_begin + ptr_size} {iter_begin})
	(loop-end)

(vp-label 'exit1)
	(f-call 'lisp 'env_pop {this})
(vp-label 'exit)
	(f-exit 'lisp 'repl_apply {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(lambda vars body)", error_msg_wrong_num_of_args, func} {_, value})
	(goto 'exit)
(vp-label 'error2)
	(f-call 'lisp 'repl_error {this, "(lambda vars body)", error_msg_not_a_lambda, func} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
