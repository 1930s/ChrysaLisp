(import 'inc/func.inc)
(import 'class/class_boxed_ptr.inc)
(import 'class/class_vector.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/repl_apply)
	;inputs
	;r0 = lisp object
	;r1 = function
	;r2 = ast
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_value)
	(def-struct-end)

	(ptr 'this 'value 'func 'ast)

	(push-scope)
	(retire '(r0, r1, r2) '(this, func, ast))

	(vpif '((func -> obj_vtable == @class/class_boxed_ptr)))
		;built in or compiled function
		(eval '(this, ast, func) '(r0, r1, r2))
		(vp-call-i r2 boxed_ptr_value)
		(retire '(r1) '(value))
	(vpelseif '((func -> obj_vtable == @class/class_vector)))
		;lambda
		(ptr 'vars)
		(ulong 'length)
		(push-scope)
		(devirt-call 'vector 'get_length '(func) '(length))
		(vpif '((length > 2)))
			(func-call 'vector 'get_element '(func, 0) '(vars))
			(vpif '((vars == this -> lisp_sym_lambda)))
				(func-call 'lisp 'env_push '(this))
				(func-call 'vector 'get_element '(func, 1) '(vars))
				(func-call 'lisp 'env_bind '(this, vars, ast, 0) '(value))
				(vpif '((value -> obj_vtable != @class/class_error)))
					(func-call 'vector 'for_each '(func, 2, length, $ callback, & this) '(_))
				(endif)
				(func-call 'lisp 'env_pop '(this))
			(else)
				(func-call 'error 'create '("(lambda vars body) not lambda", vars) '(value))
			(endif)
		(else)
			(func-call 'error 'create '("(lambda vars body) wrong numbers of args", func) '(value))
		(endif)
		(pop-scope)
	(else)
		(func-call 'error 'create '("(lambda vars body) not a lambda list", func) '(value))
	(endif)

	(eval '(this, value) '(r0, r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(retire '(r0, r1) '(pdata, iter))

	(func-call 'ref 'deref '(pdata -> pdata_value))
	(func-call 'lisp 'repl_eval '(pdata -> pdata_this, * iter) '(pdata -> pdata_value))

	(eval '(pdata -> pdata_value -> obj_vtable != @ class/class_error) '(r1))
	(pop-scope)
	(return)

(def-func-end)
