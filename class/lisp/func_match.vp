(import 'sys/func.inc)
(import 'class/string/string.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_match)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = else value

	(ptr 'this 'args 'value1 'value2)
	(pptr 'iter_begin 'iter_end)
	(union
		'(pptr 'iter)
		'(uint 'length1 'length2))

	(push-scope)
	(f-entry 'lisp 'func_match {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 2} {_, value1})
	(errorifnot {value1} 'error1))

	(f-call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size]} {value1, value2})
	(d-call 'vector 'get_length {value1} {_, length1})
	(d-call 'vector 'get_length {value2} {_, length2})
	(vpif {length1 == length2})
		(f-call 'vector 'get_iters {value1} {_, iter_begin, iter_end})
		(f-call 'vector 'get_begin {value2} {_, iter})
		(loop-while {iter_begin != iter_end})
			(assign {*iter_begin, *iter} {value1, value2})
			(assign {iter_begin + ptr_size, iter + ptr_size} {iter_begin, iter})
			(continueif {value1 == value2})
			(f-call 'obj 'inst_of (cat {value2, @} (f-path 'class 'string)) {_, args})
			(gotoifnot {args} 'nomatch)
			(gotoif {ushort(value2->string_data) != char_underscore} 'nomatch)
		(loop-end)
		(assign {this->lisp_sym_t} {value1})
	(else)
	(vp-label 'nomatch)
		(assign {this->lisp_sym_nil} {value1})
	(endif)
	(f-call 'ref 'ref {value1})

(vp-label 'exit)
	(f-exit 'lisp 'func_match {this, value1})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(match? list list)", error_msg_wrong_types, args} {_, value1})
	(goto 'exit)
	(signature 'sig 'vector 'vector))

	(pop-scope-syms)

(def-func-end)
