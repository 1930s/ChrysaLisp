(include 'sys/func.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_match)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (this args value1 value2 iter iter_begin iter_end wild) '(r6 r7))

	(entry 'lisp 'func_match (list this args))

(errorcases
	(call 'lisp 'env_args_type `(,args ($ sig) 2))
	(errorif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(vp-cpy-ir args array_array iter_begin)
	(vp-cpy-ir iter_begin 0 value1)
	(vp-cpy-ir iter_begin ptr_size value2)
	(vp-cpy-ir-ui value1 array_length iter_end)
	(vp-cpy-ir-ui value2 array_length iter_begin)
	(vpif (list iter_begin '== iter_end))
		(vp-cpy-ir value1 array_array iter_begin)
		(vp-cpy-ir value2 array_array iter)
		(vp-shl-cr (log2 ptr_size) iter_end)
		(vp-add-rr iter_begin iter_end)
		(vpif (list iter_begin '!= iter_end))
			(vp-cpy-ir this lisp_sym_underscore wild)
			(loop-start)
				(vp-cpy-ir iter_begin 0 value1)
				(vp-cpy-ir iter 0 value2)
				(vp-add-cr ptr_size iter_begin)
				(vp-add-cr ptr_size iter)
				(vpif (list value1 '!= value2))
					(gotoif (list value2 '!= wild) 'nomatch)
				(endif)
			(loop-until (list iter_begin '== iter_end))
		(endif)
		(vp-cpy-ir this lisp_sym_t value1)
	(else)
	(vp-label 'nomatch)
		(vp-cpy-ir this lisp_sym_nil value1)
	(endif)
	(call 'obj 'ref (list value1))

	(exit 'lisp 'func_match (list this value1))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list this "(match? list list)" error_msg_wrong_types args))
	(signature 'sig 'vector 'vector))

(def-func-end)
