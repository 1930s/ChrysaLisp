(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_cat)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_args)
		(ptr 'pdata_value)
	(def-struct-end)

	(ptr 'this 'args 'value)

	(ptr 'first)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_cat {this, args})

	(d-call 'vector 'get_length {args} {length})
	(errorifnot {length} 'error1)
	(f-call 'vector 'get_element {args, 0} {first})
	(f-call 'obj 'inst_of (cat {first, @} (f-path 'class 'string)) {value})
	(vpif {value})
		(f-call 'vector 'for_each {args, 1, length, $callback2, &this} {value})
		(errorif {value} 'error2)
		(vpif {length == 2})
			(f-call 'vector 'get_element {args, 1} {value})
			(f-call 'string 'append {first, value} {value})
		(else)
			(f-call 'string 'cat {args} {value})
		(endif)
	(else)
		(errorif (cat {first->obj_vtable != @} (f-path 'class 'vector)) 'error3)
		(f-call 'vector 'create {} {value})
		(f-call 'vector 'for_each {args, 0, length, $callback1, &this} {_})
	(endif)

(vp-label 'exit)
	(f-exit 'lisp 'func_cat {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(cat seq ...) wrong number of args"} {value})
	(goto 'error)
(vp-label 'error2)
	(assign {"(cat seq ...) not all strings"} {value})
	(goto 'error)
(vp-label 'error3)
	(assign {"(cat seq ...) not sequence type"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(vp-label 'callback1)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata 'elem)
	(uint 'length)

	(push-scope)
	(f-entry 'vector 'callback {pdata, iter})

	(assign {*iter} {elem})
	(errorif (cat {elem->obj_vtable != @} (f-path 'class 'vector)) 'error4)
	(d-call 'vector 'get_length {elem} {length})
	(f-call 'vector 'append {pdata->pdata_value, elem, 0, length})

	(f-exit 'vector 'callback '(1))
	(return)

(errorcases
(vp-label 'error4)
	(f-call 'ref 'deref {pdata->pdata_value})
	(f-call 'lisp 'repl_error {pdata->pdata_this, "(cat seq ...) not all lists", pdata->pdata_args} {_, pdata->pdata_value})
	(f-exit 'vector 'callback '(0))
	(return))

	(pop-scope-syms)

(vp-label 'callback2)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(f-jmp 'obj 'inst_of `((r1 0) (@ ,(f-path 'class 'string))))

(def-func-end)
