(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'class/error/error.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_cat)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_value)
	(def-struct-end)

	(ptr 'this 'value 'args 'first)
	(ulong 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length})
		(f-call 'vector 'get_element {args, 0} {first})
		(vpif {first->obj_vtable == @class/class_vector})
			(f-call 'vector 'create {} {value})
			(f-call 'vector 'for_each {args, 0, length, $callback1, &this} {_})
		(elseif {first->obj_vtable == @class/class_string || first->obj_vtable == @class/class_symbol})
			(f-call 'vector 'for_each {args, 1, length, $callback2, &this} {value})
			(vpifnot {value})
				(vpif {length == 2})
					(f-call 'vector 'get_element {args, 1} {value})
					(f-call 'string 'append {first, value} {value})
				(else)
					(f-call 'string 'cat {args} {value})
				(endif)
			(else)
				(f-call 'error 'create {"(cat seq ...) not all strings", value} {value})
			(endif)
		(else)
			(f-call 'error 'create {"(cat seq ...) not sequence type", value} {value})
		(endif)
	(else)
		(f-call 'error 'create {"(cat seq ...) wrong number of args", args} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(vp-label 'callback1)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata 'elem)
	(ulong 'length)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(assign {*iter} {elem})
	(vpif {elem->obj_vtable == @class/class_vector})
		(d-call 'vector 'get_length {elem} {length})
		(f-call 'vector 'append {pdata->pdata_value, elem, 0, length})
		(assign {1} '(r1))
	(else)
		(f-call 'ref 'deref {pdata->pdata_value})
		(f-call 'error 'create {"(cat seq ...) not all lists", elem} {pdata->pdata_value})
		(assign {0} '(r1))
	(endif)

	(pop-scope)
	(return)

(vp-label 'callback2)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(assign {(*iter)->obj_vtable == @class/class_string || (*iter)->obj_vtable == @class/class_symbol} '(r1))

	(pop-scope)
	(return)

(def-func-end)
