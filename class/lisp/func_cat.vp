(import 'sys/func.inc)
(import 'class/string/string.inc)
(import 'class/points/points.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_cat)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'elem 'type)
	(pptr 'iter_begin 'iter_end)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_cat {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorifnot {length} 'error1)
	(f-call 'vector 'get_begin {args} {_, iter_begin})
	(f-call 'vector 'get_end {args} {_, iter_end})
	(assign {*iter_begin} {elem})
	(f-call 'lisp 'env_args_type (cat {this, args, @} (f-path 'class 'string) {, -1}) {_, type})
	(vpif {type})
		(vpif {length == 2})
			(f-call 'vector 'get_element {args, 1} {_, value})
			(f-call 'string 'append {elem, value} {value})
		(else)
			(f-call 'string 'cat {args} {value})
		(endif)
	(else)
		(f-call 'lisp 'env_args_type (cat {this, args, @} (f-path 'class 'vector) {, -1}) {_, type})
		(vpif {type})
			(f-call 'vector 'create {} {value})
			(loop-while {iter_begin != iter_end})
				(assign {*iter_begin} {elem})
				(d-call 'vector 'get_length {elem} {_, length})
				(d-call 'vector 'append {value, elem, 0, length})
				(assign {iter_begin + ptr_size} {iter_begin})
			(loop-end)
		(else)
			(f-call 'lisp 'env_args_type (cat {this, args, @} (f-path 'class 'array) {, -1}) {_, type})
			(vpif {type})
				(f-call 'array 'create {} {value})
				(loop-while {iter_begin != iter_end})
					(assign {*iter_begin} {elem})
					(d-call 'array 'get_length {elem} {_, length})
					(d-call 'array 'append {value, elem, 0, length})
					(assign {iter_begin + ptr_size} {iter_begin})
				(loop-end)
			(else)
			(errorcases
				(f-call 'lisp 'env_args_type (cat {this, args, @} (f-path 'class 'points) {, -1}) {_, type})
				(errorifnot {type} 'error1))
				(f-call 'points 'create {} {value})
				(loop-while {iter_begin != iter_end})
					(assign {*iter_begin} {elem})
					(d-call 'points 'get_length {elem} {_, length})
					(d-call 'points 'append {value, elem, 0, length})
					(assign {iter_begin + ptr_size} {iter_begin})
				(loop-end)
			(endif)
		(endif)
	(endif)

(vp-label 'exit)
	(f-exit 'lisp 'func_cat {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(cat seq ...)", error_msg_wrong_types, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
