(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_string.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_cat)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_value)
	(def-struct-end)

	(ptr 'this 'value 'args)
	(ulong 'length)

	(push-scope)
	(retire '(r0, r1) '(this, args))

	(devirt-call 'vector 'get_length '(args) '(length))
	(vpif '((length)))
		(func-call 'vector 'get_element '(args, 0) '(value))
		(vpif '((value -> obj_vtable == @class/class_vector)))
			(func-call 'vector 'create '() '(value))
			(func-call 'vector 'for_each '(args, 0, length, $ callback, & this) '(_))
		(vpelseif '((value -> obj_vtable == @class/class_string)))
			(func-call 'ref 'ref '(value))
			(func-call 'vector 'for_each '(args, 1, length, $ callback, & this) '(_))
		(else)
			(func-call 'error 'create '("(cat seq ...) not sequence type", value) '(value))
		(endif)
	(else)
		(func-call 'error 'create '("(cat seq ...) wrong number of args", args) '(value))
	(endif)

	(expr '(this, value) '(r0, r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata 'elem)
	(ulong 'length)

	(push-scope)
	(retire '(r0, r1) '(pdata, iter))

	(assign '(* iter) '(elem))
	(vpif '((elem -> obj_vtable == pdata -> pdata_value->obj_vtable)))
		(switch)
		(case '((elem -> obj_vtable == @class/class_string)))
			(func-call 'string 'append '(pdata -> pdata_value, elem) '(elem))
			(func-call 'ref 'deref '(pdata -> pdata_value))
			(assign '(elem) '(pdata -> pdata_value))
			(break)
		(default)
			(devirt-call 'vector 'get_length '(elem) '(length))
			(func-call 'vector 'append '(pdata -> pdata_value, elem, 0, length))
		(endswitch)
		(expr '(1) '(r1))
	(else)
		(func-call 'ref 'deref '(pdata -> pdata_value))
		(func-call 'error 'create '("(cat seq ...) not matching type", elem) '(pdata -> pdata_value))
		(expr '(0) '(r1))
	(endif)

	(pop-scope)
	(return)

(def-func-end)
