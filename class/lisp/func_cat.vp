(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_cat)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'elem 'type)
	(pptr 'iter_begin 'iter_end)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_cat {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorifnot {length} 'error1)
	(f-call 'vector 'get_begin {args} {_, iter_begin})
	(f-call 'vector 'get_end {args} {_, iter_end})
	(assign {*iter_begin} {elem})
	(f-call 'obj 'inst_of (cat {elem, @} (f-path 'class 'string)) {_, type})
	(vpif {type})
	(errorcases
		(loop-start)
			(assign {iter_begin + ptr_size} {iter_begin})
			(breakif {iter_begin == iter_end})
			(f-call 'obj 'inst_of (cat {*iter_begin, @} (f-path 'class 'string)) {_, type})
			(errorifnot {type} 'error2)
		(loop-end))
		(vpif {length == 2})
			(f-call 'vector 'get_element {args, 1} {_, value})
			(f-call 'string 'append {elem, value} {value})
		(else)
			(f-call 'string 'cat {args} {value})
		(endif)
	(else)
		(errorif (cat {elem->obj_vtable != @} (f-path 'class 'vector)) 'error3)
		(f-call 'vector 'create {} {value})
		(loop-while {iter_begin != iter_end})
			(assign {*iter_begin} {elem})
		(errorcases
			(f-call 'obj 'inst_of (cat {elem, @} (f-path 'class 'vector)) {_, type})
			(errorifnot {type} 'error4))
			(d-call 'vector 'get_length {elem} {_, length})
			(f-call 'vector 'append {value, elem, 0, length})
			(assign {iter_begin + ptr_size} {iter_begin})
		(loop-end)
	(endif)

(vp-label 'exit)
	(f-exit 'lisp 'func_cat {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(cat seq ...) wrong number of args"} {value})
	(goto 'error)
(vp-label 'error2)
	(assign {"(cat seq ...) not all strings"} {value})
	(goto 'error)
(vp-label 'error3)
	(assign {"(cat seq ...) not sequence type"} {value})
	(goto 'error)
(vp-label 'error4)
	(f-call 'ref 'deref {value})
	(assign {"(cat seq ...) not all lists"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, 0, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
