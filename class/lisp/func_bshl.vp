(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_bshl)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = else value

	(ptr 'this 'args 'value 'num 'shift)
	(ulong 'length 'cnt)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length == 2})
		(f-call 'vector 'get_element {args, 0} {num})
		(vpif {num->obj_vtable == @class/class_boxed_long})
			(f-call 'vector 'get_element {args, 1} {shift})
			(vpif {shift->obj_vtable == @class/class_boxed_long})
				(f-call 'boxed_long 'get_value {num} {length})
				(f-call 'boxed_long 'get_value {shift} {cnt})
				(assign {length << cnt} {length})
				(f-call 'boxed_long 'create {} {value})
				(f-call 'boxed_long 'set_value {value, length})
			(else)
				(f-call 'lisp 'repl_error {this, "(bit-shl num cnt) not a count", args} {value})
			(endif)
		(else)
			(f-call 'lisp 'repl_error {this, "(bit-shl num cnt) not a number", args} {value})
		(endif)
	(else)
		(f-call 'lisp 'repl_error {this, "(bit-shl num cnt) wrong number of args", args} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
