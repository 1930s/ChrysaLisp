(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_bshl)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = else value

	(ptr 'this 'args 'value)
	(ulong 'num)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_bshl {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 2} 'error1)
	(f-call 'vector 'get_element {args, 0} {_, value})
	(errorif (cat {value->obj_vtable != @} (f-path 'class 'boxed_long)) 'error2)
	(f-call 'boxed_long 'get_value {value} {_, num})
	(f-call 'vector 'get_element {args, 1} {_, value})
	(errorif (cat {value->obj_vtable != @} (f-path 'class 'boxed_long)) 'error3)
	(f-call 'boxed_long 'get_value {value} {_, length})
	(f-call 'boxed_long 'create {} {value})
	(f-call 'boxed_long 'set_value {value, num << length})

(vp-label 'exit)
	(f-exit 'lisp 'func_bshl {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(bit-shl num cnt) wrong number of args"} {value})
	(goto 'error)
(vp-label 'error2)
	(assign {"(bit-shl num cnt) not a number"} {value})
	(goto 'error)
(vp-label 'error3)
	(assign {"(bit-shl num cnt) not a count"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
