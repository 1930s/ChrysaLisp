(import 'sys/func.inc)
(import 'class/stream/class.inc)
(import 'class/lisp/class.inc)
(import 'class/string/class.inc)

(def-method 'lisp 'read)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = stream object (ptr)
	;r2 = next char (uint)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = ast vector (ptr)
	;r2 = next char (uint)

	(ptr 'this 'stream 'ast)
	(int 'char)

	(push-scope)
	(f-entry 'lisp 'read {this, stream, char})

	;skip white space
(vp-label 'skip_white)
	(loop-whilenot {char > char_space || char == -1})
		(f-call 'lisp 'read_char {this, stream, char} {_, char})
	(loop-end)

	;what are we reading ?
	(vpif {char != -1})
		(switch)
		(case {char == char_semi})
			(f-call 'stream 'skip_not {stream, char_lf})
			(f-call 'stream 'read_char {stream} {_, char})
			(goto 'skip_white)
		(case {char == char_rrb})
			(f-call 'lisp 'repl_error {this, "unexpected )", 0, this->lisp_sym_nil} {_, ast})
			(f-call 'stream 'read_char {stream} {_, char})
			(break)
		(case {char == char_rcb})
			(f-call 'lisp 'repl_error (cat {this, "unexpected } "}" {", 0, this->lisp_sym_nil}) {_, ast})
			(f-call 'stream 'read_char {stream} {_, char})
			(break)
		(case {char == char_lrb})
			(f-call 'lisp 'read_list {this, stream, char} {_, ast, char})
			(break)
		(case {char == char_minus || (char >= char_0 && char <= char_9)})
			(f-call 'lisp 'read_num {this, stream, char} {_, ast, char})
			(break)
		(case {char == char_double_quote})
			(f-call 'lisp 'read_str {this, stream, char, char_double_quote} {_, ast, char})
			(break)
		(case {char == char_lcb})
			(f-call 'lisp 'read_str {this, stream, char, char_rcb} {_, ast, char})
			(break)
		(case {char == char_quote})
			(f-call 'lisp 'read_rmacro {this, stream, char, this->lisp_sym_quote} {_, ast, char})
			(break)
		(case {char == char_tick})
			(f-call 'lisp 'read_rmacro {this, stream, char, this->lisp_sym_qquote} {_, ast, char})
			(break)
		(case {char == char_comma})
			(f-call 'lisp 'read_rmacro {this, stream, char, this->lisp_sym_unquote} {_, ast, char})
			(break)
		(case {char == char_tilda})
			(f-call 'lisp 'read_rmacro {this, stream, char, this->lisp_sym_splicing} {_, ast, char})
			(break)
		(default)
			(f-call 'lisp 'read_sym {this, stream, char} {_, ast, char})
		(endswitch)
	(else)
		(f-call 'obj 'ref {this->lisp_sym_nil} {ast})
	(endif)

	(f-exit 'lisp 'read {this, ast, char})
	(pop-scope)
	(return)

(def-func-end)
