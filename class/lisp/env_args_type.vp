(import 'sys/func.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/env_args_type)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr) vector
	;r2 = type/s pointer
	;r3 = - or 0 all same type check, else + for type signature check
	;outputs
	;r0 = lisp object (ptr)
	;r1 = 0 if error, else ok

	(ptr 'this 'args 'value)
	(pushort 'types)
	(union
		'(pptr 'iter_begin 'iter_end)
		'(int 'argc 'length))

	(push-scope)
	(f-entry 'lisp 'env_args_type {this, args, types, argc})

	(d-call 'vector 'get_length {args} {_, length})
	(vpif {argc <= 0})
		(errorif {length < -argc} 'error)
		(f-call 'vector 'get_iters {args} {_, iter_begin, iter_end})
		(loop-while {iter_begin != iter_end})
			(f-call 'obj 'inst_of {*iter_begin, types} {_, value})
			(gotoifnot {value} 'exit)
			(assign {iter_begin + ptr_size} {iter_begin})
		(loop-end)
	(else)
		(errorif {length != argc} 'error)
		(f-call 'vector 'get_iters {args} {_, iter_begin, iter_end})
		(loop-while {iter_begin != iter_end})
			(f-call 'obj 'inst_of {*iter_begin, ptr(*types + types)} {_, value})
			(gotoifnot {value} 'exit)
			(assign {iter_begin + ptr_size} {iter_begin})
			(assign {types + short_size} {types})
		(loop-end)
	(endif)
	(assign {-1} {value})

(vp-label 'exit)
	(f-exit 'lisp 'env_args_type {this, value})
	(return)

(errorcases
(vp-label 'error)
	(assign {0} {value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
