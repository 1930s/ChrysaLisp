(import 'sys/func.inc)
(import 'sys/kernel/kernel.inc)
(import 'gui/gui.inc)
(import 'class/canvas/canvas.inc)
(import 'class/points/points.inc)
(import 'class/window/window.inc)
(import 'class/button/button.inc)
(import 'class/stream/stream.inc)
(import 'class/symbol/symbol.inc)
(import 'class/slave/slave.inc)
(import 'class/flow/flow.inc)
(import 'class/grid/grid.inc)
(import 'class/font/font.inc)
(import 'class/text/text.inc)
(import 'class/progress/progress.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-struct 'class_entry)
	(ushort 'class)
	(ushort 'slot_table)
(def-struct-end)

(def-struct 'slot_entry)
	(ushort 'slot)
	(ushort 'handler)
(def-struct-end)

(defun class-entry (c)
	;c = class symbol
	(vp-short
		(list 'sub (label-sym (link-sym (fn-find-link (f-path 'class c)))) '*pc* 0)
		(list 'sub (label-sym (cat c "_slot_table")) '*pc* 2)))

(defun slot-entry (c s)
	;c = class symbol
	;s = slot symbol
	(vp-short
		(method-slot c s)
		(list 'sub '*pc* (label-sym (cat c "_" s "_handler")) 2)))

(def-func 'class/lisp/func_call)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value 'table)
	(long 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6 'arg7)
	(union
		'(uint 'length)
		'(uint 'slot))

	(push-scope)
	(f-entry 'lisp 'func_call {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length < 2} 'error1)
	(f-call 'vector 'get_first {args} {_, value})
	(errorif (cat {value->obj_vtable != @} (f-path 'class 'boxed_long)) 'error1)
	(f-call 'boxed_long 'get_value {value} {_, slot})
	(f-call 'vector 'get_second {args} {_, value})
	(assign {value->obj_vtable} {value})

	;lookup handler in dispatch tables
	(assign {$class_table} {table})
	(loop-while {table->class_entry_class} 'error)
		(vpif {ptr(&table->class_entry_class + table->class_entry_class) == value})
			(assign {&table->class_entry_slot_table + table->class_entry_slot_table} {table})
			(loop-start)
				(breakifnot {table->slot_entry_slot} error)
				(vpif {table->slot_entry_slot == slot})
					(assign {&table->slot_entry_handler - table->slot_entry_handler} '(r0))
					(vp-jmp-r r0)
				(endif)
				(assign {table + slot_entry_size} {table})
			(loop-end)
		(endif)
		(assign {table + class_entry_size} {table})
	(loop-end)
(errorcases
	(goto 'error1))

	(switch)
;canvas class handlers
(vp-label 'canvas_fill_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LCL, 3} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'canvas 'fill {arg0, arg1})
		(break)
(vp-label 'canvas_swap_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LC, 2} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'canvas 'swap {arg0})
		(f-call 'canvas 'dirty {arg0})
		(break)
(vp-label 'canvas_set_fbox_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LCLLLLL, 7} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'canvas 'set_fbox {arg0, arg1, arg2, arg3, arg4, arg5})
		(break)
(vp-label 'canvas_set_fpoly_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LCVLL, 5} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'canvas 'set_fpoly {arg0, arg1, arg2, arg3})
		(break)
(vp-label 'canvas_blend_fbox_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LCLLLLL, 7} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'canvas 'blend_fbox {arg0, arg1, arg2, arg3, arg4, arg5})
		(break)
(vp-label 'canvas_blend_fpoly_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LCVLL, 5} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'canvas 'blend_fpoly {arg0, arg1, arg2, arg3})
		(break)

;points class handlers
(vp-label 'points_gen_quadratic_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LPALLLL, 7} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'points 'gen_quadratic {arg0, arg1, arg2, arg3, arg4, arg5})
		(break)
(vp-label 'points_gen_cubic_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LPALLLLL, 8} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'points 'gen_cubic {arg0, arg1, arg2, arg3, arg4, arg5, arg6})
		(break)
(vp-label 'points_gen_arc_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LPALLLLL, 8} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'points 'gen_arc {arg0, arg1, arg2, arg3, arg4, arg5, arg6})
		(break)
(vp-label 'points_transform_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LPPLLL, 6} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'points 'transform {arg0, arg1, arg2, arg3, arg4})
		(break)
(vp-label 'points_simplify_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LPPAL, 5} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'points 'simplify {arg0, arg1, arg2, arg3})
		(break)

;vector class handlers
(vp-label 'points_stroke_polylines_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LVAVLLLLL, 9} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'points 'stroke_polylines {arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7})
		(break)
(vp-label 'points_stroke_polygons_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LVAVLLL, 7} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'points 'stroke_polygons {arg0, arg1, arg2, arg3, arg4, arg5})
		(break)

;window class handlers
(vp-label 'window_set_title_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LWS, 3} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'window 'set_title {arg0, &arg1->string_data})
		(break)
(vp-label 'window_set_status_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LWS, 3} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'window 'set_status {arg0, &arg1->string_data})
		(break)
(vp-label 'window_connect_close_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LWL, 3} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'window 'connect_close {arg0, arg1})
		(break)
(vp-label 'window_connect_min_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LWL, 3} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'window 'connect_min {arg0, arg1})
		(break)
(vp-label 'window_connect_max_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LWL, 3} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'window 'connect_max {arg0, arg1})
		(break)

;view class handlers
(vp-label 'view_add_child_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LVV, 3} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(v-call 'view 'add_child {arg0, arg1})
		(f-call 'obj 'ref {arg1})
		(break)
(vp-label 'view_pref_size_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LV, 2} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(v-call 'view 'pref_size {arg0} {_, arg1, arg2})
		(f-call 'vector 'create {} {value})
		(f-call 'boxed_long 'create {arg1} {arg1})
		(f-call 'boxed_long 'create {arg2} {arg2})
		(f-call 'vector 'push_back {value, arg1})
		(f-call 'vector 'push_back {value, arg2})
		(goto 'exit)
(vp-label 'view_change_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LVLLLL, 6} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'view 'change {arg0, arg1, arg2, arg3, arg4})
		(break)
(vp-label 'view_event_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LVS, 3} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(v-call 'view 'event {arg0, &arg1->string_data})
		(break)
(vp-label 'view_layout_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LV, 2} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(v-call 'view 'layout {arg0})
		(break)
(vp-label 'view_dirty_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LV, 2} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'view 'dirty {arg0})
		(break)
(vp-label 'view_find_id_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LVL, 3} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'view 'find_id {arg0, arg1} {_, arg0})
		(vpifnot {arg0})
			(assign {this->lisp_sym_nil} {arg0})
		(endif)
		(break)

;gui class handlers
(vp-label 'gui_gui_add_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LV, 2} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'gui_gui 'add {arg0})
		(break)

;button class handlers
(vp-label 'button_connect_click_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LBL, 3} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'button 'connect_click {arg0, arg1})
		(break)

;slave class handlers
(vp-label 'slave_get_args_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LI, 2} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'slave 'get_args {arg0} {_, arg0})
		(vpifnot {arg0})
			(assign {this->lisp_sym_nil} {arg0})
		(endif)
		(break)

;stream class handlers
(vp-label 'stream_available_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LM, 2} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'stream 'available {arg0} {_, arg0})
		(f-call 'boxed_long 'create {arg0} {value})
		(goto 'exit)
(vp-label 'stream_write_flush_handler)
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $sig_LM, 2} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(v-call 'stream 'write_flush {arg0})
		(break)
	(endswitch)
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'lisp 'func_call {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(call slot obj ...)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig_LI 'boxed_long 'slave)
	(signature 'sig_LM 'boxed_long 'stream)
	(signature 'sig_LBL 'boxed_long 'button 'boxed_long)
	(signature 'sig_LC 'boxed_long 'canvas)
	(signature 'sig_LCL 'boxed_long 'canvas 'boxed_long)
	(signature 'sig_LCLLLLL 'boxed_long 'canvas 'boxed_long 'boxed_long 'boxed_long 'boxed_long 'boxed_long)
	(signature 'sig_LCVLL 'boxed_long 'canvas 'vector 'boxed_long 'boxed_long)
	(signature 'sig_LPALLLL 'boxed_long 'points 'array 'boxed_long 'boxed_long 'boxed_long 'boxed_long)
	(signature 'sig_LPALLLLL 'boxed_long 'points 'array 'boxed_long 'boxed_long 'boxed_long 'boxed_long 'boxed_long)
	(signature 'sig_LPPAL 'boxed_long 'points 'points 'array 'boxed_long)
	(signature 'sig_LPPLLL 'boxed_long 'points 'points 'boxed_long 'boxed_long 'boxed_long)
	(signature 'sig_LV 'boxed_long 'view)
	(signature 'sig_LVL 'boxed_long 'view 'boxed_long)
	(signature 'sig_LVS 'boxed_long 'view 'string)
	(signature 'sig_LVAVLLL 'boxed_long 'vector 'array 'vector 'boxed_long 'boxed_long 'boxed_long)
	(signature 'sig_LVAVLLLLL 'boxed_long 'vector 'array 'vector 'boxed_long 'boxed_long 'boxed_long 'boxed_long 'boxed_long)
	(signature 'sig_LVLLLL 'boxed_long 'view 'boxed_long 'boxed_long 'boxed_long 'boxed_long)
	(signature 'sig_LVV 'boxed_long 'view 'view)
	(signature 'sig_LWL 'boxed_long 'window 'boxed_long)
	(signature 'sig_LWS 'boxed_long 'window 'string))

	(pop-scope-syms)

;;;;;;;;;;;;;
; class table
;;;;;;;;;;;;;

	(vp-align short_size)
(vp-label 'class_table)
	(class-entry 'slave)
	(class-entry 'stream)
	(class-entry 'msg_in)
	(class-entry 'msg_out)
	(class-entry 'canvas)
	(class-entry 'points)
	(class-entry 'vector)
	(class-entry 'button)
	(class-entry 'label)
	(class-entry 'progress)
	(class-entry 'window)
	(class-entry 'flow)
	(class-entry 'grid)
	(class-entry 'view)
	(vp-short 0)

;;;;;;;;;;;;;
; slot tables
;;;;;;;;;;;;;

(vp-label 'window_slot_table)
	(slot-entry 'window 'set_title)
	(slot-entry 'window 'set_status)
	(slot-entry 'window 'connect_close)
	(slot-entry 'window 'connect_min)
	(slot-entry 'window 'connect_max)
(vp-label 'flow_slot_table)
(vp-label 'grid_slot_table)
(vp-label 'progress_slot_table)
(vp-label 'view_slot_table)
	(slot-entry 'view 'event)
	(slot-entry 'view 'find_id)
	(slot-entry 'gui_gui 'add)
(vp-label 'label_slot_table)
	(slot-entry 'view 'add_child)
	(slot-entry 'view 'pref_size)
	(slot-entry 'view 'change)
	(slot-entry 'view 'layout)
	(slot-entry 'view 'dirty)
	(vp-short 0)

(vp-label 'slave_slot_table)
	(slot-entry 'slave 'get_args)
	(vp-short 0)

(vp-label 'msg_in_slot_table)
(vp-label 'msg_out_slot_table)
(vp-label 'stream_slot_table)
	(slot-entry 'stream 'available)
	(slot-entry 'stream 'write_flush)
	(vp-short 0)

(vp-label 'button_slot_table)
	(slot-entry 'button 'connect_click)
	(vp-short 0)

(vp-label 'canvas_slot_table)
	(slot-entry 'canvas 'fill)
	(slot-entry 'canvas 'swap)
	(slot-entry 'canvas 'set_fbox)
	(slot-entry 'canvas 'set_fpoly)
	(slot-entry 'canvas 'blend_fbox)
	(slot-entry 'canvas 'blend_fpoly)
	(vp-short 0)

(vp-label 'points_slot_table)
	(slot-entry 'points 'gen_quadratic)
	(slot-entry 'points 'gen_cubic)
	(slot-entry 'points 'gen_arc)
	(slot-entry 'points 'transform)
	(slot-entry 'points 'simplify)
	(vp-short 0)

(vp-label 'vector_slot_table)
	(slot-entry 'points 'stroke_polylines)
	(slot-entry 'points 'stroke_polygons)
	(vp-short 0)

(def-func-end)
