(import 'sys/func.inc)
(import 'class/canvas/canvas.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_call)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = else value

	(ptr 'this 'args 'value)
	(uint 'length 'slot)
	(long 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5)

	(push-scope)
	(f-entry 'lisp 'func_call {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorifnot {length} 'error1)
	(f-call 'vector 'get_element {args, 0} {_, value})
	(errorif (cat {value->obj_vtable != @} (f-path 'class 'boxed_long)) 'error1)
	(f-call 'boxed_long 'get_value {value} {_, slot})
	(switch)
	(case (cat {slot == } (str (method-slot 'canvas 'set_fbox))))
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $canvas_set_fbox, 7} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'canvas 'set_fbox {arg0, arg1, arg2, arg3, arg4, arg5})
		(break)
	(case (cat {slot == } (str (method-slot 'canvas 'fill))))
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $canvas_fill, 3} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'canvas 'fill {arg0, arg1})
		(break)
	(case (cat {slot == } (str (method-slot 'canvas 'swap))))
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $canvas_swap, 2} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'canvas 'swap {arg0})
		(f-call 'canvas 'dirty {arg0})
		(break)
	(case (cat {slot == } (str (method-slot 'canvas 'set_fpoly))))
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $canvas_set_fpoly, 5} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &arg0, 1})
		(f-call 'canvas 'set_fpoly {arg0, arg1, arg2, arg3})
		(break)
	(default)
	(errorcases
		(goto 'error1))
	(endswitch)
	(f-call 'ref 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'lisp 'func_call {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(call slot obj ...)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'canvas_swap 'boxed_long 'canvas)
	(signature 'canvas_fill 'boxed_long 'canvas 'boxed_long)
	(signature 'canvas_set_fbox 'boxed_long 'canvas 'boxed_long 'boxed_long 'boxed_long 'boxed_long 'boxed_long)
	(signature 'canvas_set_fpoly 'boxed_long 'canvas 'vector 'boxed_long 'boxed_long))

	(pop-scope-syms)

(def-func-end)
