(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'class/master/master.inc)
(import 'class/stream_msg_out/stream_msg_out.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_wpipe)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'pipe 'stream)
	(uint 'length 'state)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(gotoif {length != 2} 'error1)
	(f-call 'vector 'get_element {args, 0} {pipe})
	(gotoif (cat {pipe->obj_vtable != @} (f-path 'class 'master)) 'error2)
	(f-call 'master 'get_state {pipe} {state})
	(gotoifnot {state != stream_mail_state_stopped} 'error3)
	(f-call 'vector 'get_element {args, 1} {value})
	(f-call 'obj 'inst_of (cat {value, @} (f-path 'class 'string)) {stream})
	(vpif {stream})
		(f-call 'master 'get_input {pipe} {stream})
		(f-call 'stream 'write {stream, &value->string_data, value->string_length})
		(v-call 'stream 'write_flush {stream})
		(f-call 'ref 'ref {value})
	(else)
		(gotoif {value != this->lisp_sym_nil} 'error4)
		;flush input
		(f-call 'master 'get_input {pipe} {stream})
		(v-call 'stream 'write_flush {stream})
		;send stopping
		(f-call 'stream_msg_out 'set_state {stream, stream_mail_state_stopping})
		(v-call 'stream 'write_next {stream})
		(v-call 'stream 'write_flush {stream})
		(f-call 'ref 'ref {value})
	(endif)

(vp-label 'exit)
	(assign {this, value} '(r0 r1))
	(return)

(vp-label 'error1)
	(assign {"(pipe-write pipe str) wrong number of args"} {value})
	(goto 'error)
(vp-label 'error2)
	(assign {"(pipe-write pipe str) not pipe"} {value})
	(goto 'error)
(vp-label 'error3)
	(assign {"(pipe-write pipe str) pipe is closed"} {value})
	(goto 'error)
(vp-label 'error4)
	(assign {"(pipe-write pipe str) not string"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, args} {value})
	(goto 'exit)

	(pop-scope-syms)

(def-func-end)
