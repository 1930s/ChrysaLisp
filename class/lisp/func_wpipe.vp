(import 'inc/func.inc)
(import 'class/string/string.inc)
(import 'class/master/master.inc)
(import 'class/stream_msg_out/stream_msg_out.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_wpipe)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'pipe)
	(union
		'(pptr 'iter_begin)
		'(ptr 'stream)
		'(uint 'state))

	(push-scope)
	(f-entry 'lisp 'func_wpipe {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 2} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size]} {pipe, value})
	(f-call 'master 'get_state {pipe} {_, state})
	(errorifnot {state != stream_mail_state_stopped} 'error2)
	(f-call 'obj 'inst_of (cat {value, @} (f-path 'class 'string)) {_, stream})
	(switch)
	(case {stream})
		(f-call 'master 'get_input {pipe} {_, stream})
		(f-call 'stream 'write {stream, &value->string_data, value->string_length})
		(goto 'flush)
	(default)
		(errorif {value != this->lisp_sym_nil} 'error1)
		;flush input
		(f-call 'master 'get_input {pipe} {_, stream})
		(v-call 'stream 'write_flush {stream})
		;send stopping
		(f-call 'stream_msg_out 'set_state {stream, stream_mail_state_stopping})
		(v-call 'stream 'write_next {stream})
	(vp-label 'flush)
		(v-call 'stream 'write_flush {stream})
	(endif)
	(f-call 'ref 'ref {value})

(vp-label 'exit)
	(f-exit 'lisp 'func_wpipe {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(pipe-write pipe str)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
(vp-label 'error2)
	(f-call 'lisp 'repl_error {this, "(pipe-write pipe str)", error_msg_open_error, args} {_, value})
	(goto 'exit)
	(signature 'sig 'master 'obj))

	(pop-scope-syms)

(def-func-end)
