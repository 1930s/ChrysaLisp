(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/repl_eval_list)
	;inputs
	;r0 = lisp object
	;r1 = list
	;r2 = start index
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'list)
	(pptr 'iter)
	(uint 'index 'length)

	(push-scope)
	(f-entry 'lisp 'repl_eval_list {this, list, index})

	(d-call 'vector 'get_length {list} {length})
	(f-call 'vector 'for_each {list, index, length, $callback, this} {iter})
	(vpif {iter})
		(assign {*iter} {list})
	(endif)
	(f-call 'ref 'ref {list})

	(f-exit 'lisp 'repl_eval_list {this, list})
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(f-entry 'vector 'callback {pdata, iter})

	(f-call 'lisp 'repl_eval {pdata, *iter} {_, pdata})
	(f-call 'ref 'deref {*iter})
	(assign {pdata} {*iter})

	(errorassign (cat {pdata->obj_vtable != @} (f-path 'class 'error)) '(r1))
	(pop-scope)
	(return)

(def-func-end)
