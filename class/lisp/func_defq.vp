(import 'sys/func.inc)
(import 'class/hash_map/class.inc)
(import 'class/symbol/class.inc)
(import 'class/lisp/class.inc)

(def-method 'lisp 'func_defq)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'var 'val)
	(union
		'(pptr 'iter_begin 'iter_end)
		'(uint 'length))

	(push-scope)
	(f-entry 'lisp 'func_defq {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length < 3 || !(length & 1)} 'error1)
	(f-call 'vector 'get_iters {args} {_, iter_begin, iter_end})
	(assign {0, iter_begin + ptr_size} {val, iter_begin})
	(loop-start)
		(f-call 'obj 'deref_if {val})
		(assign {iter_begin[ptr_size * 0]} {var})
		(errorif (cat {var->obj_vtable != @} (f-path 'symbol 'vtable)) 'error2)
		(f-call 'lisp 'repl_eval {this, iter_begin[ptr_size * 1]} {_, val})
		(errorif (cat {val->obj_vtable == @} (f-path 'error 'vtable)) 'exit)
		(f-call 'hash_map 'insert {this->lisp_environment, var, val})
		(assign {&iter_begin[ptr_size * 2]} {iter_begin})
	(loop-until {iter_begin == iter_end})

(vp-label 'exit)
	(f-exit 'lisp 'func_defq {this, val})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(defq var val [var val] ...)", error_msg_wrong_num_of_args, args} {_, val})
	(goto 'exit)
(vp-label 'error2)
	(f-call 'lisp 'repl_error {this, "(defq var val [var val] ...)", error_msg_not_a_symbol, args} {_, val})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
