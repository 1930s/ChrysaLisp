(import 'sys/func.inc)
(import 'sys/load.inc)
(import 'class/string/string.inc)
(import 'class/stream_str/stream_str.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/read_str)
	;inputs
	;r0 = lisp object
	;r1 = stream
	;r2 = next char
	;r3 = closing char
	;outputs
	;r0 = lisp object
	;r1 = string
	;r2 = next char

	(ptr 'this 'stream)
	(union
		'(ptr 'str_stream 'value)
		'(pubyte 'bufp 'bufe))
	(int 'char 'cchar)

	(push-scope)
	(f-entry 'lisp 'read_str {this, stream, char, cchar})

	(switch)
		(assign {stream->stream_bufp, stream->stream_bufe} {bufp, bufe})
		(loop-start)
			(gotoif {bufp == bufe} 'slow_but_sure)
			(assign {*bufp} {char})
			(assign {bufp + byte_size} {bufp})
		(loop-until {char == cchar})
		(f-call 'string 'create_from_buffer {stream->stream_bufp, bufp - stream->stream_bufp - byte_size} {value})
		(assign {bufp} {stream->stream_bufp})
		(break)
	(default)
	(vp-label 'slow_but_sure)
		(f-call 'string 'create_raw {string_gap} {value})
		(f-call 'stream_str 'create {value} {str_stream})
		(f-call 'stream 'read_char {stream} {_, char})
		(loop-whilenot {char == -1 || char == cchar})
			(f-call 'stream 'write_char {str_stream, char})
			(f-call 'stream 'read_char {stream} {_, char})
		(loop-end)
		(f-call 'stream_str 'ref_string {str_stream} {_, value})
		(f-call 'ref 'deref {str_stream})
	(endswitch)
	(f-call 'stream 'read_char {stream} {_, char})

	(f-exit 'lisp 'read_str {this, value, char})
	(pop-scope)
	(return)

(def-func-end)
