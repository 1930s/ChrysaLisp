(import 'inc/func.inc)
(import 'class/class_stream.inc)
(import 'class/class_pair.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/repl_read_pair)
	;inputs
	;r0 = lisp object
	;r1 = stream
	;r2 = next char
	;outputs
	;r0 = lisp object
	;r1 = pair
	;r2 = next char

	(const 'char_space (ascii " "))
	(const 'char_rab (ascii ">"))

	(ptr 'this 'stream 'pair 'first 'second)
	(ulong 'char)

	(push-scope)
	(retire '(r0 r1 r2) {this, stream, char})

	;skip "<"
	(func-call 'stream 'read_char {stream} {char})

	(func-call 'lisp 'repl_read {this, stream, char} {first, char})
	(vpif {first->obj_vtable == @class/class_error})
		(assign {first} {pair})
		goto error
	(endif)
	(func-call 'lisp 'repl_read {this, stream, char} {second, char})
	(vpif {second->obj_vtable == @class/class_error})
		(func-call 'ref 'deref {first})
		(assign {second} {pair})
		goto error
	(endif)

	;skip white space
	(loop-while {char <= char_space && char != -1})
		(func-call 'stream 'read_char {stream} {char})
	(loop-end)

	(vpif {char == char_rab})
		(func-call 'stream 'read_char {stream} {char})
		(func-call 'pair 'create {first, second} {pair})
	(else)
		(func-call 'ref 'deref {second})
		(func-call 'ref 'deref {first})
		(func-call 'error 'create {"expected >", this->lisp_sym_nil} {pair})
	(endif)
(vp-label 'error)
	(expr {this, pair, char} '(r0 r1 r2))
	(pop-scope)
	(return)

(def-func-end)
