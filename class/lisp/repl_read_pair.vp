(import 'inc/func.inc)
(import 'class/stream/stream.inc)
(import 'class/string/string.inc)
(import 'class/pair/pair.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/repl_read_pair)
	;inputs
	;r0 = lisp object
	;r1 = stream
	;r2 = next char
	;outputs
	;r0 = lisp object
	;r1 = pair
	;r2 = next char

	(ptr 'this 'stream 'pair 'first 'second)
	(ulong 'char)

	(push-scope)
	(f-entry 'lisp 'repl_read_pair {this, stream, char})

	;skip "["
	(f-call 'stream 'read_char {stream} {char})

	(f-call 'lisp 'repl_read {this, stream, char} {_, first, char})
	(vpif (cat {first->obj_vtable == @} (f-path 'class 'error)))
		(assign {first} {pair})
		(goto 'error)
	(endif)
	(f-call 'lisp 'repl_read {this, stream, char} {_, second, char})
	(vpif (cat {second->obj_vtable == @} (f-path 'class 'error)))
		(f-call 'ref 'deref {first})
		(assign {second} {pair})
		(goto 'error)
	(endif)

	;skip white space
	(loop-while {char <= char_space && char != -1})
		(f-call 'lisp 'repl_read_char {this, stream, char} {_, char})
	(loop-end)

	(vpif {char == char_rsb})
		(f-call 'stream 'read_char {stream} {char})
		(f-call 'pair 'create {first, second} {pair})
	(else)
		(f-call 'ref 'deref {second})
		(f-call 'ref 'deref {first})
		(f-call 'lisp 'repl_error {this, "expected >", this->lisp_sym_nil} {_, pair})
	(endif)

(vp-label 'error)
	(f-exit 'lisp 'repl_read_pair {this, pair, char})
	(pop-scope)
	(return)

(def-func-end)
