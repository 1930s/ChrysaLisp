(import 'inc/func.inc)
(import 'class/stream/stream.inc)
(import 'class/string/string.inc)
(import 'class/pair/pair.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/repl_read_pair)
	;inputs
	;r0 = lisp object
	;r1 = stream
	;r2 = next char
	;outputs
	;r0 = lisp object
	;r1 = pair
	;r2 = next char

	(ptr 'this 'stream 'pair 'first 'second)
	(int 'char)

	(push-scope)
	(f-entry 'lisp 'repl_read_pair {this, stream, char})

	;skip "["
	(f-call 'stream 'read_char {stream} {_, char})

	(f-call 'lisp 'repl_read {this, stream, char} {_, first, char})
	(errorif (cat {first->obj_vtable == @} (f-path 'class 'error)) 'error1)
	(f-call 'lisp 'repl_read {this, stream, char} {_, second, char})
	(errorif (cat {second->obj_vtable == @} (f-path 'class 'error)) 'error2)

	;skip white space
	(loop-whilenot {char > char_space || char == -1})
		(f-call 'lisp 'repl_read_char {this, stream, char} {_, char})
	(loop-end)
	(errorif {char != char_rsb} 'error3)

	(f-call 'stream 'read_char {stream} {_, char})
	(f-call 'pair 'create {first, second} {pair})

(vp-label 'exit)
	(f-exit 'lisp 'repl_read_pair {this, pair, char})
	(return)

(errorcases
(vp-label 'error2)
	(f-call 'ref 'deref {first})
	(assign {second} {pair})
	(goto 'exit)
(vp-label 'error1)
	(assign {first} {pair})
	(goto 'exit)
(vp-label 'error3)
	(f-call 'ref 'deref {second})
	(f-call 'ref 'deref {first})
	(f-call 'lisp 'repl_error {this, "expected >", 0, this->lisp_sym_nil} {_, pair})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
