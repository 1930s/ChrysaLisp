(import 'inc/func.inc)
(import 'class/class_unordered_set.inc)
(import 'class/class_unordered_map.inc)
(import 'class/class_symbol.inc)
(import 'class/class_lisp.inc)

(def-struct 'built_in)
	(ushort 'built_in_symbol)
	(ushort 'built_in_field)
	(ushort 'built_in_function)
	(ushort 'built_in_flags)
	(offset 'built_in_hop)
	;built_in_size would be aligned to long !
(def-struct-end)

(defun built-in (s f &optional u g)
	;s = symbol
	;f = field
	;u = function
	;g = flags
	(vp-short
		`(sub ,(sym (cat "_ref_" (str (fn-add-string s)) "_string")) (length *out-buffer))
		f
		(if u (progn (func-path 'lisp u) `(sub ,(sym (cat "_ref_" (str (fn_find_link _function_)) "_link")) (length *out-buffer))) 0)
		(if g g type_args_eval_apply)))

(def-func 'class/lisp/init)
	;inputs
	;r0 = object
	;r1 = vtable pointer
	;r2 = stdin stream
	;r3 = stdout stream
	;r5 = stderr stream
	;outputs
	;r0 = object
	;r1 = 0 if error, else ok
	;trashes
	;all

	(ptr 'this 'vtable 'stdin 'stdout 'stderr 'symbol 'table)
	(pptr 'path_ptr)
	(ulong 'ok)

	(push-scope)
	(retire '(r0, r1, r2, r3, r5) '(this, vtable, stdin, stdout, stderr))

	;init parent
	(super-call 'lisp 'init '(this, vtable) '(ok))
	(vpif '((ok)))
		;init myself
		(assign '(stdin) '(this -> lisp_stdin))
		(assign '(stdout) '(this -> lisp_stdout))
		(assign '(stderr) '(this -> lisp_stderr))
		(assign '(0) '(this -> lisp_nextsym))

		;interned symbols set and enviroments
		(func-path 'symbol 'compare)
		(func-call 'unordered_set 'create '(@ _function_, 101) '(this -> lisp_symbols))
		(func-call 'unordered_map 'create '($ match_obj, 31) '(this -> lisp_enviroment))
		(func-call 'unordered_map 'create '($ match_obj, 31) '(this -> lisp_macros))

		;intern standard built in symbols
		;fixup built in functions
		(assign '($ built_ins) '(table))
		(loop-while '((table -> built_in_symbol)))
			(assign '(& table -> built_in_symbol + table -> built_in_symbol) '(path_ptr))
			(func-call 'lisp 'sym_intern_cstr '(this, path_ptr) '(symbol))
			(vpif '((table -> built_in_field)))
				(assign '(this + table -> built_in_field) '(path_ptr))
				(assign '(symbol) '(* path_ptr))
			(endif)
			(vpif '((table -> built_in_function)))
				(assign '(& table -> built_in_function + table -> built_in_function) '(path_ptr))
				(func-call 'lisp 'built_in_func '(this, symbol, * path_ptr, table -> built_in_flags))
			(endif)
			(assign '(table + built_in_hop) '(table))
		(loop-end)

		;standard self evaulating symbols
		(func-call 'unordered_map 'insert '(this -> lisp_enviroment, this -> lisp_sym_nil, this -> lisp_sym_nil) '(_, _))
		(func-call 'unordered_map 'insert '(this -> lisp_enviroment, this -> lisp_sym_t, this -> lisp_sym_t) '(_, _))
	(endif)

	(expr '(this, ok) '(r0, r1))
	(pop-scope)
	(return)

(vp-label 'match_obj)
	;inputs
	;r0 = object 1
	;r1 = object 2
	;outputs
	;r1 = 0 if match

	(vpif '(r0 == r1))
		(vp-xor-rr r1 r1)
	(endif)
	(vp-ret)

;;;;;;;;;;;
; built ins
;;;;;;;;;;;

	(vp-align short_size)
(vp-label 'built_ins)
	(built-in "*parent*" lisp_sym_parent)
	(built-in "&rest" lisp_sym_rest)
	(built-in "&optional" lisp_sym_optional)
	(built-in "nil" lisp_sym_nil)
	(built-in "t" lisp_sym_t)
	(built-in "list" lisp_sym_list)

	(built-in "lambda" lisp_sym_lambda 'func_lambda type_apply)

	(built-in "defq" 0 'func_defq type_args_apply)
	(built-in "setq" 0 'func_setq type_args_apply)
	(built-in "cond" 0 'func_cond type_args_apply)
	(built-in "defmacro" 0 'func_defmacro type_args_apply)
	(built-in "while" 0 'func_while type_args_apply)
	(built-in "quote" lisp_sym_quote 'func_quote type_args_apply)
	(built-in "quasi-quote" lisp_sym_qquote 'func_qquote type_args_apply)

	(built-in "unquote" lisp_sym_unquote)
	(built-in "unquote-splicing" lisp_sym_splicing)
	(built-in "cat" lisp_sym_cat 'func_cat)

	(built-in "def" 0 'func_def)
	(built-in "set" 0 'func_set)
	(built-in "macroexpand-1" 0 'func_macroexpand_1)
	(built-in "macroexpand" 0 'func_macroexpand)
	(built-in "gensym" 0 'func_gensym)
	(built-in "copy" 0 'func_copy)
	(built-in "add" 0 'func_add)
	(built-in "div" 0 'func_div)
	(built-in "env" 0 'func_env)
	(built-in "eql" 0 'func_eql)
	(built-in "length" 0 'func_length)
	(built-in "eq" 0 'func_eq)
	(built-in "ne" 0 'func_ne)
	(built-in "lt" 0 'func_lt)
	(built-in "gt" 0 'func_gt)
	(built-in "le" 0 'func_le)
	(built-in "ge" 0 'func_ge)
	(built-in "bit-shr" 0 'func_bshr)
	(built-in "bit-asr" 0 'func_basr)
	(built-in "bit-shl" 0 'func_bshl)
	(built-in "bit-and" 0 'func_band)
	(built-in "bit-or" 0 'func_bor)
	(built-in "bit-xor" 0 'func_bxor)
	(built-in "push" 0 'func_push)
	(built-in "pop" 0 'func_pop)
	(built-in "mod" 0 'func_mod)
	(built-in "mul" 0 'func_mul)
	(built-in "not" 0 'func_not)
	(built-in "prin" 0 'func_prin)
	(built-in "print" 0 'func_print)
	(built-in "progn" 0 'func_progn)
	(built-in "apply" 0 'func_apply)
	(built-in "str" 0 'func_str)
	(built-in "sym" 0 'func_sym)
	(built-in "slice" 0 'func_slice)
	(built-in "sub" 0 'func_sub)
	(built-in "elem" 0 'func_elem)
	(built-in "char" 0 'func_char)
	(built-in "code" 0 'func_code)
	(built-in "file-stream" 0 'func_filestream)
	(built-in "string-stream" 0 'func_strstream)
	(built-in "read-char" 0 'func_readchar)
	(built-in "read-line" 0 'func_readline)
	(built-in "write-char" 0 'func_writechar)
	(built-in "write-line" 0 'func_writeline)
	(built-in "write" 0 'func_write)
	(built-in "repl" 0 'func_repl)
	(built-in "eval" 0 'func_eval)
	(built-in "save" 0 'func_save)
	(built-in "rehash" 0 'func_rehash)
	(built-in "inst-of" 0 'func_inst_of)
	(vp-short 0)

(def-func-end)
