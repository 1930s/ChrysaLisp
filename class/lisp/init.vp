(import 'inc/func.inc)
(import 'class/unordered_set/unordered_set.inc)
(import 'class/unordered_map/unordered_map.inc)
(import 'class/vector/vector.inc)
(import 'class/stream_str/stream_str.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/symbol/symbol.inc)
(import 'class/lisp/lisp.inc)

(def-struct 'built_in)
	(ushort 'symbol)
	(ushort 'field)
	(ushort 'function)
	(ushort 'flags)
	(offset 'hop)
	;built_in_size would be aligned to long !
(def-struct-end)

(defun built-in (s f &optional u g)
	;s = symbol
	;f = field
	;u = function
	;g = flags
	(vp-short
		`(sub ,(label-sym (string-sym (fn-add-string s))) *pc*)
		f
		(if u `(sub ,(label-sym (link-sym (fn-find-link (f-path 'lisp u)))) *pc* 4) 0)
		(if g g func_type_args_eval_apply)))

(def-func 'class/lisp/init)
	;inputs
	;r0 = object
	;r1 = vtable pointer
	;r2 = stdin stream
	;r3 = stdout stream
	;r5 = stderr stream
	;outputs
	;r0 = object
	;r1 = 0 if error, else ok
	;trashes
	;all

	(ptr 'this)
	(union '(ptr 'vtable 'stdin 'stdout 'stderr 'symbol 'table)
		'(ptr 'repl_args 'value 'string 'file 'stream))
	(ulong 'ok)

	(push-scope)
	(f-entry 'lisp 'init {this, vtable, stdin, stdout, stderr})

	;init parent
	(s-call 'lisp 'init {this, vtable} {_, ok})
	(vpif {ok})
		;init myself
		(assign {stdin} {this->lisp_stdin})
		(assign {stdout} {this->lisp_stdout})
		(assign {stderr} {this->lisp_stderr})
		(f-call 'ref 'ref {stdin})
		(f-call 'ref 'ref {stdout})
		(f-call 'ref 'ref {stderr})
		(assign {0} {this->lisp_nextsym})

		;interned symbols set and enviroments
		(assign {ptr ($symbols)} {this->lisp_symbols})
		(vpifnot {this->lisp_symbols})
			(f-call 'unordered_set 'create (cat {@} (f-path 'symbol 'same) {, 101}) {this->lisp_symbols})
			(assign {this->lisp_symbols} {ptr($symbols)})
		(endif)
		(f-call 'unordered_map 'create {$match_obj, 31} {this->lisp_enviroment})

		;intern standard built in symbols
		;fixup built in functions
		(assign {$built_ins} {table})
		(loop-while {table->built_in_symbol})
			(f-call 'lisp 'sym_intern_cstr {this, &table->built_in_symbol + table->built_in_symbol} {_, symbol})
			(vpif {table->built_in_field})
				(assign {symbol} {ptr(this + table->built_in_field)})
			(endif)
			(vpif {table->built_in_function})
				(f-call 'lisp 'built_in_func {this, symbol, ptr(&table->built_in_function + table->built_in_function), table->built_in_flags})
			(endif)
			(f-call 'ref 'deref {symbol})
			(assign {table + built_in_hop} {table})
		(loop-end)

		;standard self evaulating symbols
		(f-call 'unordered_map 'insert {this->lisp_enviroment, this->lisp_sym_nil, this->lisp_sym_nil})
		(f-call 'unordered_map 'insert {this->lisp_enviroment, this->lisp_sym_t, this->lisp_sym_t})

		;define *stream-name* and *stream-line*
		(f-call 'string 'create_from_cstr {"Asm-Lisp"} {symbol})
		(f-call 'unordered_map 'insert {this->lisp_enviroment, this->lisp_sym_stream_name, symbol})
		(f-call 'ref 'deref {symbol})
		(f-call 'boxed_long 'create {} {symbol})
		(f-call 'unordered_map 'insert {this->lisp_enviroment, this->lisp_sym_stream_line, symbol})
		(f-call 'ref 'deref {symbol})
	(endif)

	;run any boot.lisp
	(f-call 'string 'create_from_file {"class/lisp/boot.lisp"} {file})
	(vpif {file})
		;REPL from file stream
		(f-call 'vector 'create {} {repl_args})
		(f-call 'stream_str 'create {file} {stream})
		(f-call 'string 'create_from_cstr {"class/lisp/boot.lisp"} {file})
		(f-call 'vector 'push_back {repl_args, stream})
		(f-call 'vector 'push_back {repl_args, file})
		(f-call 'lisp 'func_repl {this, repl_args} {_, value})
		(vpif (cat {value->obj_vtable == @} (f-path 'class 'error)))
			(f-call 'lisp 'repl_print {this, this->lisp_stderr, value})
			(f-call 'stream 'write_char {this->lisp_stderr, char_lf})
			(v-call 'stream 'write_flush {this->lisp_stderr})
		(endif)
		(f-call 'ref 'deref {value})
		(f-call 'ref 'deref {repl_args})
	(endif)

	(f-exit 'lisp 'init {this, ok})
	(pop-scope)
	(return)

(vp-label 'match_obj)
	;inputs
	;r0 = object 1
	;r1 = object 2
	;outputs
	;r1 = 0 if match

	(vp-sub-rr r0 r1)
	(vp-ret)

;;;;;;;;;;;;;;;;
; shared symbols
;;;;;;;;;;;;;;;;

	(vp-align ptr_size)
(vp-label 'symbols)
	(vp-long 0)

;;;;;;;;;;;
; built ins
;;;;;;;;;;;

	(vp-align short_size)
(vp-label 'built_ins)
	(built-in "_" lisp_sym_underscore)
	(built-in "&rest" lisp_sym_rest)
	(built-in "&optional" lisp_sym_optional)
	(built-in "nil" lisp_sym_nil)
	(built-in "t" lisp_sym_t)
	(built-in "list" lisp_sym_list)
	(built-in "*stream-name*" lisp_sym_stream_name)
	(built-in "*stream-line*" lisp_sym_stream_line)

	(built-in "lambda" lisp_sym_lambda 'func_lambda func_type_apply)
	(built-in "macro" lisp_sym_macro 'func_lambda func_type_apply)

	(built-in "defq" 0 'func_defq func_type_args_apply)
	(built-in "setq" 0 'func_setq func_type_args_apply)
	(built-in "cond" 0 'func_cond func_type_args_apply)
	(built-in "defmacro" 0 'func_defmacro func_type_args_apply)
	(built-in "while" 0 'func_while func_type_args_apply)
	(built-in "quote" lisp_sym_quote 'func_quote func_type_args_apply)
	(built-in "quasi-quote" lisp_sym_qquote 'func_qquote func_type_args_apply)

	(built-in "unquote" lisp_sym_unquote)
	(built-in "unquote-splicing" lisp_sym_splicing)
	(built-in "cat" lisp_sym_cat 'func_cat)

	(built-in "def" 0 'func_def)
	(built-in "set" 0 'func_set)
	(built-in "macroexpand-1" 0 'func_macroexpand_1)
	(built-in "macroexpand" 0 'func_macroexpand)
	(built-in "gensym" 0 'func_gensym)
	(built-in "copy" 0 'func_copy)
	(built-in "add" 0 'func_add)
	(built-in "div" 0 'func_div)
	(built-in "env" 0 'func_env)
	(built-in "eql" 0 'func_eql)
	(built-in "length" 0 'func_length)
	(built-in "eq" 0 'func_eq)
	(built-in "ne" 0 'func_ne)
	(built-in "lt" 0 'func_lt)
	(built-in "gt" 0 'func_gt)
	(built-in "le" 0 'func_le)
	(built-in "ge" 0 'func_ge)
	(built-in "bit-shr" 0 'func_bshr)
	(built-in "bit-asr" 0 'func_basr)
	(built-in "bit-shl" 0 'func_bshl)
	(built-in "bit-and" 0 'func_band)
	(built-in "bit-or" 0 'func_bor)
	(built-in "bit-xor" 0 'func_bxor)
	(built-in "push" 0 'func_push)
	(built-in "pop" 0 'func_pop)
	(built-in "mod" 0 'func_mod)
	(built-in "mul" 0 'func_mul)
	(built-in "not" 0 'func_not)
	(built-in "prin" 0 'func_prin)
	(built-in "print" 0 'func_print)
	(built-in "progn" 0 'func_progn)
	(built-in "apply" 0 'func_apply)
	(built-in "str" 0 'func_str)
	(built-in "sym" 0 'func_sym)
	(built-in "slice" 0 'func_slice)
	(built-in "sub" 0 'func_sub)
	(built-in "elem" 0 'func_elem)
	(built-in "elem-set" 0 'func_elemset)
	(built-in "char" 0 'func_char)
	(built-in "code" 0 'func_code)
	(built-in "file-stream" 0 'func_filestream)
	(built-in "string-stream" 0 'func_strstream)
	(built-in "read-char" 0 'func_readchar)
	(built-in "read-line" 0 'func_readline)
	(built-in "write-char" 0 'func_writechar)
	(built-in "write-line" 0 'func_writeline)
	(built-in "write" 0 'func_write)
	(built-in "repl" 0 'func_repl)
	(built-in "eval" 0 'func_eval)
	(built-in "save" 0 'func_save)
	(built-in "load" 0 'func_load)
	(built-in "inst-of" 0 'func_inst_of)
	(built-in "split" 0 'func_split)
	(built-in "def?" 0 'func_defined)
	(built-in "val?" 0 'func_valued)
	(built-in "find" 0 'func_find)
	(built-in "age" 0 'func_age)
	(built-in "throw" 0 'func_error)
	(built-in "pipe" 0 'func_pipe)
	(built-in "pipe-read" 0 'func_rpipe)
	(built-in "pipe-write" 0 'func_wpipe)
	(built-in "time" 0 'func_time)
	(built-in "clear" 0 'func_clear)
	(built-in "match?" 0 'func_match)
	(built-in "each!" 0 'func_each)
	(built-in "some!" 0 'func_some)
	(built-in "list" 0 'func_list)
	(built-in "cmp" 0 'func_cmp)
	(built-in "pixel" 0 'func_pixel)
	(vp-short 0)

(def-func-end)
