(import 'sys/func.inc)
(import 'sys/task/class.inc)
(import 'class/hash_set/class.inc)
(import 'class/hash_map/class.inc)
(import 'class/stream_str/class.inc)
(import 'class/integer/class.inc)
(import 'class/symbol/class.inc)
(import 'class/lisp/class.inc)

(def-struct 'built_in)
	(ushort 'symbol)
	(ushort 'field)
	(ushort 'function)
	(ushort 'flags)
	(offset 'hop)
	;built_in_size would be aligned to long !
(def-struct-end)

(defun built-in (s f &optional u g)
	;s = symbol
	;f = field
	;u = function
	;g = flags
	(vp-short
		(list 'sub (label-sym (string-sym (fn-add-string s))) '*pc*)
		f
		(if u (list 'sub (label-sym (link-sym (fn-find-link (f-path 'lisp u)))) '*pc* 4) 0)
		(if g g func_type_args_eval)))

(def-method 'lisp 'init)
	;inputs
	;r0 = lisp object object (ptr)
	;r1 = vtable (pptr)
	;r2 = stdin stream object (ptr)
	;r3 = stdout stream object (ptr)
	;r4 = stderr stream object (ptr)
	;outputs
	;r0 = lisp object object (ptr)
	;r1 = 0 if error, else ok
	;trashes
	;all

	(ptr 'this)
	(union
		'(ptr 'vtable 'stdin 'stdout 'stderr 'symbol 'table 'func)
		'(ptr 'repl_args 'value 'file 'stream))
	(ulong 'ok)

	(push-scope)
	(f-entry 'lisp 'init {this, vtable, stdin, stdout, stderr})

	;init parent
	(s-call 'lisp 'init {this, vtable} {_, ok})
	(vpif {ok})
		;init myself
		(call 'obj 'ref {stdin} {this->lisp_stdin})
		(call 'obj 'ref {stdout} {this->lisp_stdout})
		(call 'obj 'ref {stderr} {this->lisp_stderr})
		(assign {0} {this->lisp_nextsym})

		;spin lock if boot env busy
		(loop-while {ptr($boot_env) == -1})
			(call 'sys_task 'sleep {100})
		(loop-end)

		;do we have a shared boot env yet ?
		(vpifnot {ptr($boot_env)})
			;mark as busy
			(assign {-1} {ptr($boot_env)})

			;intern standard built in symbols
			;fixup built in functions
			(call 'hash_map 'create {0, 101} {this->lisp_environment})
			(assign {$built_ins} {table})
			(loop-while {table->built_in_symbol})
				(call 'symbol 'intern_cstr {&table->built_in_symbol + table->built_in_symbol} {symbol})
				(vpif {table->built_in_field})
					(assign {symbol} {ptr(this + table->built_in_field)})
				(endif)
				(vpif {table->built_in_function})
					(call 'function 'create {ptr(&table->built_in_function + table->built_in_function)
						| table->built_in_flags} {func})
					(call 'hash_map 'insert {this->lisp_environment, symbol, func})
					(call 'obj 'deref {func})
				(endif)
				(call 'obj 'deref {symbol})
				(assign {table + built_in_hop} {table})
			(loop-end)

			;define *stream-name* and *stream-line*
			(call 'string 'create_from_cstr {"ChrysaLisp"} {symbol})
			(call 'hash_map 'insert {this->lisp_environment, this->lisp_sym_stream_name, symbol})
			(call 'obj 'deref {symbol})
			(call 'integer 'create {0} {symbol})
			(call 'hash_map 'insert {this->lisp_environment, this->lisp_sym_stream_line, symbol})
			(call 'obj 'deref {symbol})

			;run any boot.inc
			(call 'string 'create_from_file {"class/lisp/boot.inc"} {file})
			(vpif {file})
				;REPL from file stream
				(call 'vector 'create nil {repl_args})
				(call 'stream_str 'create {file} {stream})
				(call 'string 'create_from_cstr {"class/lisp/boot.inc"} {file})
				(call 'vector 'push_back {repl_args, stream})
				(call 'vector 'push_back {repl_args, file})
				(call 'lisp 'func_repl {this, repl_args} {_, value})
				(vpif {value != this->lisp_sym_nil})
					(call 'lisp 'repl_print {this, this->lisp_stderr, value})
					(call 'stream 'write_char {this->lisp_stderr, char_lf})
					(call 'stream 'write_flush {this->lisp_stderr})
					(assign {0} {ok})
				(endif)
				(call 'obj 'deref {value})
				(call 'obj 'deref {repl_args})
			(endif)

			(vpifnot {ok})
				;deinit myself and parent
				(call 'lisp 'deinit {this})
				;mark as free
				(assign {0} {ptr($boot_env)})
			(else)
				;save shared boot env
				(call 'obj 'ref {this->lisp_environment} {ptr($boot_env)})
				(call 'hash_map 'create {this->lisp_environment->hash_set_key_callback, 101} {func})
				(call 'hash_map 'set_parent {func, this->lisp_environment} {this->lisp_environment})
			(endif)
		(else)
			;boot env is my parent env
			(call 'obj 'ref {ptr($boot_env)} {this->lisp_environment})
			(call 'hash_map 'create {this->lisp_environment->hash_set_key_callback, 101} {func})
			(call 'hash_map 'set_parent {func, this->lisp_environment} {this->lisp_environment})

			;look up standard built in symbols
			(assign {$built_ins} {table})
			(loop-while {table->built_in_symbol})
				(call 'symbol 'intern_cstr {&table->built_in_symbol + table->built_in_symbol} {symbol})
				(vpif {table->built_in_field})
					(assign {symbol} {ptr(this + table->built_in_field)})
				(endif)
				(call 'obj 'deref {symbol})
				(assign {table + built_in_hop} {table})
			(loop-end)

			;local define *stream-name* and *stream-line*
			(call 'string 'create_from_cstr {"ChrysaLisp"} {symbol})
			(call 'hash_map 'insert {this->lisp_environment, this->lisp_sym_stream_name, symbol})
			(call 'obj 'deref {symbol})
			(call 'integer 'create {0} {symbol})
			(call 'hash_map 'insert {this->lisp_environment, this->lisp_sym_stream_line, symbol})
			(call 'obj 'deref {symbol})
		(endif)
	(endif)

	(f-exit 'lisp 'init {this, ok})
	(pop-scope)
	(return)

;;;;;;;;;;;;;;;;;;;;;;;
; shared boot eviroment
;;;;;;;;;;;;;;;;;;;;;;;

	(vp-align ptr_size)
(vp-label 'boot_env)
	(vp-long 0)

;;;;;;;;;;;
; built ins
;;;;;;;;;;;

	(vp-align short_size)
(vp-label 'built_ins)
	(built-in "_" lisp_sym_underscore)
	(built-in "&rest" lisp_sym_rest)
	(built-in "&optional" lisp_sym_optional)
	(built-in "nil" lisp_sym_nil)
	(built-in "t" lisp_sym_t)
	(built-in "list" lisp_sym_list)
	(built-in "lambda" lisp_sym_lambda)
	(built-in "macro" lisp_sym_macro)
	(built-in "unquote" lisp_sym_unquote)
	(built-in "unquote-splicing" lisp_sym_splicing)
	(built-in "quote" lisp_sym_quote)
	(built-in "quasi-quote" lisp_sym_qquote)
	(built-in "cat" lisp_sym_cat)
	(built-in "*stream-name*" lisp_sym_stream_name)
	(built-in "*stream-line*" lisp_sym_stream_line)
	(built-in "ffi" 0 'func_ffi func_type_args_raw)
	(vp-short 0)

(def-func-end)
