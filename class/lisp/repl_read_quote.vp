(import 'inc/func.inc)
(import 'class/class_stream.inc)
(import 'class/class_vector.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/repl_read_quote)
	;inputs
	;r0 = lisp object
	;r1 = stream
	;r2 = next char
	;outputs
	;r0 = lisp object
	;r1 = list
	;r2 = next char

	(ptr 'this 'stream 'list 'elem)
	(ulong 'char)

	(push-scope)
	(assign '(r0 r1 r2) {this, stream, char})

	;skip "'"
	(f-call 'stream 'read_char {stream} {char})

	(f-call 'vector 'create {} {list})
	(assign {this->lisp_sym_quote} {elem})
	(f-call 'ref 'ref {elem})
	(f-call 'vector 'push_back {list, elem})
	(f-call 'lisp 'repl_read {this, stream, char} {elem, char})
	(vpif {elem->obj_vtable != @class/class_error})
		(f-call 'vector 'push_back {list, elem})
	(else)
		(f-call 'ref 'deref {list})
		(assign {elem} {list})
	(endif)

	(assign {this, list, char} '(r0 r1 r2))
	(pop-scope)
	(return)

(def-func-end)
