(import 'sys/func.inc)
(import 'sys/load/load.inc)
(import 'class/symbol/symbol.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_inst_of)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = else value

	(ptr 'this 'value)
	(union
		'(pptr 'iter_begin)
		'(ptr 'args)
		'(ptr 'class))

	(push-scope)
	(f-entry 'lisp 'func_inst_of {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 2} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size]} {class, value})
	(f-call 'sys_load 'bind {&class->string_data} {class})
	(errorifnot {class} 'error2)
	(f-call 'obj 'inst_of {value, class} {_, value})
	(vpif {value})
		(f-call 'symbol 'intern_cstr {value - ubyte(value - 1)} {value})
	(else)
		(f-call 'obj 'ref {this->lisp_sym_nil} {value})
	(endif)

(vp-label 'exit)
	(f-exit 'lisp 'func_inst_of {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(inst-of class obj)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
(vp-label 'error2)
	(f-call 'lisp 'repl_error {this, "(inst-of class obj)", error_msg_not_a_class, args} {_, value})
	(goto 'exit)
	(signature 'sig 'string 'obj))

	(pop-scope-syms)

(def-func-end)
