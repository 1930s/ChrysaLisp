(import 'sys/func.inc)
(import 'sys/mail/class.inc)
(import 'class/string/class.inc)
(import 'class/stream_str/class.inc)
(import 'class/lisp/class.inc)

(def-func 'class/lisp/run 8192)
	;lisp run loop task
	;inputs
	;msg of lisp filename

	(ptr 'script 'lisp 'stream 'file 'value 'args)

	;init app vars
	(push-scope)

	;get param string
	(f-call 'sys_mail 'mymail nil {script, _})
	(f-call 'sys_mail 'free_obj {script} {script, _, _})

	;string output stream
	(f-call 'string 'create_from_buffer {0, string_gap} {value})
	(f-call 'stream_str 'create {value} {stream})

	;create lisp class
	(f-call 'lisp 'create {stream, stream, stream} {lisp})
	(f-call 'obj 'deref {stream})
	(vpif {lisp})
		;run lisp file
		(f-call 'string 'create_from_file {&script->string_data} {file})
		(vpif {file})
			;REPL from file stream
			(f-call 'vector 'create nil {args})
			(f-call 'stream_str 'create {file} {stream})
			(f-call 'string 'ref {script})
			(f-call 'vector 'push_back {args, stream})
			(f-call 'vector 'push_back {args, script})
			(f-call 'lisp 'func_repl {lisp, args} {_, value})
			(vpif {value != lisp->lisp_sym_nil})
				(f-call 'lisp 'repl_print {lisp, lisp->lisp_stderr, value})
				(f-call 'stream 'write_char {lisp->lisp_stderr, char_lf})
				(v-call 'stream 'write_flush {lisp->lisp_stderr})
			(endif)
			(f-call 'obj 'deref {value})
			(f-call 'vector 'deref {args})
		(endif)
		(f-call 'lisp 'deref {lisp})
	(endif)
	(f-call 'string 'deref {script})

	(pop-scope)
	(return)

(def-func-end)
