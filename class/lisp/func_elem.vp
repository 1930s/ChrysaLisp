(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_elem)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'seq 'value)
	(int 'length 'index)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(gotoif {length != 2} 'error1)
	(f-call 'vector 'get_element {args, 1} {seq})
	(f-call 'obj 'inst_of (cat {seq, @} (f-path 'class 'sequence)) {value})
	(gotoifnot {value} 'error2)
	(f-call 'vector 'get_element {args, 0} {value})
	(gotoif (cat {value->obj_vtable != @} (f-path 'class 'boxed_long)) 'error3)
	(f-call 'boxed_long 'get_value {value} {index})
	(v-call 'sequence 'get_length {seq} {length})
	(vpif {index < 0})
		(assign {length + index + 1} {index})
	(endif)
	(gotoif {index < 0 || index >= length} 'error4)
	(v-call 'sequence 'ref_element {seq, index} {value})

(vp-label 'exit)
	(assign {this, value} '(r0 r1))
	(return)

(vp-label 'error1)
	(assign {"(elem index seq) not enough args"} {value})
	(goto 'error)
(vp-label 'error2)
	(assign {"(elem index seq) not a sequence"} {value})
	(goto 'error)
(vp-label 'error3)
	(assign {"(elem index seq) not an index"} {value})
	(goto 'error)
(vp-label 'error4)
	(assign {"(elem index seq) index out of bounds"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, args} {value})
	(goto 'exit)

	(pop-scope-syms)

(def-func-end)
