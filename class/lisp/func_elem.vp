(import 'sys/func.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

(def-method 'lisp 'func_elem)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(int 'length 'index)
	(union
		'(pptr 'iter_begin)
		'(ptr 'seq))

	(push-scope)
	(f-entry 'lisp 'func_elem {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 2} {_, value})
	(errorifnot {value} 'error1))

	(call 'vector 'get_begin {args} {_, iter_begin})
	(assign {iter_begin[0], iter_begin[ptr_size]} {value, seq})
	(call 'integer 'get_value {value} {_, index})
	(call 'sequence 'get_length {seq} {_, length})
	(vpif {index < 0})
		(assign {length + index + 1} {index})
	(endif)
	(errorif {index < 0 || index >= length} 'error2)
	(call 'sequence 'ref_element {seq, index} {_, value})

(vp-label 'exit)
	(f-exit 'lisp 'func_elem {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(elem index seq)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(elem index seq)", error_msg_not_valid_index, args} {_, value})
	(goto 'exit)
	(signature 'sig 'integer 'sequence))

	(pop-scope-syms)

(def-func-end)
