(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_elem)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'seq 'value)
	(int 'length 'index)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length == 2})
		(f-call 'vector 'get_element {args, 1} {seq})
		(f-call 'obj 'inst_of (cat {seq, @} (f-path 'class 'sequence)) {value})
		(vpif {value})
			(f-call 'vector 'get_element {args, 0} {value})
			(vpif (cat {value->obj_vtable == @} (f-path 'class 'boxed_long)))
				(f-call 'boxed_long 'get_value {value} {index})
				(v-call 'sequence 'get_length {seq} {length})
				(vpif {index < 0})
					(assign {length + index + 1} {index})
				(endif)
				(vpif {index >= 0 && index < length})
					(v-call 'sequence 'ref_element {seq, index} {value})
					(assign {this, value} '(r0 r1))
					(return)
				(else)
					(f-call 'lisp 'repl_error {this, "(elem index seq) index out of bounds", args} {value})
				(endif)
			(else)
				(f-call 'lisp 'repl_error {this, "(elem index seq) not an index", args} {value})
			(endif)
		(else)
			(f-call 'lisp 'repl_error {this, "(elem index seq) not a sequence", args} {value})
		(endif)
	(else)
		(f-call 'lisp 'repl_error {this, "(elem index seq) not enough args", args} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
