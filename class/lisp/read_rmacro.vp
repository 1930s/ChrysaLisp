(import 'sys/func.inc)
(import 'class/stream/stream.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/read_rmacro)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = stream object (ptr)
	;r2 = next char (uint)
	;r3 = symbol object (ptr) 
	;outputs
	;r0 = lisp object (ptr)
	;r1 = list vector object (ptr)
	;r2 = next char (uint)

	(ptr 'this 'sym 'list)
	(union
		'(ptr 'stream)
		'(ptr 'value))
	(int 'char)

	(push-scope)
	(f-entry 'lisp 'read_rmacro {this, stream, char, sym})

	(f-call 'stream 'read_char {stream} {_, char})
	(f-call 'lisp 'read {this, stream, char} {_, value, char})
	(errorif (cat {value->obj_vtable == @} (f-path 'class 'error)) 'exit)
	(f-call 'vector 'create '() {list})
	(f-call 'obj 'ref {sym})
	(f-call 'vector 'push_back {list, sym})
	(f-call 'vector 'push_back {list, value})
	(assign {list} {value})

(vp-label 'exit)
	(f-exit 'lisp 'read_rmacro {this, value, char})
	(pop-scope)
	(return)

(def-func-end)
