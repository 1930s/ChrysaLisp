(import 'sys/func.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

;ge monotonically nonincreasing

(def-method 'lisp 'func_ge)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (this args num value iter_begin iter_end num1) '(r6 r7))

	(entry 'lisp 'func_ge (list this args))

(errorcases
	(call 'lisp 'env_args_type `(,args (@ ,(f-path 'integer 'vtable)) -2) (list value))
	(errorif (list value '== 0) 'error1))

	(call 'vector 'get_iters (list args) (list '_ iter_begin iter_end))
	(vp-cpy-ir iter_begin 0 num)
	(vp-add-cr ptr_size iter_begin)
	(vp-cpy-ir num integer_value num)
	(loop-start)
		(vp-cpy-ir iter_begin 0 num1)
		(vp-add-cr ptr_size iter_begin)
		(vp-cpy-ir num1 integer_value num1)
		(gotoif (list num1 '> num) 'fail)
		(vp-cpy-rr num1 num)
	(loop-until (list iter_begin '== iter_end))

	(call 'obj 'ref (list (list this lisp_sym_t)) (list value))
	(exit 'lisp 'func_ge (list this value))
	(vp-ret)

(vp-label 'fail)
	(call 'obj 'ref (list (list this lisp_sym_nil)) (list value))
	(exit 'lisp 'func_ge (list this value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list this "(ge num num ...)" error_msg_wrong_types args)))

(def-func-end)
