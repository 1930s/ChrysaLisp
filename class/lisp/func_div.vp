(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_div)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value)
	(pptr 'iter)
	(long 'accum)
	(uint 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length > 1})
		(f-call 'vector 'get_element {args, 0} {value})
		(vpif (cat {value->obj_vtable == @} (f-path 'class 'boxed_long)))
			(f-call 'boxed_long 'get_value {value} {accum})
			(f-call 'vector 'for_each {args, 1, length, $callback, &accum} {iter})
			(gotoif {iter} 'error)
			(f-call 'boxed_long 'create {} {value})
			(f-call 'boxed_long 'set_value {value, accum})
		(else)
		(vp-label 'error)
			(f-call 'lisp 'repl_error {this, "(div val val ...) vals are not all numbers", args} {value})
		(endif)
	(else)
		(f-call 'lisp 'repl_error {this, "(div val val ...) not enough args", args} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(plong 'pdata)
	(long 'val)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(vpif (cat {(*iter)->obj_vtable == @} (f-path 'class 'boxed_long)))
		(f-call 'boxed_long 'get_value {*iter} {val})
		(vpif {val})
			(assign {*pdata // val} {*pdata})
			(assign {1} '(r1))
		(else)
			(assign {0} '(r1))
		(endif)
	(else)
		(assign {0} '(r1))
	(endif)

	(pop-scope)
	(return)

(def-func-end)
