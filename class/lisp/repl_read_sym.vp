(import 'inc/func.inc)
(import 'inc/load.inc)
(import 'class/symbol/symbol.inc)
(import 'class/stream_str/stream_str.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/repl_read_sym)
	;inputs
	;r0 = lisp object
	;r1 = stream
	;r2 = next char
	;outputs
	;r0 = lisp object
	;r1 = value
	;r2 = next char

	(const 'char_space (ascii " "))
	(const 'char_lb (ascii "("))
	(const 'char_rb (ascii ")"))
	(const 'char_quote (ascii "'"))

	(ptr 'this 'stream 'str_stream 'symbol 'string)
	(ulong 'char)

	(push-scope)
	(assign '(r0 r1 r2) {this, stream, char})

	(f-call 'string 'create_from_cstr {"                "} {string})
	(f-call 'stream_str 'create {string} {str_stream})

	(loop-while {char > char_space && char != char_lb && char != char_rb && char != char_quote})
		(f-call 'stream 'write_char {str_stream, char})
		(f-call 'stream 'read_char {stream} {char})
	(loop-end)

	;intern the symbol
	(f-call 'stream_str 'ref_string {str_stream} {string})
	(f-call 'ref 'deref {str_stream})
	(f-call 'symbol 'create_from_buffer {&string->string_data, string->string_length} {symbol})
	(f-call 'lisp 'sym_intern {this, symbol} {symbol})
	(f-call 'ref 'deref {string})

	(assign {this, symbol, char} '(r0 r1 r2))
	(pop-scope)
	(return)

(def-func-end)
