(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/unordered_map/unordered_map.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_def)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'var 'val 'env)
	(uint 'length 'index)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length >= 3 && (length & 1)})
		(f-call 'vector 'get_element {args, 0} {env})
		(vpif {env->obj_vtable == @class/class_unordered_map})
			(assign {1, 0} {index, val})
			(loop-start)
				(f-call 'ref 'deref_if {val})
				(f-call 'vector 'get_element {args, index} {var})
				(vpif {var->obj_vtable != @class/class_symbol})
					(f-call 'lisp 'repl_error {this, "(def env var val ...) not a symbol", args} {val})
					(goto 'error)
				(endif)
				(d-call 'vector 'ref_element {args, index + 1} {val})
				(f-call 'unordered_map 'insert {env, var, val} {_, _})
				(assign {index + 2} {index})
			(loop-until {index == length})
		(else)
			(f-call 'lisp 'repl_error {this, "(def env var val ...) not an enviroment", args} {val})
		(endif)
	(else)
		(f-call 'lisp 'repl_error {this, "(def env var val ...) wrong number of args", args} {val})
	(endif)
(vp-label 'error)
	(assign {this, val} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
