(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/unordered_map/unordered_map.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_def)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'var 'val 'env)
	(uint 'length 'index)

	(push-scope)
	(f-entry 'lisp 'func_def {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length < 3 || !(length & 1)} 'error1)
	(f-call 'vector 'get_element {args, 0} {_, env})
	(errorif (cat {env->obj_vtable != @} (f-path 'class 'unordered_map)) 'error2)
	(assign {1, 0} {index, val})
	(loop-start)
		(f-call 'ref 'deref_if {val})
		(f-call 'vector 'get_element {args, index} {_, var})
		(errorif (cat {var->obj_vtable != @} (f-path 'class 'symbol)) 'error3)
		(d-call 'vector 'ref_element {args, index + 1} {_, val})
		(f-call 'unordered_map 'insert {env, var, val})
		(assign {index + 2} {index})
	(loop-until {index == length})

(vp-label 'exit)
	(f-exit 'lisp 'func_def {this, val})
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(def env var val ...) wrong number of args"} {val})
	(goto 'error)
(vp-label 'error2)
	(assign {"(def env var val ...) not an enviroment"} {val})
	(goto 'error)
(vp-label 'error3)
	(assign {"(def env var val ...) not a symbol"} {val})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, val, args} {_, val})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
