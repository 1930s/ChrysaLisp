(import 'sys/func.inc)
(import 'sys/load/load.inc)
(import 'sys/string/string.inc)
(import 'class/string/string.inc)
(import 'class/stream_str/stream_str.inc)
(import 'class/integer/integer.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/read_num)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = stream object (ptr)
	;r2 = next char (uint)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = integer object (ptr)
	;r2 = next char (uint)

	(ptr 'this 'stream 'str_stream 'string 'num)
	(pubyte 'buffer)
	(long 'val)
	(int 'char 'sign)

	(push-scope)
	(f-entry 'lisp 'read_num {this, stream, char})

	(assign {char} {sign})
	(vpif {char == char_minus})
		(f-call 'stream 'read_char {stream} {_, char})
	(endif)

	(f-call 'string 'create_from_buffer {0, string_gap} {string})
	(f-call 'stream_str 'create {string} {str_stream})
	(loop-while {char == char_dot
				|| char >= char_0 && char <= char_9
				|| char >= char_a && char <= char_z
				|| char >= char_A && char <= char_Z})
		(f-call 'stream 'write_char {str_stream, char})
		(f-call 'stream 'read_char {stream} {_, char})
	(loop-end)
	(f-call 'stream_str 'ref_string {str_stream} {_, string})
	(f-call 'obj 'deref {str_stream})

	;pick base
	(assign {&string->string_data} {buffer})
	(assign {ubyte(buffer + 1)} {val})
	(vpif {val == char_x})
		(assign {buffer + 2, 16} {buffer, val})
	(elseif {val == char_o})
		(assign {buffer + 2, 8} {buffer, val})
	(elseif {val == char_b})
		(assign {buffer + 2, 2} {buffer, val})
	(else)
		(assign {10} {val})
	(endif)

	;create the number
	(f-call 'sys_string 'to_long {buffer, val} {val})
	(vpif {sign == char_minus})
		(assign {-val} {val})
	(endif)
	(f-call 'integer 'create {val} {num})
	(f-call 'obj 'deref {string})

	(f-exit 'lisp 'read_num {this, num, char})
	(pop-scope)
	(return)

(def-func-end)
