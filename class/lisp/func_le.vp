(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

;le monotonically nondecreasing

(def-func 'class/lisp/func_le)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_value)
		(long 'pdata_num)
	(def-struct-end)

	(ptr 'this 'value)
	(long 'num)

	(ptr 'args 'first)
	(uint 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length > 1})
		(f-call 'vector 'get_element {args, 0} {first})
		(vpif (cat {first->obj_vtable == @} (f-path 'class 'boxed_long)))
			(f-call 'boxed_long 'get_value {first} {num})
			(assign {this->lisp_sym_t} {value})
			(f-call 'ref 'ref {value})
			(f-call 'vector 'for_each {args, 1, length, $callback, &this} {_})
		(else)
			(f-call 'lisp 'repl_error {this, "(le num num ...) not all numbers", first} {value})
		(endif)
	(else)
		(f-call 'lisp 'repl_error {this, "(le num num ...) wrong number of args", args} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)
	(long 'num)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(vpif (cat {(*iter)->obj_vtable == @} (f-path 'class 'boxed_long)))
		(f-call 'boxed_long 'get_value {*iter} {num})
		(vpif {pdata->pdata_num <= num})
			(assign {num} {pdata->pdata_num})
			(assign {1} '(r1))
			(return)
		(else)
			(f-call 'ref 'deref {pdata->pdata_value})
			(assign {pdata->pdata_this->lisp_sym_nil} {pdata->pdata_value})
			(f-call 'ref 'ref {pdata->pdata_value})
		(endif)
	(else)
		(f-call 'ref 'deref {pdata->pdata_value})
		(f-call 'lisp 'repl_error {pdata->pdata_this, "(le num num ...) not all numbers", *iter} {pdata->pdata_value})
	(endif)

	(assign {0} '(r1))
	(pop-scope)
	(return)

(def-func-end)
