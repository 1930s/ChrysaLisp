(import 'inc/func.inc)
(import 'class/stream/stream.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)
(import 'class/string/string.inc)

(def-func 'class/lisp/repl_read_list)
	;inputs
	;r0 = lisp object
	;r1 = stream
	;r2 = next char
	;outputs
	;r0 = lisp object
	;r1 = list
	;r2 = next char

	(ptr 'this 'stream 'list 'ast)
	(ulong 'char)

	(push-scope)
	(f-entry 'lisp 'repl_read_list {this, stream, char})

	;skip "(" and white space
	(loop-start)
		(f-call 'lisp 'repl_read_char {this, stream, char} {_, char})
	(loop-until {char > char_space || char == -1})

	(f-call 'vector 'create {} {list})
	(loop-while {char != -1 && char != char_rrb})
		(f-call 'lisp 'repl_read {this, stream, char} {_, ast, char})
		(vpif (cat {ast->obj_vtable == @} (f-path 'class 'error)))
			(f-call 'ref 'deref {list})
			(assign {ast} {list})
			(goto 'error)
		(endif)
		(f-call 'vector 'push_back {list, ast})

		;skip white space/comments
		(loop-start)
			(loop-while {char <= char_space && char != -1})
				(f-call 'lisp 'repl_read_char {this, stream, char} {_, char})
			(loop-end)
			(breakif {char != char_semi})
			(f-call 'stream 'skip_not {stream, char_lf})
			(f-call 'stream 'read_char {stream} {char})
		(loop-end)
	(loop-end)

	;skip ")"
	(f-call 'stream 'read_char {stream} {char})

(vp-label 'error)
	(f-exit 'lisp 'repl_read_list {this, list, char})
	(pop-scope)
	(return)

(def-func-end)
