(import 'inc/func.inc)
(import 'class/class_stream.inc)
(import 'class/class_vector.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/repl_read_list)
	;inputs
	;r0 = lisp object
	;r1 = stream
	;r2 = next char
	;outputs
	;r0 = lisp object
	;r1 = list
	;r2 = next char

	(const 'char_space ' ')
	(const 'char_rrb ')')
	(const 'char_semi ';')
	(const 'char_lf 10)

	(ptr 'this 'stream 'list 'ast)
	(ulong 'char)

	(push-scope)
	(retire '(r0, r1, r2) '(this, stream, char))

	;skip "(" and white space
	(loop-start)
		(func-call 'stream 'read_char '(stream) '(char))
	(loop-until '((char > char_space || char == -1)))

	(func-call 'vector 'create '() '(list))
	(loop-while '((char != -1 && char != char_rrb)))
		(func-call 'lisp 'repl_read '(this, stream, char) '(ast, char))
		(vpif '((ast -> obj_vtable == @class/class_error)))
			(func-call 'ref 'deref '(list))
			(assign '(ast) '(list))
			goto error
		(endif)
		(func-call 'vector 'push_back '(list, ast))

		;skip white space/comments
		(loop-start)
			(loop-while '((char <= char_space && char != -1)))
				(func-call 'stream 'read_char '(stream) '(char))
			(loop-end)
			(breakif '((char != char_semi)))
			(func-call 'stream 'skip_not '(stream, char_lf))
			(func-call 'stream 'read_char '(stream) '(char))
		(loop-end)
	(loop-end)

	;skip ")"
	(func-call 'stream 'read_char '(stream) '(char))

(vp-label 'error)
	(expr '(this, list, char) '(r0, r1, r2))
	(pop-scope)
	(return)

(def-func-end)
