(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_unordered_map.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_defmacro)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'vars 'name)
	(ulong 'length)

	(push-scope)
	(retire '(r0 r1) {this, args})

	(devirt-call 'vector 'get_length {args} {length})
	(vpif {length >= 3})
		(func-call 'vector 'get_element {args, 1} {vars})
		(vpif {vars->obj_vtable == @class/class_vector})
			(func-call 'vector 'get_element {args, 0} {name})
			(vpif {name->obj_vtable == @class/class_symbol})
				(devirt-call 'vector 'slice {args, 1, length} {args})
				(func-call 'unordered_map 'insert {this->lisp_macros, name, args} {_, _})
				(func-call 'ref 'deref {args})
				(func-call 'ref 'ref {name})
			(else)
				(func-call 'error 'create {"(defmacro name vars body) name is not a symbol", args} {name})
			(endif)
		(else)
			(func-call 'error 'create {"(defmacro name vars body) vars is not a list", args} {name})
		(endif)
	(else)
		(func-call 'error 'create {"(defmacro name vars body) wrong number of args", args} {name})
	(endif)

	(expr {this, name} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
