(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/unordered_map/unordered_map.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_defmacro)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'vars 'name)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_defmacro {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length < 3} 'error1)
	(f-call 'vector 'get_element {args, 1} {_, vars})
	(errorif (cat {vars->obj_vtable != @} (f-path 'class 'vector)) 'error2)
	(f-call 'vector 'get_element {args, 0} {_, name})
	(errorif (cat {name->obj_vtable != @} (f-path 'class 'symbol)) 'error3)
	(f-call 'ref 'ref {name})
	(assign {this->lisp_sym_macro} {vars})
	(f-call 'ref 'ref {vars})
	(f-call 'vector 'set_element {args, vars, 0})
	(f-call 'unordered_map 'insert {this->lisp_enviroment, name, args})

(vp-label 'exit)
	(f-exit 'lisp 'func_defmacro {this, name})
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(defmacro name vars body) wrong number of args"} {name})
	(goto 'error)
(vp-label 'error2)
	(assign {"(defmacro name vars body) vars is not a list"} {name})
	(goto 'error)
(vp-label 'error3)
	(assign {"(defmacro name vars body) name is not a symbol"} {name})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, name, args} {_, name})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
