(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_push)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value)
	(uint 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(gotoif {length < 2} 'error1)
	(f-call 'vector 'get_element {args, 0} {value})
	(gotoif (cat {value->obj_vtable != @} (f-path 'class 'vector)) 'error2)
	(f-call 'ref 'ref {value})
	(f-call 'vector 'for_each {args, 1, length, $callback, value} {_})

(vp-label 'exit)
	(assign {this, value} '(r0 r1))
	(return)

(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(push list form ...) not enough args", args} {value})
	(goto 'exit)

(vp-label 'error2)
	(f-call 'lisp 'repl_error {this, "(push list form ...) not a list", args} {value})
	(goto 'exit)

	(pop-scope-syms)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(f-call 'ref 'ref {*iter})
	(f-call 'vector 'push_back {pdata, *iter})

	(assign {1} '(r1))
	(pop-scope)
	(return)

(def-func-end)
