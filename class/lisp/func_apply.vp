(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_apply)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this, args, func)
	(ulong 'length)

	push_scope
	retire {r0, r1}, {this, args}

	devirt_call vector, get_length, {args}, {length}
	if {length == 2}
		func_call vector, get_element, {args, 0}, {func}
		func_call vector, get_element, {args, 1}, {args}
		func_call lisp, repl_apply, {this, func, args}, {args}
	else
		func_call error, create, {"(apply func args) wrong numbers of args", args}, {args}
	endif

	eval {this, args}, {r0, r1}
	pop_scope
	return

(def-func-end)
