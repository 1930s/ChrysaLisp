(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_clear)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = else value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_value)
	(def-struct-end)

	(ptr 'this 'value 'args)
	(ulong 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(assign {this->lisp_sym_nil} {value})
	(f-call 'ref 'ref {value})
	(d-call 'vector 'get_length {args} {length})
	(f-call 'vector 'for_each {args, 0, length, $callback, &this} {_})

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(plong 'pdata)
	(pptr 'iter)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(f-call 'ref 'deref {pdata->pdata_value})
	(vpif {(*iter)->obj_vtable == @class/class_vector})
		(assign {*iter} {pdata->pdata_value})
		(f-call 'vector 'clear {pdata->pdata_value})
		(f-call 'ref 'ref {pdata->pdata_value})
		(assign {1} '(r1))
	(else)
		(f-call 'lisp 'repl_error {pdata->pdata_this, "(clear list ...) not a list", *iter} {pdata->pdata_value})
		(assign {0} '(r1))
	(endif)

	(pop-scope)
	(return)

(def-func-end)
