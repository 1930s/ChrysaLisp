(import 'inc/func.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_clear)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = else value

	(ptr 'this 'args 'value)
	(union '(pptr 'iter_end 'iter_begin) '(uint 'length))

	(push-scope)
	(f-entry 'lisp 'func_clear {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(vpif {length})
		(f-call 'vector 'get_begin {args} {_, iter_begin})
		(f-call 'vector 'get_end {args} {_, iter_end})
		(loop-start)
			(assign {*iter_begin} {value})
			(errorif (cat {value->obj_vtable != @} (f-path 'class 'vector)) 'error)
			(f-call 'vector 'clear {value})
			(f-call 'ref 'ref {value})
			(assign {iter_begin + ptr_size} {iter_begin})
		(loop-until {iter_begin == iter_end})
	(else)
		(assign {this->lisp_sym_nil} {value})
	(endif)
	(f-call 'ref 'ref {value})

(vp-label 'exit)
	(f-exit 'lisp 'func_clear {this, value})
	(return)

(errorcases
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, "(clear list ...) not a list", 0, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
