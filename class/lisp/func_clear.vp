(import 'sys/func.inc)
(import 'class/lisp/class.inc)

(def-method 'lisp 'func_clear)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(pptr 'iter_end 'iter_begin)

	(push-scope)
	(entry 'lisp 'func_clear {this, args})

(errorcases
	(call 'lisp 'env_args_type (cat {args, @} (f-path 'array 'vtable) {, -1}) {value})
	(errorifnot {value} 'error))

	(call 'vector 'get_iters {args} {_, iter_begin, iter_end})
	(loop-start)
		(assign {*iter_begin} {value})
		(call 'array 'clear {value})
		(assign {iter_begin + ptr_size} {iter_begin})
	(loop-until {iter_begin == iter_end})
	(call 'obj 'ref {value})

(vp-label 'funcexit)
	(exit 'lisp 'func_clear {this, value})
	(return)

(errorcases
(vp-label 'error)
	(call 'lisp 'repl_error {this, "(clear array ...)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
