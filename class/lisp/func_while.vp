(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_while)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_value)
	(def-struct-end)

	(ptr 'this 'value 'args)
	(ulong 'length)

	(push-scope)
	(retire '(r0 r1) {this, args})

	(devirt-call 'vector 'get_length {args} {length})
	(vpif {length >= 1})
		(func-call 'sys_task 'yield)
		(loop-start)
			(func-call 'vector 'get_element {args, 0} {value})
			(func-call 'lisp 'repl_eval {this, value} {value})
			(breakif {value -> obj_vtable == @class/class_error})
			(breakif {value == this -> lisp_sym_nil})
			(func-call 'vector 'for_each {args, 1, length, $ callback, & this} {_})
			(breakif {value -> obj_vtable == @class/class_error})
			(func-call 'ref 'deref {value})
		(loop-end)
	(else)
		(func-call 'error 'create {"(while tst form ...) wrong number of args", args} {value})
	(endif)

	(expr {this, value} '(r0 r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(retire '(r0 r1) {pdata, iter})

	(func-call 'ref 'deref {pdata -> pdata_value})
	(func-call 'lisp 'repl_eval {pdata -> pdata_this, * iter} {pdata -> pdata_value})

	(expr {pdata -> pdata_value -> obj_vtable != @ class/class_error} '(r1))
	(pop-scope)
	(return)

(def-func-end)
