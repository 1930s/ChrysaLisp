(import 'sys/func.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_while)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(union
		'(pptr 'iter_begin 'iter_end)
		'(uint 'length))

	(push-scope)
	(f-entry 'lisp 'func_while {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length < 1} 'error1)
	(f-call 'sys_task 'yield)
	(loop-start)
		(f-call 'vector 'get_iters {args} {_, iter_begin, iter_end})
		(f-call 'lisp 'repl_eval {this, *iter_begin} {_, value})
		(breakif {value == this->lisp_sym_nil})
		(errorif (cat {value->obj_vtable == @} (f-path 'class 'error)) 'exit)
		(loop-start)
			(f-call 'obj 'deref {value})
			(assign {iter_begin + ptr_size} {iter_begin})
			(breakif {iter_begin == iter_end})
			(f-call 'lisp 'repl_eval {this, *iter_begin} {_, value})
			(errorif (cat {value->obj_vtable == @} (f-path 'class 'error)) 'exit)
		(loop-end)
	(loop-end)

(vp-label 'exit)
	(f-exit 'lisp 'func_while {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(while tst form ...)", error_msg_wrong_num_of_args, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
