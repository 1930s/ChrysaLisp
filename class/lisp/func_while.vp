(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_while)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_value)
	(def-struct-end)

	(ptr 'this 'value 'args)
	(uint 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(errorif {length < 1} 'error)
	(f-call 'sys_task 'yield)
	(loop-start)
		(f-call 'vector 'get_element {args, 0} {value})
		(f-call 'lisp 'repl_eval {this, value} {value})
		(breakif (cat {value->obj_vtable == @} (f-path 'class 'error)))
		(breakif {value == this->lisp_sym_nil})
		(f-call 'vector 'for_each {args, 1, length, $callback, &this} {_})
		(breakif (cat {value->obj_vtable == @} (f-path 'class 'error)))
		(f-call 'ref 'deref {value})
	(loop-end)

(vp-label 'exit)
	(assign {this, value} '(r0 r1))
	(return)

(errorcases
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, "(while tst form ...) wrong number of args", args} {value})
	(goto 'exit))

	(pop-scope-syms)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(f-call 'ref 'deref {pdata->pdata_value})
	(f-call 'lisp 'repl_eval {pdata->pdata_this, *iter} {pdata->pdata_value})

	(assign (cat {pdata->pdata_value->obj_vtable != @} (f-path 'class 'error)) '(r1))
	(pop-scope)
	(return)

(def-func-end)
