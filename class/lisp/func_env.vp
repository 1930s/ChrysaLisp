(import 'sys/func.inc)
(import 'class/integer/class.inc)
(import 'class/hash_map/class.inc)
(import 'class/lisp/class.inc)

(def-method 'lisp 'func_env)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = environment hasp_map object (ptr)

	(ptr 'this 'args 'value)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_env {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorifnot {length == 0 || length == 1} 'error1)
	(vpif {length})
		(call 'vector 'get_first {args} {_, value})
		(errorif (cat {value->obj_vtable != @} (f-path 'integer 'vtable)) 'error2)
		(call 'integer 'get_value {value} {_, value})
		(errorifnot {value} 'error2)
		(call 'hash_map 'num_buckets {this->lisp_environment} {_, length})
		(gotoif {value == length} 'justref)
		(call 'hash_map 'copy {this->lisp_environment, value} {_, value})
		(call 'obj 'deref {this->lisp_environment})
		(call 'obj 'ref {value} {this->lisp_environment})
	(else)
	(vp-label 'justref)
		(call 'obj 'ref {this->lisp_environment} {value})
	(endif)

(vp-label 'exit)
	(f-exit 'lisp 'func_env {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(env [num])", error_msg_wrong_num_of_args, args} {_, value})
	(goto 'exit)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(env [num])", error_msg_not_a_number, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
