(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/stream_str/stream_str.inc)
(import 'class/symbol/symbol.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_writeline)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'str 'stream)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_writeline {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 2} 'error1)
	(f-call 'vector 'get_element {args, 0} {_, stream})
	(errorif (cat {stream->obj_vtable != @} (f-path 'class 'stream_str)) 'error2)
	(f-call 'vector 'get_element {args, 1} {_, str})

(errorcases
	(f-call 'obj 'inst_of (cat {str, @} (f-path 'class 'string)) {_, value})
	(errorifnot {value} 'error3))

	(f-call 'ref 'ref {str})
	(f-call 'stream_str 'write {stream, &str->string_data, str->string_length})
	(f-call 'stream_str 'write_char {stream, 10})

(vp-label 'exit)
	(f-exit 'lisp 'func_writeline {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(write-line stream str) wrong number of args"} {value})
	(goto 'error)
(vp-label 'error2)
	(assign {"(write-line stream str) not a stream"} {value})
	(goto 'error)
(vp-label 'error3)
	(assign {"(write-line stream str) not a string"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
