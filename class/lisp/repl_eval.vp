(import 'sys/func.inc)
(import 'class/symbol/symbol.inc)
(import 'class/boxed_ptr/boxed_ptr.inc)
(import 'class/hash_map/hash_map.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/repl_eval)
	;inputs
	;r0 = lisp object
	;r1 = form
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'form 'value 'func 'args)

	(push-scope)
	(f-entry 'lisp 'repl_eval {this, form})

	;evaluate based on type
	(assign {form->obj_vtable} {func})
	(switch)
	(case (cat {func == @} (f-path 'class 'symbol)))
		;eval to symbol value
		(f-call 'hash_map 'get {this->lisp_environment, form} {_, value})
		(errorifnot {value} 'error2)
		(break)
	(case (cat {func == @} (f-path 'class 'vector)))
		;apply function, eval args if needed
		(errorifnot {form->array_length} 'error1)
		(f-call 'vector 'get_first {form} {_, func})
		(f-call 'lisp 'repl_eval {this, func} {_, value})
		(errorif (cat {value->obj_vtable == @} (f-path 'class 'error)) 'exit)
		(assign {value} {func})
		(switch)
		(case (cat {func->obj_vtable == @} (f-path 'class 'boxed_ptr)))
			(gotoifnot {func->boxed_ptr_value & 7} 'args_eval_apply)
			(vpif {(func->boxed_ptr_value & 7) == func_type_apply})
				(f-call 'lisp 'repl_apply {this, form, func} {_, value})
			(else) ;type_args_apply
				(d-call 'vector 'slice {form, 1, form->array_length} {_, args})
				(f-call 'lisp 'repl_apply {this, args, func} {_, value})
				(f-call 'obj 'deref {args})
			(endif)
			(break)
		(default)
		(vp-label 'args_eval_apply)
			(d-call 'vector 'slice {form, 1, form->array_length} {_, args})
			(f-call 'lisp 'repl_eval_list {this, args} {_, value})
			(errorif (cat {value->obj_vtable == @} (f-path 'class 'error)) 'error)
			(f-call 'obj 'deref {value})
			(f-call 'lisp 'repl_apply {this, args, func} {_, value})
		(vp-label 'error)
			(f-call 'obj 'deref {args})
		(endswitch)
		(f-call 'obj 'deref {func})
		(break)
	(default)
		;eval to self
		(f-call 'obj 'ref {form} {value})
	(endswitch)

(vp-label 'exit)
	(f-exit 'lisp 'repl_eval {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(lambda vars body)", error_msg_not_a_lambda, form} {_, value})
	(goto 'exit)
(vp-label 'error2)
	(f-call 'lisp 'repl_error {this, "(eval sym)", error_msg_symbol_not_bound, form} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
