(import 'inc/func.inc)
(import 'class/symbol/symbol.inc)
(import 'class/vector/vector.inc)
(import 'class/boxed_ptr/boxed_ptr.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/repl_eval)
	;inputs
	;r0 = lisp object
	;r1 = form
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'form 'value 'func 'args)
	(ulong 'length)

	(push-scope)
	(assign '(r0 r1) {this, form})

	;evaluate based on type
	(assign {form->obj_vtable} {func})
	(switch)
	(case {func == @class/class_symbol})
		;eval to symbol value
		(f-call 'lisp 'env_get {this, form} {value})
		(break)
	(case {func == @class/class_vector})
		(d-call 'vector 'get_length {form} {length})
		(vpifnot {length})
			;eval to nil
			(assign {this->lisp_sym_nil} {value})
			(f-call 'ref 'ref {value})
		(else)
			;apply function, eval args if needed
			(f-call 'vector 'get_element {form, 0} {func})
			(f-call 'lisp 'repl_eval {this, func} {value})
			(breakif {value->obj_vtable == @class/class_error})
			(assign {value} {func})
			(switch)
			(case {func->obj_vtable == @class/class_boxed_ptr})
				(gotoifnot {func->boxed_ptr_flags} 'args_eval_apply)
				(vpif {func->boxed_ptr_flags == type_apply})
					(f-call 'lisp 'repl_apply {this, func, form} {value})
				(else) ;type_args_apply
					(d-call 'vector 'slice {form, 1, length} {args})
					(f-call 'lisp 'repl_apply {this, func, args} {value})
					(f-call 'ref 'deref {args})
				(endif)
				(break)
			(default)
			(vp-label 'args_eval_apply)
				(d-call 'vector 'slice {form, 1, length} {args})
				(f-call 'lisp 'repl_eval_list {this, args, 0} {value})
				(vpif {value->obj_vtable != @class/class_error})
					(f-call 'ref 'deref {value})
					(f-call 'lisp 'repl_apply {this, func, args} {value})
				(endif)
				(f-call 'ref 'deref {args})
			(endswitch)
			(f-call 'ref 'deref {func})
		(endif)
		(break)
	(default)
		;eval to self
		(assign {form} {value})
		(f-call 'ref 'ref {value})
	(endswitch)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
