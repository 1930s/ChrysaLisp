(import 'inc/func.inc)
(import 'class/symbol/symbol.inc)
(import 'class/vector/vector.inc)
(import 'class/boxed_ptr/boxed_ptr.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/repl_eval)
	;inputs
	;r0 = lisp object
	;r1 = form
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'form 'value 'func 'args)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'repl_eval {this, form})

	;evaluate based on type
	(assign {form->obj_vtable} {func})
	(switch)
	(case (cat {func == @} (f-path 'class 'symbol)))
		;eval to symbol value
		(f-call 'lisp 'env_get {this, form} {_, value})
		(break)
	(case (cat {func == @} (f-path 'class 'vector)))
		(d-call 'vector 'get_length {form} {_, length})
		(vpifnot {length})
			;eval to nil
			(assign {this->lisp_sym_nil} {value})
			(f-call 'ref 'ref {value} '(_))
		(else)
			;apply function, eval args if needed
			(f-call 'vector 'get_element {form, 0} {_, func})
			(f-call 'lisp 'repl_eval {this, func} {_, value})
			(breakif (cat {value->obj_vtable == @} (f-path 'class 'error)))
			(assign {value} {func})
			(switch)
			(case (cat {func->obj_vtable == @} (f-path 'class 'boxed_ptr)))
				(gotoifnot {func->boxed_ptr_value & 7} 'args_eval_apply)
				(vpif {(func->boxed_ptr_value & 7) == type_apply})
					(f-call 'lisp 'repl_apply {this, func, form} {_, value})
				(else) ;type_args_apply
					(d-call 'vector 'slice {form, 1, length} {_, args})
					(f-call 'lisp 'repl_apply {this, func, args} {_, value})
					(f-call 'ref 'deref {args} '(_))
				(endif)
				(break)
			(default)
			(vp-label 'args_eval_apply)
				(d-call 'vector 'slice {form, 1, length} {_, args})
				(f-call 'lisp 'repl_eval_list {this, args, 0} {_, value})
				(vpif (cat {value->obj_vtable != @} (f-path 'class 'error)))
					(f-call 'ref 'deref {value} '(_))
					(f-call 'lisp 'repl_apply {this, func, args} {_,value})
				(endif)
				(f-call 'ref 'deref {args} '(_))
			(endswitch)
			(f-call 'ref 'deref {func} '(_))
		(endif)
		(break)
	(default)
		;eval to self
		(assign {form} {value})
		(f-call 'ref 'ref {value} '(_))
	(endswitch)

	(f-exit 'lisp 'repl_eval {this, value})
	(pop-scope)
	(return)

(def-func-end)
