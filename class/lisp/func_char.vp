(include 'sys/func.inc)
(include 'class/string/class.inc)
(include 'class/integer/class.inc)
(include 'class/lisp/class.inc)

(def-method 'lisp 'func_char)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vp-def (this args len value iter_begin iter_end width) '(r7 r8 r9))

	(entry 'lisp 'func_char (list this args))

	(vp-cpy-ir-ui args array_length len)

(errorcases
	(errorif (list len '< 1) 'error1)
	(errorif (list len '> 2) 'error1)
	(call 'lisp 'env_args_type `(,args (@ ,(f-path 'integer 'vtable)) 0))
	(errorif (list (method-output 'lisp 'env_args_type 0) '== 0) 'error1))

	(vp-cpy-ir args array_array iter_begin)
	(vp-cpy-cr 1 width)
	(vp-cpy-ir iter_begin 0 value)
	(vpif (list len '> 1))
		(vp-cpy-ir iter_begin ptr_size width)
		(vp-cpy-ir width integer_value width)
		(vp-sub-cr 1 width)
		(vp-and-cr (dec long_size) width)
		(vp-add-cr 1 width)
	(endif)
	(call 'string 'create_from_buffer (list (list '& value integer_value) width) (list value))

	(exit 'lisp 'func_char (list this value))
	(vp-ret)

(errorcases
(vp-label 'error1)
	(jump 'lisp 'repl_error (list this "(char num [width])" error_msg_wrong_types args)))

(def-func-end)
