(import 'sys/func.inc)
(import 'class/string/class.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

(def-method 'lisp 'func_char)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'length 'width)

	(push-scope)
	(entry 'lisp 'func_char {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorifnot {length == 1 || length == 2} 'error1)
	(assign {1} {width})
	(vpif {length == 2})
		(call 'vector 'get_second {args} {_, value})
		(errorif (cat {value->obj_vtable != @} (f-path 'integer 'vtable)) 'error2)
		(call 'integer 'get_value {value} {_, width})
		(assign {((width - 1) & 7) + 1} {width})
	(endif)
	(call 'vector 'get_first {args} {_, value})
	(errorif (cat {value->obj_vtable != @} (f-path 'integer 'vtable)) 'error2)
	(call 'integer 'get_value {value} {_, length})
	(call 'string 'create_from_buffer {&length, width} {value})

(vp-label 'funcexit)
	(exit 'lisp 'func_char {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(char num [width])", error_msg_wrong_num_of_args, args} {_, value})
	(goto 'funcexit)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(char num [width])", error_msg_not_a_number, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
