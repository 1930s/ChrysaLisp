(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/error/error.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_char)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value)
	(ulong 'length 'width)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length == 1 || length == 2})
		(assign {1} {width})
		(vpif {length == 2})
			(f-call 'vector 'get_element {args, 1} {value})
			(gotoif {value->obj_vtable != @class/class_boxed_long} 'error)
			(f-call 'boxed_long 'get_value {value} {width})
			(assign {((width - 1) & 7) + 1} {width})
		(endif)
		(f-call 'vector 'get_element {args, 0} {value})
		(vpif {value->obj_vtable == @class/class_boxed_long})
			(f-call 'boxed_long 'get_value {value} {length})
			(f-call 'string 'create_from_buffer {&length, width} {value})
		(else)
		(vp-label 'error)
			(f-call 'lisp 'repl_error {this, "(char int [width]) not a number", args} {value})
		(endif)
	(else)
		(f-call 'lisp 'repl_error {this, "(char int [width]) wrong number of args", args} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
