(import 'sys/func.inc)
(import 'class/string/class.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

(def-method 'lisp 'func_char)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args)
	(union
		'(ptr 'value)
		'(ulong 'arg0 'arg1))
(errorcases
	(uint 'length))

	(push-scope)
	(entry 'lisp 'func_char {this, args})

(errorcases
	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length < 1 || length > 2} 'error1)
	(call 'lisp 'env_args_type (cat {args, @} (f-path 'integer 'vtable) {, 0}) {value})
	(errorifnot {value} 'error2))

	(assign {0, 1} {arg0, arg1})
	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'string 'create_from_buffer {&arg0, ((arg1 - 1) & 7) + 1} {value})

(vp-label 'funcexit)
	(exit 'lisp 'func_char {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(char num [width])", error_msg_wrong_num_of_args, args} {_, value})
	(goto 'funcexit)
(vp-label 'error2)
	(call 'lisp 'repl_error {this, "(char num [width])", error_msg_not_a_number, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
