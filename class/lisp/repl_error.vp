(import 'sys/func.inc)
(import 'class/symbol/class.inc)
(import 'class/pair/class.inc)
(import 'class/hash_map/class.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

(def-method 'lisp 'repl_error)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = description c string (pubyte)
	;r2 = 0, else error msg number (uint)
	;r3 = error payload object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = error object (ptr)

	(ptr 'this 'desc 'payload 'file 'value)
	(pptr 'iter)
	(uint 'msg 'line)

	(push-scope)
	(f-entry 'lisp 'repl_error {this, desc, msg, payload})

	(f-call 'hash_map 'search {this->lisp_environment, this->lisp_sym_stream_name} {_, iter, _})
	(vpif {iter})
		(f-call 'pair 'get_second {*iter} {_, file})
		(f-call 'obj 'inst_of (cat {file, @} (f-path 'string 'vtable)) {_, value})
		(gotoifnot {value} 'nofile)
		(assign {&file->string_data} {file})
	(else)
	(vp-label 'nofile)
		(assign {"*file* not a string !"} {file})
	(endif)

	(assign {0} {line})
	(f-call 'hash_map 'search {this->lisp_environment, this->lisp_sym_stream_line} {_, iter, _})
	(vpif {iter})
		(f-call 'pair 'get_second {*iter} {_, value})
		(breakif (cat {value->obj_vtable != @} (f-path 'integer 'vtable)))
		(f-call 'integer 'get_value {value} {_, line})
	(endif)

	(f-call 'error 'create {desc, msg, payload, file, line} {value})

	(f-exit 'lisp 'repl_error {this, value})
	(pop-scope)
	(return)

(def-func-end)
