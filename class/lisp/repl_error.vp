(import 'inc/func.inc)
(import 'class/symbol/symbol.inc)
(import 'class/vector/vector.inc)
(import 'class/pair/pair.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/error/error.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/repl_error)
	;inputs
	;r0 = lisp object
	;r1 = description cstr pointer
	;r2 = error payload object
	;outputs
	;r0 = lisp object
	;r1 = error object

	(ptr 'this 'desc 'payload 'file 'value)
	(pptr 'iter)
	(ulong 'line)

	(push-scope)
	(f-entry 'lisp 'repl_error {this, desc, payload})

	(f-call 'lisp 'env_find {this, this->lisp_sym_stream_name} {_, iter, _})
	(vpif {iter})
		(f-call 'pair 'get_second {*iter} {file})
		(f-call 'obj 'inst_of (cat {file, @} (f-path 'class 'string)) {value})
		(gotoifnot {value} 'nofile)
		(assign {&file->string_data} {file})
	(else)
	(vp-label 'nofile)
		(assign {"*file* not a string !"} {file})
	(endif)

	(assign {0} {line})
	(f-call 'lisp 'env_find {this, this->lisp_sym_stream_line} {_, iter, _})
	(vpif {iter})
		(f-call 'pair 'get_second {*iter} {value})
		(breakif (cat {value->obj_vtable != @} (f-path 'class 'boxed_long)))
		(f-call 'boxed_long 'get_value {value} {line})
	(endif)

	(f-call 'error 'create {desc, file, payload, line} {value})

	(f-exit 'lisp 'repl_error {this, value})
	(pop-scope)
	(return)

(def-func-end)
