(import 'inc/func.inc)
(import 'class/canvas/canvas.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(defun class-type-entry (_)
	;method
	(vp-short `(sub ,(label-sym (link-sym (fn-find-link (f-path 'class _)))) *pc*)))

(def-func 'class/lisp/func_pixel)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = else value

	(ptr 'this 'args 'value)
	(uint 'length 'slot)
	(long 'argslot 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5)

	(push-scope)
	(f-entry 'lisp 'func_pixel {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorifnot {length} 'error1)
	(f-call 'vector 'get_element {args, 0} {_, value})
	(errorif (cat {value->obj_vtable != @} (f-path 'class 'boxed_long)) 'error1)
	(f-call 'boxed_long 'get_value {value} {_, slot})
	(switch)
	(case (cat {slot == } (str (method-slot 'canvas 'swap))))
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $canvas_swap_args, 2} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &argslot})
		(f-call 'canvas 'swap {arg0})
		(f-call 'canvas 'dirty {arg0})
		(break)
	(case (cat {slot == } (str (method-slot 'canvas 'set_pixel))))
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $canvas_set_pixel_args, 5} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &argslot})
		(f-call 'canvas 'set_pixel {arg0, arg1, arg2, arg3})
		(break)
	(case (cat {slot == } (str (method-slot 'canvas 'set_hline))))
	(errorcases
		(f-call 'lisp 'env_args_type {this, args, $canvas_set_hline_args, 6} {_, slot})
		(errorifnot {slot} 'error1))
		(f-call 'lisp 'env_args_set {this, args, &argslot})
		(f-call 'canvas 'set_hline {arg0, arg1, arg2, arg3, arg4})
		(break)
	(default)
	(errorcases
		(goto 'error1))
	(endswitch)
	(f-call 'ref 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'lisp 'func_pixel {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(pixel slot canvas ...)", error_msg_wrong_args_type, args} {_, value})
	(goto 'exit)

	(vp-align short_size)
(vp-label 'canvas_swap_args)
	(class-type-entry 'boxed_long)
	(class-type-entry 'canvas)
(vp-label 'canvas_set_pixel_args)
	(class-type-entry 'boxed_long)
	(class-type-entry 'canvas)
	(class-type-entry 'boxed_long)
	(class-type-entry 'boxed_long)
	(class-type-entry 'boxed_long)
(vp-label 'canvas_set_hline_args)
	(class-type-entry 'boxed_long)
	(class-type-entry 'canvas)
	(class-type-entry 'boxed_long)
	(class-type-entry 'boxed_long)
	(class-type-entry 'boxed_long)
	(class-type-entry 'boxed_long))

	(pop-scope-syms)

(def-func-end)
