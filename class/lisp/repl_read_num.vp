(import 'inc/func.inc)
(import 'inc/load.inc)
(import 'inc/string.inc)
(import 'class/class_stream.inc)
(import 'class/class_boxed_long.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/repl_read_num)
	;inputs
	;r0 = lisp object
	;r1 = stream
	;r2 = next char
	;outputs
	;r0 = lisp object
	;r1 = number
	;r2 = next char

	(const 'char_0 (ascii "0"))
	(const 'char_9 (ascii "9"))
	(const 'char_a (ascii "a"))
	(const 'char_z (ascii "z"))
	(const 'char_ca (ascii "A"))
	(const 'char_cz (ascii "Z"))
	(const 'char_minus (ascii "-"))
	(const 'char_x (ascii "x"))
	(const 'char_b (ascii "b"))
	(const 'char_o (ascii "o"))

	(ptr 'this 'stream 'num)
	(pubyte 'reloc 'buffer)
	(ulong 'char 'sign)
	(long 'val)

	(push-scope)
	(assign '(r0 r1 r2) {this, stream, char})
	(assign {char} {sign})

	(vpif {char == char_minus})
		(f-call 'stream 'read_char {stream} {char})
	(endif)

	(f-path 'sys_load 'statics)
	(assign (cat "@" (str _function_) {.ld_statics_reloc_buffer}) {reloc})
	(assign {reloc} {buffer})

	(loop-while {char >= char_0 && char <= char_9 || char >= char_a && char <= char_z || char >= char_ca && char <= char_cz})
		(assign {char} {*buffer})
		(assign {buffer + 1} {buffer})
		(f-call 'stream 'read_char {stream} {char})
	(loop-end)
	(assign {0} {*buffer})

	;pick base
	(assign {reloc + 1, 10} {buffer, val})
	(vpif {*buffer == char_x})
		(assign {reloc + 2, 16} {reloc, val})
	(elseif {*buffer == char_o})
		(assign {reloc + 2, 8} {reloc, val})
	(elseif {*buffer == char_b})
		(assign {reloc + 2, 2} {reloc, val})
	(endif)

	;create the number
	(f-call 'boxed_long 'create {} {num})
	(f-call 'sys_string 'to_long {reloc, val} {val})
	(vpif {sign == char_minus})
		(assign {-val} {val})
	(endif)
	(f-call 'boxed_long 'set_value {num, val})

	(assign {this, num, char} '(r0 r1 r2))
	(pop-scope)
	(return)

(def-func-end)
