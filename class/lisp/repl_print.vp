(import 'inc/func.inc)
(import 'class/class_stream.inc)
(import 'class/class_vector.inc)
(import 'class/class_string.inc)
(import 'class/class_boxed_long.inc)
(import 'class/class_pair.inc)
(import 'class/class_unordered_set.inc)
(import 'class/class_unordered_map.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/repl_print)
	;inputs
	;r0 = lisp object
	;r1 = stream
	;r2 = value
	;outputs
	;r0 = lisp object

	(const 'char_minus (ascii "-"))
	(const 'char_quote (ascii "'"))
	(const 'char_double_quote 34)
	(const 'char_quasi_quote (ascii "`"))
	(const 'char_unquote (ascii ","))
	(const 'char_splicing (ascii "~"))
	(const 'char_space (ascii " "))
	(const 'char_lrb (ascii "("))
	(const 'char_rrb (ascii ")"))
	(const 'char_lcb (ascii "{"))
	(const 'char_rcb (ascii "}"))
	(const 'char_lsb (ascii "["))
	(const 'char_rsb (ascii "]"))
	(const 'char_lab (ascii "<"))
	(const 'char_rab (ascii ">"))
	(const 'char_lf 10)
	(const 'char_at (ascii "@"))

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_stream)
		(uint 'pdata_index)
		(uint 'pdata_length)
	(def-struct-end)

	(ptr 'this 'stream)
	(uint 'index 'length)

	(ptr 'value 'elem)

	(push-scope)
	(assign '(r0 r1 r2) {this, stream, value})

	(vpifnot {value})
		(func-call 'stream 'write_char {stream, char_lf})
		(func-call 'stream 'write_cstr {stream, "*NULL*"})
		(func-call 'stream 'write_char {stream, char_lf})
	(else)
		(assign {value->obj_vtable} {elem})
		(switch)
		(case {elem == @class/class_symbol})
			(func-call 'stream 'write {stream, & value->string_data, value->string_length})
			(break)
		(case {elem == @class/class_string})
			(func-call 'stream 'write_char {stream, char_double_quote})
			(func-call 'stream 'write {stream, & value->string_data, value->string_length})
			(func-call 'stream 'write_char {stream, char_double_quote})
			(break)
		(case {elem == @class/class_boxed_long})
			(func-call 'boxed_long 'get_value {value} {elem})
			(func-call 'string 'create_from_long {elem, 10} {value})
			(func-call 'stream 'write {stream, & value->string_data, value->string_length})
			(func-call 'ref 'deref {value})
			(break)
		(case {elem == @class/class_boxed_ptr})
			(func-call 'stream 'write_cstr {stream, "#0x"})
			(func-call 'boxed_ptr 'get_value {value} {elem})
			(func-call 'string 'create_from_long {elem, 16} {value})
			(func-call 'stream 'write {stream, & value->string_data, value->string_length})
			(func-call 'ref 'deref {value})
			(break)
		(case {elem == @class/class_pair})
			(func-call 'stream 'write_char {stream, char_lab})
			(func-call 'pair 'get_first {value} {elem})
			(func-call 'lisp 'repl_print {this, stream, elem})
			(func-call 'stream 'write_char {stream, char_space})
			(func-call 'pair 'get_second {value} {elem})
			(func-call 'lisp 'repl_print {this, stream, elem})
			(func-call 'stream 'write_char {stream, char_rab})
			(break)
		(case {elem == @class/class_unordered_set})
			(struct 'pdata 'pdata)
			(push-scope)
			(func-call 'stream 'write_char {stream, char_lsb})
			(devirt-call 'unordered_set 'get_length {value} {length})
			(assign {this, stream, 0} {this, stream, index})
			(func-call 'unordered_set 'for_each {value, $callback, & this} {_, _})
			(func-call 'stream 'write_char {stream, char_rsb})
			(pop-scope)
			(break)
		(case {elem == @class/class_unordered_map})
			(struct 'pdata 'pdata)
			(push-scope)
			(func-call 'stream 'write_char {stream, char_lcb})
			(devirt-call 'unordered_map 'get_length {value} {length})
			(assign {this, stream, 0} {this, stream, index})
			(func-call 'unordered_map 'for_each {value, $callback, & this} {_, _})
			(func-call 'stream 'write_char {stream, char_rcb})
			(pop-scope)
			(break)
		(case {elem == @class/class_error})
			(func-call 'stream 'write_cstr {stream, "Error < "})
			(func-call 'error 'get_description {value} {elem})
			(func-call 'stream 'write {stream, & elem->string_data, elem->string_length})
			(func-call 'stream 'write_cstr {stream, " >"})
			(func-call 'stream 'write_char {stream, char_lf})
			(func-call 'error 'get_object {value} {elem})
			(func-call 'stream 'write_cstr {stream, "Ast < "})
			(func-call 'lisp 'repl_print {this, stream, elem})
			(func-call 'stream 'write_cstr {stream, " >"})
			(break)
		(case {elem == @class/class_vector})
			(struct 'pdata 'pdata)
			(push-scope)
			(devirt-call 'vector 'get_length {value} {length})
			(vpif {length})
				(func-call 'vector 'get_element {value, 0} {elem})
				(switch)
				(case {elem == this->lisp_sym_quote})
					(func-call 'stream 'write_char {stream, char_quote})
					(break)
				(case {elem == this->lisp_sym_qquote})
					(func-call 'stream 'write_char {stream, char_quasi_quote})
					(break)
				(case {elem == this->lisp_sym_unquote})
					(func-call 'stream 'write_char {stream, char_unquote})
					(break)
				(case {elem == this->lisp_sym_splicing})
					(func-call 'stream 'write_char {stream, char_splicing})
					(break)
				(default)
					goto notquote
				(endswitch)
				(func-call 'vector 'get_element {value, 1} {elem})
				(func-call 'lisp 'repl_print {this, stream, elem})
			(else)
			(vp-label 'notquote)
				(func-call 'stream 'write_char {stream, char_lrb})
				(assign {this, stream, 0} {this, stream, index})
				(func-call 'vector 'for_each {value, 0, length, $callback, & this} {_})
				(func-call 'stream 'write_char {stream, char_rrb})
			(endif)
			(pop-scope)
			(break)
		(default)
			(pubyte 'name_offset)
			(push-scope)
			(assign {elem - 1} {name_offset})
			(assign {elem - * name_offset} {elem})
			(func-call 'stream 'write_char {stream, char_at})
			(func-call 'stream 'write_cstr {stream, elem})
			(pop-scope)
		(endswitch)
	(endif)

	(assign {this} '(r0))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(const 'char_space (ascii " "))

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(func-call 'lisp 'repl_print {pdata->pdata_this, pdata->pdata_stream, * iter})
	(assign {pdata->pdata_index + 1} {pdata->pdata_index})
	(vpif {pdata->pdata_index != pdata->pdata_length})
		(func-call 'stream 'write_char {pdata->pdata_stream, char_space})
	(endif)

	(assign {1} '(r1))
	(pop-scope)
	(return)

(def-func-end)
