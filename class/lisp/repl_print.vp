(import 'sys/func.inc)
(import 'class/stream/class.inc)
(import 'class/symbol/class.inc)
(import 'class/integer/class.inc)
(import 'class/pair/class.inc)
(import 'class/hash_set/class.inc)
(import 'class/hash_map/class.inc)
(import 'gui/points/class.inc)
(import 'class/lisp/class.inc)

(def-method 'lisp 'repl_print)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = stream object (ptr)
	;r2 = value
	;outputs
	;r0 = lisp object (ptr)

	(def-struct 'local)
		(ptr 'this 'stream)
		(pptr 'iter_end)
		(uint 'length)
	(def-struct-end)

	(ptr 'this 'stream)
	(pptr 'iter_end)
	(uint 'length)

	(ptr 'value 'elem)

	(push-scope)
	(f-entry 'lisp 'repl_print {this, stream, value})

	(vpifnot {value})
		(call 'stream 'write_char {stream, char_lf})
		(call 'stream 'write_cstr {stream, "*NULL*"})
		(call 'stream 'write_char {stream, char_lf})
	(else)
		(assign {value->obj_vtable} {elem})
		(switch)
		(case (cat {elem == @} (f-path 'symbol 'vtable)))
			(call 'stream 'write {stream, &value->string_data, value->string_length})
			(break)
		(case (cat {elem == @} (f-path 'string 'vtable)))
			(call 'stream 'write_char {stream, char_double_quote})
			(call 'stream 'write {stream, &value->string_data, value->string_length})
			(call 'stream 'write_char {stream, char_double_quote})
			(break)
		(case (cat {elem == @} (f-path 'integer 'vtable)))
			(call 'integer 'get_value {value} {_, elem})
			(call 'string 'create_from_long {elem, 10} {value})
			(call 'stream 'write {stream, &value->string_data, value->string_length})
			(call 'obj 'deref {value})
			(break)
		(case (cat {elem == @} (f-path 'function 'vtable)))
			(call 'stream 'write_cstr {stream, "#0x"})
			(call 'function 'get_value {value} {_, elem})
			(call 'string 'create_from_long {elem, 16} {value})
			(call 'stream 'write {stream, &value->string_data, value->string_length})
			(call 'obj 'deref {value})
			(break)
		(case (cat {elem == @} (f-path 'pair 'vtable)))
			(call 'stream 'write_char {stream, char_lsb})
			(call 'pair 'get_first {value} {_, elem})
			(call 'lisp 'repl_print {this, stream, elem})
			(call 'stream 'write_char {stream, char_space})
			(call 'pair 'get_second {value} {_, elem})
			(call 'lisp 'repl_print {this, stream, elem})
			(call 'stream 'write_char {stream, char_rsb})
			(break)
		(case (cat {elem == @} (f-path 'hash_set 'vtable)))
			(call 'stream 'write_char {stream, char_lsb})
			(call 'hash_set 'get_iters {value} {_, _, iter_end})
			(assign {iter_end - ptr_size} {iter_end})
			(call 'hash_set 'for_each {value, $callback, &this})
			(call 'stream 'write_char {stream, char_rsb})
			(break)
		(case (cat {elem == @} (f-path 'hash_map 'vtable)))
			(call 'stream 'write_char {stream, char_lcb})
			(call 'hash_map 'get_iters {value} {_, _, iter_end})
			(assign {iter_end - ptr_size} {iter_end})
			(call 'hash_map 'for_each {value, $callback, &this})
			(call 'stream 'write_char {stream, char_rcb})
			(break)
		(case (cat {elem == @} (f-path 'array 'vtable) { || elem == @} (f-path 'points 'vtable)))
			(call 'stream 'write_char {stream, char_lsb})
			(d-call 'array 'get_length {value} {_, length})
			(call 'array 'get_end {value} {_, iter_end})
			(assign {iter_end - long_size} {iter_end})
			(call 'array 'for_each {value, 0, length, $callback1, &this})
			(call 'stream 'write_char {stream, char_rsb})
			(break)
		(case (cat {elem == @} (f-path 'error 'vtable)))
			(call 'stream 'write_cstr {stream, "Error: "})
			(call 'error 'get_description {value} {_, elem})
			(call 'stream 'write {stream, &elem->string_data, elem->string_length})
			(call 'stream 'write_cstr {stream, " "})
			(call 'error 'get_msg {value} {_, elem})
			(call 'stream 'write_cstr {stream, elem})
			(call 'stream 'write_cstr {stream, " < "})
			(call 'error 'get_object {value} {_, elem})
			(call 'lisp 'repl_print {this, stream, elem})
			(call 'stream 'write_cstr {stream, " > File: "})
			(call 'error 'get_file {value} {_, elem})
			(call 'stream 'write {stream, &elem->string_data, elem->string_length})
			(call 'stream 'write_cstr {stream, "("})
			(call 'error 'get_line {value} {_, elem})
			(call 'string 'create_from_long {elem, 10} {elem})
			(call 'stream 'write {stream, &elem->string_data, elem->string_length})
			(call 'obj 'deref {elem})
			(call 'stream 'write_cstr {stream, ")"})
			(break)
		(case (cat {elem == @} (f-path 'vector 'vtable)))
			(d-call 'vector 'get_length {value} {_, length})
			(vpif {length})
				(call 'vector 'get_first {value} {_, elem})
				(switch)
				(case {elem == this->lisp_sym_quote})
					(call 'stream 'write_char {stream, char_quote})
					(break)
				(case {elem == this->lisp_sym_qquote})
					(call 'stream 'write_char {stream, char_tick})
					(break)
				(case {elem == this->lisp_sym_unquote})
					(call 'stream 'write_char {stream, char_comma})
					(break)
				(case {elem == this->lisp_sym_splicing})
					(call 'stream 'write_char {stream, char_tilda})
					(break)
				(default)
					(goto 'notquote)
				(endswitch)
				(call 'vector 'get_second {value} {_, elem})
				(call 'lisp 'repl_print {this, stream, elem})
			(else)
			(vp-label 'notquote)
				(call 'stream 'write_char {stream, char_lrb})
				(call 'vector 'get_end {value} {_, iter_end})
				(assign {iter_end - ptr_size} {iter_end})
				(call 'vector 'for_each {value, 0, length, $callback, &this})
				(call 'stream 'write_char {stream, char_rrb})
			(endif)
			(break)
		(default)
			(pubyte 'name_offset)
			(push-scope)
			(assign {elem - 1} {name_offset})
			(assign {elem - *name_offset} {elem})
			(call 'stream 'write_char {stream, char_at})
			(call 'stream 'write_cstr {stream, elem})
			(pop-scope)
		(endswitch)
	(endif)

	(f-exit 'lisp 'repl_print {this})
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (ptr)
	;outputs
	;r1 = 0 if break, else not

	(ptr 'pdata)
	(pptr 'iter)

	(push-scope)
	(f-entry 'array 'each_callback {pdata, iter})

	(call 'lisp 'repl_print {pdata->local_this, pdata->local_stream, *iter})
	(vpif {pdata->local_iter_end != iter})
		(call 'stream 'write_char {pdata->local_stream, char_space})
	(endif)

	(f-exit 'array 'each_callback '(-1))
	(pop-scope)
	(return)

(vp-label 'callback1)
	;inputs
	;r0 = predicate data (ptr)
	;r1 = element iterator (ptr)
	;outputs
	;r1 = 0 if break, else not

	(ptr 'pdata 'value)
	(plong 'iter)

	(push-scope)
	(f-entry 'array 'each_callback {pdata, iter})

	(vpif {*iter < 0})
		(call 'string 'create_from_long {-(*iter), 16} {value})
		(call 'stream 'write_cstr {pdata->local_stream, "-"})
	(else)
		(call 'string 'create_from_long {*iter, 16} {value})
	(endif)
	(call 'stream 'write_cstr {pdata->local_stream, "0x"})
	(call 'stream 'write {pdata->local_stream, &value->string_data, value->string_length})
	(call 'obj 'deref {value})
	(vpif {pdata->local_iter_end != iter})
		(call 'stream 'write_char {pdata->local_stream, char_space})
	(endif)

	(f-exit 'array 'each_callback '(-1))
	(pop-scope)
	(return)

(def-func-end)
