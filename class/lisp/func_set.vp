(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_set)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'var 'val)
	(uint 'length 'index)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(errorif {length < 2 || (length & 1)} 'error1)
	(assign {0, 0} {index, val})
	(loop-start)
		(f-call 'ref 'deref_if {val})
		(f-call 'vector 'get_element {args, index} {var})
		(errorif (cat {var->obj_vtable != @} (f-path 'class 'symbol)) 'error2)
		(f-call 'vector 'get_element {args, index + 1} {val})
		(f-call 'lisp 'env_set {this, var, val} {_, val})
		(breakif (cat {val->obj_vtable == @} (f-path 'class 'error)))
		(assign {index + 2} {index})
	(loop-until {index == length})

(vp-label 'exit)
	(assign {this, val} '(r0 r1))
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(set var val ...) wrong number of args"} {val})
	(goto 'error)
(vp-label 'error2)
	(assign {"(set var val ...) not a symbol"} {val})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, val, args} {_, val})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
