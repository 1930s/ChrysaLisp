(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_set)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'var 'val)
	(uint 'length 'index)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length >= 2 && !(length & 1)})
		(assign {0, 0} {index, val})
		(loop-start)
			(f-call 'ref 'deref_if {val})
			(f-call 'vector 'get_element {args, index} {var})
			(vpif {var->obj_vtable != @class/class_symbol})
				(f-call 'error 'create {"(set var val ...) not a symbol", args} {val})
				(goto 'error)
			(endif)
			(f-call 'vector 'get_element {args, index + 1} {val})
			(f-call 'lisp 'env_set {this, var, val} {val})
			(breakif {val->obj_vtable == @class/class_error})
			(assign {index + 2} {index})
		(loop-until {index == length})
	(else)
		(f-call 'error 'create {"(set var val ...) wrong number of args", args} {val})
	(endif)
(vp-label 'error)
	(assign {this, val} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
