(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/error/error.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_scope)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'env)
	(ulong 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length > 0})
		(f-call 'vector 'get_element {args, 0} {value})
		(f-call 'lisp 'repl_eval {this, value} {value})
		(vpif {value->obj_vtable == @class/class_unordered_map})
			(assign {this->lisp_enviroment} {env})
			(assign {value} {this->lisp_enviroment})
			(f-call 'lisp 'repl_eval_list {this, args, 1} {value})
			(vpif {value->obj_vtable != @class/class_error})
				(f-call 'ref 'deref {value})
				(vpif {length > 1})
					(d-call 'vector 'ref_element {args, length - 1} {value})
				(else)
					(assign {this->lisp_sym_nil} {value})
					(f-call 'ref 'ref {value})
				(endif)
			(endif)
			(f-call 'ref 'deref {this->lisp_enviroment})
			(assign {env} {this->lisp_enviroment})
		(else)
			(f-call 'ref 'deref {value})
			(f-call 'error 'create {"(scope env ...) not an enviroment", args} {value})
		(endif)
	(else)
		(f-call 'error 'create {"(scope env ...) wrong number of args", args} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
