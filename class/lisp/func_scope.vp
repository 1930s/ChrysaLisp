(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_scope)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'value 'env)
	(uint 'length)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(errorifnot {length} 'error1)
	(f-call 'vector 'get_element {args, 0} {value})
	(f-call 'lisp 'repl_eval {this, value} {value})
	(errorif (cat {value->obj_vtable != @} (f-path 'class 'unordered_map)) 'error2)
	(assign {this->lisp_enviroment} {env})
	(assign {value} {this->lisp_enviroment})
	(f-call 'lisp 'repl_eval_list {this, args, 1} {value})
	(vpif (cat {value->obj_vtable != @} (f-path 'class 'error)))
		(f-call 'ref 'deref {value})
		(vpif {length > 1})
			(f-call 'vector 'ref_back {args} {value})
		(else)
			(assign {this->lisp_sym_nil} {value})
			(f-call 'ref 'ref {value})
		(endif)
	(endif)
	(f-call 'ref 'deref {this->lisp_enviroment})
	(assign {env} {this->lisp_enviroment})

(vp-label 'exit)
	(assign {this, value} '(r0 r1))
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(scope env ...) wrong number of args"} {value})
	(goto 'error)
(vp-label 'error2)
	(f-call 'ref 'deref {value})
	(assign {"(scope env ...) not an enviroment"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, args} {value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
