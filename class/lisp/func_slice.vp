(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/sliceable/sliceable.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_slice)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'slc 'value)
	(int 'length 'start 'end)

	(push-scope)
	(f-entry 'lisp 'func_slice {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length != 3} 'error1)
	(f-call 'vector 'get_element {args, 2} {_, slc})

(errorcases
	(f-call 'obj 'inst_of (cat {slc, @} (f-path 'class 'sliceable)) {_, value})
	(errorifnot {value} 'error2))

	(f-call 'vector 'get_element {args, 0} {_, value})
	(errorif (cat {value->obj_vtable != @} (f-path 'class 'boxed_long)) 'error3)
	(f-call 'boxed_long 'get_value {value} {_, start})
	(f-call 'vector 'get_element {args, 1} {_, value})
	(errorif (cat {value->obj_vtable != @} (f-path 'class 'boxed_long)) 'error3)
	(f-call 'boxed_long 'get_value {value} {_, end})
	(v-call 'sliceable 'get_length {slc} {_, length})
	(vpif {start < 0})
		(assign {length + start + 1} {start})
	(endif)
	(vpif {end < 0})
		(assign {length + end + 1} {end})
	(endif)
	(errorif {start > end || start < 0 || end > length} 'error4)
	(v-call 'sliceable 'slice {slc, start, end} {_, value})

(vp-label 'exit)
	(f-exit 'lisp 'func_slice {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(assign {"(slice start end slc) wrong number of args"} {value})
	(goto 'error)
(vp-label 'error2)
	(assign {"(slice start end slc) not sliceable"} {value})
	(goto 'error)
(vp-label 'error3)
	(assign {"(slice start end slc) not an index"} {value})
	(goto 'error)
(vp-label 'error4)
	(assign {"(slice start end slc) index out of bounds"} {value})
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, value, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
