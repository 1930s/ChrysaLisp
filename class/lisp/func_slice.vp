(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/sliceable/sliceable.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_slice)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args 'slc 'value)
	(int 'length 'start 'end)

	(push-scope)
	(assign '(r0 r1) {this, args})

	(d-call 'vector 'get_length {args} {length})
	(vpif {length == 3})
		(f-call 'vector 'get_element {args, 2} {slc})
		(f-call 'obj 'inst_of (cat {slc, @} (f-path 'class 'sliceable)) {value})
		(vpif {value})
			(f-call 'vector 'get_element {args, 0} {value})
			(vpif (cat {value->obj_vtable == @} (f-path 'class 'boxed_long)))
				(f-call 'boxed_long 'get_value {value} {start})
				(f-call 'vector 'get_element {args, 1} {value})
				(gotoif (cat {value->obj_vtable != @} (f-path 'class 'boxed_long)) 'index_error)
				(f-call 'boxed_long 'get_value {value} {end})
				(v-call 'sliceable 'get_length {slc} {length})
				(vpif {start < 0})
					(assign {length + start + 1} {start})
				(endif)
				(vpif {end < 0})
					(assign {length + end + 1} {end})
				(endif)
				(vpif {start <= end && start >= 0 && end <= length})
					(v-call 'sliceable 'slice {slc, start, end} {value})
					(assign {this, value} '(r0 r1))
					(return)
				(else)
					(f-call 'lisp 'repl_error {this, "(slice start end slc) index out of bounds", args} {value})
				(endif)
			(else)
			(vp-label 'index_error)
				(f-call 'lisp 'repl_error {this, "(slice start end slc) not an index", args} {value})
			(endif)
		(else)
			(f-call 'lisp 'repl_error {this, "(slice start end slc) not sliceable", args} {value})
		(endif)
	(else)
		(f-call 'lisp 'repl_error {this, "(slice start end slc) wrong number of args", args} {value})
	(endif)

	(assign {this, value} '(r0 r1))
	(pop-scope)
	(return)

(def-func-end)
