(import 'inc/func.inc)
(import 'class/unordered_map/unordered_map.inc)
(import 'class/pair/pair.inc)
(import 'class/vector/vector.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/repl_expand)
	;inputs
	;r0 = lisp object
	;r1 = iter to form
	;r2 = 0
	;outputs
	;r0 = lisp object
	;r1 = expantion count

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_form)
		(ulong 'pdata_cnt)
	(def-struct-end)

	(ptr 'this 'form)
	(ulong 'cnt)

	(ptr 'macro 'args)
	(pptr 'iter 'miter)
	(uint 'length)

	(push-scope)
	(assign '(r0 r1 r2) {this, iter, cnt})

	(assign {*iter} {form})
	(vpif (cat {form->obj_vtable == @} (f-path 'class 'vector)))
		(d-call 'vector 'get_length {form} {length})
		(breakifnot {length})
		(f-call 'vector 'get_element {form, 0} {macro})
		(breakif {macro == this->lisp_sym_quote})
		(vpif (cat {macro->obj_vtable == @} (f-path 'class 'symbol)))
			(f-call 'lisp 'env_find {this, macro} {miter, _})
			(gotoifnot {miter} 'decend)
			(f-call 'pair 'get_second {*miter} {macro})
			(gotoif (cat {macro->obj_vtable != @} (f-path 'class 'vector)) 'decend)
			(f-call 'vector 'get_element {macro, 0} {args})
			(gotoif {args != this->lisp_sym_macro} 'decend)
			(f-call 'lisp 'env_push {this})
			(f-call 'vector 'get_element {macro, 1} {args})
			(f-call 'lisp 'env_bind {this, args, form, 1} {form})
			(vpif (cat {form->obj_vtable != @} (f-path 'class 'error)))
				(f-call 'vector 'for_each {macro, 2, macro->vector_length, $callback1, &this} {_})
			(endif)
			(f-call 'lisp 'env_pop {this})
			(f-call 'ref 'deref {*iter})
			(assign {form, cnt + 1} {*iter, cnt})
		(else)
		(vp-label 'decend)
			(f-call 'vector 'for_each {form, 0, length, $callback2, &this} {_})
		(endif)
	(endif)

	(assign {this, cnt} '(r0 r1))
	(pop-scope)
	(return)

(vp-label 'callback1)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(f-call 'ref 'deref {pdata->pdata_form})
	(f-call 'lisp 'repl_eval {pdata->pdata_this, *iter} {pdata->pdata_form})

	(errorassign (cat {pdata->pdata_form->obj_vtable != @} (f-path 'class 'error)) '(r1))
	(pop-scope)
	(return)

(vp-label 'callback2)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(f-call 'lisp 'repl_expand {pdata->pdata_this, iter, pdata->pdata_cnt} {pdata->pdata_cnt})

	(vp-or-cr -1 r1)
	(pop-scope)
	(return)

(def-func-end)
