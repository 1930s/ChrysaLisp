(import 'inc/func.inc)
(import 'class/class_unordered_map.inc)
(import 'class/class_pair.inc)
(import 'class/class_vector.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/repl_expand)
	;inputs
	;r0 = lisp object
	;r1 = iter to form
	;outputs
	;r0 = lisp object
	;r1 = 0 if expanded

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_form)
	(def-struct-end)

	(pptr 'iter 'miter)
	(ptr 'this 'form 'macro 'args)
	(ulong 'length)

	(push-scope)
	(assign '(r0 r1) {this, iter})

	(assign {*iter} {form})
	(vpif {form->obj_vtable == @class/class_vector})
		(d-call 'vector 'get_length {form} {length})
		(vpif {length})
			(f-call 'vector 'get_element {form, 0} {macro})
			(breakif {macro == this->lisp_sym_quote})
			(vpif {macro->obj_vtable == @class/class_symbol})
				(f-call 'unordered_map 'find {this->lisp_macros, macro} {miter, _})
				(vpif {miter})
					(f-call 'pair 'get_second {* miter} {macro})
					(f-call 'lisp 'env_push {this})
					(f-call 'vector 'get_element {macro, 0} {args})
					(f-call 'lisp 'env_bind {this, args, form, 1} {form})
					(vpif {form->obj_vtable != @class/class_error})
						(f-call 'vector 'for_each {macro, 1, macro->vector_length, $callback, &this} {_})
					(endif)
					(f-call 'lisp 'env_pop {this})
					(f-call 'ref 'deref {*iter})
					(assign {form} {*iter})
					(assign {this, form->obj_vtable == @class/class_error} '(r0 r1))
					(return)
				(endif)
			(endif)
			(f-path 'lisp 'repl_expand)
			(f-call 'vector 'for_each (cat {form, 0, length, @} (str _function_) {, this}) {iter})
			(assign {!iter} {iter})
		(endif)
	(endif)

	(assign {this, iter} '(r0 r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(assign '(r0 r1) {pdata, iter})

	(f-call 'ref 'deref {pdata->pdata_form})
	(f-call 'lisp 'repl_eval {pdata->pdata_this, *iter} {pdata->pdata_form})

	(assign {pdata->pdata_form->obj_vtable != @class/class_error} '(r1))
	(pop-scope)
	(return)

(def-func-end)
