(import 'sys/func.inc)
(import 'class/stream/stream.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/read_quote)
	;inputs
	;r0 = lisp object
	;r1 = stream
	;r2 = next char
	;outputs
	;r0 = lisp object
	;r1 = list
	;r2 = next char

	(ptr 'this 'stream 'list 'elem)
	(ulong 'char)

	(push-scope)
	(f-entry 'lisp 'read_quote {this, stream, char})

	;skip "'"
	(f-call 'stream 'read_char {stream} {_, char})

	(f-call 'vector 'create {} {list})
	(f-call 'ref 'ref {this->lisp_sym_quote} {elem})
	(f-call 'vector 'push_back {list, elem})
	(f-call 'lisp 'read {this, stream, char} {_, elem, char})
	(errorif (cat {elem->obj_vtable == @} (f-path 'class 'error)) 'error)
	(f-call 'vector 'push_back {list, elem})

(vp-label 'exit)
	(f-exit 'lisp 'read_quote {this, list, char})
	(return)

(errorcases
(vp-label 'error)
	(f-call 'ref 'deref {list})
	(assign {elem} {list})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)
