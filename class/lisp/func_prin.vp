(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'class/stream/stream.inc)
(import 'class/lisp/lisp.inc)

(def-func 'class/lisp/func_prin)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_prin {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(f-call 'vector 'for_each {args, 0, length, $callback, this} {_})
	(f-call 'vector 'ref_back {args} {args})

	(f-exit 'lisp 'func_prin {this, args})
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata 'elem)

	(push-scope)
	(f-entry 'vector 'callback {pdata, iter})

	(assign {*iter} {elem})
	(vpif (cat {elem->obj_vtable == @} (f-path 'class 'string)))
		(f-call 'stream 'write {pdata->lisp_stdout, &elem->string_data, elem->string_length})
	(else)
		(f-call 'lisp 'repl_print {pdata, pdata->lisp_stdout, elem} '(_))
	(endif)

	(f-exit 'vector 'callback '(1))
	(pop-scope)
	(return)

(def-func-end)
