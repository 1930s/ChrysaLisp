(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_string.inc)
(import 'class/class_stream.inc)
(import 'class/class_lisp.inc)

(def-func 'class/lisp/func_prin)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(ptr 'this 'args)
	(ulong 'length)

	(push-scope)
	(retire '(r0, r1) '(this, args))

	(devirt-call 'vector 'get_length '(args) '(length))
	(func-call 'vector 'for_each '(args, 0, length, $ callback, this) '(_))
	(assign '(this -> lisp_sym_t) '(args))
	(func-call 'ref 'ref '(args))

	(eval '(this, args) '(r0, r1))
	(pop-scope)
	return

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata 'elem)

	(push-scope)
	(retire '(r0, r1) '(pdata, iter))

	(assign '(* iter) '(elem))
	(vpif '((elem -> obj_vtable == @class/class_string)))
		(func-call 'stream 'write '(pdata -> lisp_stdout, & elem -> string_data, elem -> string_length))
	(else)
		(func-call 'lisp 'repl_print '(pdata, pdata -> lisp_stdout, elem))
	(endif)

	(eval '(1) '(r1))
	(pop-scope)
	return

(def-func-end)
