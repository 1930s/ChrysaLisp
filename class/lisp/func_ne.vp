(import 'sys/func.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

;ne all different

(def-method 'lisp 'func_ne)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args)
	(union
		'(pptr 'iter_start 'iter 'iter_begin 'iter_end)
		'(ptr 'value))
	(long 'accum 'num)

	(push-scope)
	(entry 'lisp 'func_ne {this, args})

(errorcases
	(call 'lisp 'env_args_type (cat {this, args, @} (f-path 'integer 'vtable) {, -2}) {_, value})
	(errorifnot {value} 'error1))

	(call 'vector 'get_iters {args} {_, iter_begin, iter_end})
	(assign {iter_begin} {iter_start})
	(loop-start)
		(call 'integer 'get_value {*iter_begin} {_, accum})
		(assign {iter_begin} {iter})
		(loop-while {iter != iter_start})
			(assign {iter - ptr_size} {iter})
			(call 'integer 'get_value {*iter} {_, num})
			(gotoif {num == accum} 'fail)
		(loop-end)
		(assign {iter_begin + ptr_size} {iter_begin})
	(loop-until {iter_begin == iter_end})
	(assign {this->lisp_sym_t} {value})
(vp-label 'exit1)
	(call 'obj 'ref {value})

(vp-label 'funcexit)
	(exit 'lisp 'func_ne {this, value})
	(return)

(vp-label 'fail)
	(assign {this->lisp_sym_nil} {value})
	(goto 'exit1)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(ne num num ...)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
