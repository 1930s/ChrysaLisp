(import 'inc/func.inc)
(import 'class/vector/vector.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

;ne all different

(def-func 'class/lisp/func_ne)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_value)
		(pptr 'pdata_iter)
	(def-struct-end)

	(ptr 'this 'value)
	(pptr 'iter)

	(ptr 'args)
	(uint 'length)

	(push-scope)
	(f-entry 'lisp 'func_ne {this, args})

	(d-call 'vector 'get_length {args} {_, length})
	(errorifnot {length} 'error)
	(assign {args->vector_array} {iter})
	(assign {this->lisp_sym_t} {value})
	(f-call 'ref 'ref {value} '(_))
	(f-call 'vector 'for_each {args, 0, length, $callback, &this} {_})

(vp-label 'exit)
	(f-exit 'lisp 'func_ne {this, value})
	(return)

(errorcases
(vp-label 'error)
	(f-call 'lisp 'repl_error {this, "(ne num num ...) wrong number of args", args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)
	(long 'num 'num1)

	(push-scope)
	(f-entry 'vector 'callback {pdata, iter})

	(errorif (cat {(*iter)->obj_vtable != @} (f-path 'class 'boxed_long)) 'error1)
	(f-call 'boxed_long 'get_value {*iter} {num})
	(loop-while {iter != pdata->pdata_iter})
		(assign {iter - ptr_size} {iter})
		(f-call 'boxed_long 'get_value {*iter} {num1})
		(continueif {num != num1})
		(f-call 'ref 'deref {pdata->pdata_value} '(_))
		(assign {pdata->pdata_this->lisp_sym_nil} {pdata->pdata_value})
		(f-call 'ref 'ref {pdata->pdata_value} '(_))
		(f-exit 'vector 'callback '(0))
		(return)
	(loop-end)

	(f-exit 'vector 'callback '(1))
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'ref 'deref {pdata->pdata_value} '(_))
	(f-call 'lisp 'repl_error {pdata->pdata_this, "(ne num num ...) not all numbers", *iter} {_, pdata->pdata_value})
	(f-exit 'vector 'callback '(0))
	(return))

	(pop-scope-syms)

(def-func-end)
