(import 'sys/func.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

;ne all different

(def-method 'lisp 'func_ne)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this)
	(union
		'(ptr 'args)
		'(ptr 'value))

	(push-scope)
	(entry 'lisp 'func_ne {this, args})

(errorcases
	(call 'lisp 'env_args_type (cat {args, @} (f-path 'integer 'vtable) {, -2}) '(r1))
	(errorif '(r1 == 0) 'error1))

	(vp-def (num iter_begin iter_end num1 iter iter_stop))
	(call 'vector 'get_iters {args} (list '_ iter_begin iter_end))
	(vp-lea-i iter_end (neg ptr_size) iter_stop)
	(loop-start)
		(vp-cpy-ir iter_begin 0 num)
		(vp-add-cr ptr_size iter_begin)
		(vp-cpy-rr iter_begin iter)
		(vp-cpy-ir num integer_value num)
		(loop-start)
			(vp-cpy-ir iter 0 num1)
			(vp-add-cr ptr_size iter)
			(vp-cpy-ir num1 integer_value num1)
			(gotoif (list num1 '== num) 'fail)
		(loop-until (list iter '== iter_end))
	(loop-until (list iter_begin '== iter_stop))

	(call 'obj 'ref {this->lisp_sym_t} {value})
	(exit 'lisp 'func_ne {this, value})
	(return)

(vp-label 'fail)
	(call 'obj 'ref {this->lisp_sym_nil} {value})
(vp-label 'funcexit)
	(exit 'lisp 'func_ne {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(ne num num ...)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)
