(import 'inc/func.inc)
(import 'class/class_vector.inc)
(import 'class/class_boxed_long.inc)
(import 'class/class_error.inc)
(import 'class/class_lisp.inc)

;ne all different

(def-func 'class/lisp/func_ne)
	;inputs
	;r0 = lisp object
	;r1 = args
	;outputs
	;r0 = lisp object
	;r1 = value

	(def-struct 'pdata)
		(ptr 'pdata_this)
		(ptr 'pdata_value)
		(pptr 'pdata_iter)
	(def-struct-end)

	(ptr 'this 'value)
	(pptr 'iter)

	(ptr 'args)
	(ulong 'length)

	(push-scope)
	(retire '(r0, r1) '(this, args))

	(devirt-call 'vector 'get_length '(args) '(length))
	(vpif '((length > 1)))
		(assign '(args -> vector_array) '(iter))
		(assign '(this -> lisp_sym_t) '(value))
		(func-call 'ref 'ref '(value))
		(func-call 'vector 'for_each '(args, 0, length, $ callback, & this) '(_))
	(else)
		(func-call 'error 'create '("(ne num num ...) wrong number of args", args) '(value))
	(endif)

	(expr '(this, value) '(r0, r1))
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)
	(long 'num 'num1)

	(push-scope)
	(retire '(r0, r1) '(pdata, iter))

	(vpif '(((* iter) -> obj_vtable == @class/class_boxed_long)))
		(func-call 'boxed_long 'get_value '(* iter) '(num))
		(loop-while '((iter != pdata -> pdata_iter)))
			(assign '(iter - ptr_size) '(iter))
			(func-call 'boxed_long 'get_value '(* iter) '(num1))
			(continueif '(num != num1))
			(func-call 'ref 'deref '(pdata -> pdata_value))
			(assign '(pdata -> pdata_this -> lisp_sym_nil) '(pdata -> pdata_value))
			(func-call 'ref 'ref '(pdata -> pdata_value))
			(expr '(0) '(r1))
			(return)
		(loop-end)
		(expr '(1) '(r1))
		(return)
	(else)
		(func-call 'ref 'deref '(pdata -> pdata_value))
		(func-call 'error 'create '("(ne num num ...) not all numbers", * iter) '(pdata -> pdata_value))
	(endif)

	(expr '(0) '(r1))
	(pop-scope)
	(return)

(def-func-end)
