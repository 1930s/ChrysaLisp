(import 'sys/func.inc)
(import 'class/symbol/class.inc)
(import 'class/lisp/class.inc)

(def-method 'lisp 'func_merge)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'list1)
	(pptr 'iter_begin 'iter_end)
	(union
		'(ptr 'list2)
		'(uint 'length)
		'(int 'index))

	(push-scope)
	(f-entry 'lisp 'func_merge {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 2} {_, list1})
	(errorifnot {list1} 'error1))

	(f-call 'vector 'get_first {args} {_, list1})
	(f-call 'vector 'get_second {args} {_, list2})
	(f-call 'vector 'get_iters {list2} {_, iter_begin, iter_end})
	(d-call 'vector 'get_length {list2} {_, length})
	(f-call 'vector 'set_capacity {list1, length})
	(loop-while {iter_begin != iter_end})
		(assign {*iter_begin} {args})
		(assign {iter_begin + ptr_size} {iter_begin})
		(errorif (cat {args->obj_vtable != @} (f-path 'symbol 'vtable)) 'error1)
		(f-call 'vector 'find {list1, args} {_, index})
		(continueif {index != -1})
		(f-call 'obj 'ref {args})
		(f-call 'vector 'push_back {list1, args})
	(loop-end)
	(f-call 'obj 'ref {list1})

(vp-label 'exit)
	(f-exit 'lisp 'func_merge {this, list1})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(merge-sym list list)", error_msg_wrong_types, args} {_, list1})
	(goto 'exit)
	(signature 'sig 'vector 'vector))

	(pop-scope-syms)

(def-func-end)
