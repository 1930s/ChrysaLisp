(import 'sys/func.inc)
(import 'sys/kernel/class.inc)
(import 'sys/link/class.inc)
(import 'sys/math/class.inc)

;;;;;;;;;;;
; test code
;;;;;;;;;;;

(def-func 'tests/global_child)

	(union
		'(ptr 'msg)
		'(uint 'num))
	(pulong 'data)
	(uint 'length)

	(push-scope)

	;read exit command etc
	(f-call 'sys_mail 'mymail nil {msg, data})
	(assign {0} {length})
	(loop-start)
		(assert {length == data[length]})
		(assign {length + long_size} {length})
	(loop-until {length == lk_data_size * 10})
	(f-call 'sys_mail 'free {msg})

	;wait a bit
	(f-call 'sys_math 'random {1000000} {num})
	(f-call 'sys_task 'sleep {num + 1000000})

	(pop-scope)
	(return)

(def-func-end)

(def-func 'tests/child)

	(union
		'(ptr 'msg)
		'(uint 'num))

	(push-scope)

	;read exit command etc
	(f-call 'sys_mail 'mymail nil {msg, _})
	(f-call 'sys_mail 'free {msg})

	;wait a bit
	(f-call 'sys_math 'random {1000000} {num})
	(f-call 'sys_task 'sleep {num + 1000000})

	(pop-scope)
	(return)

(def-func-end)

(def-func 'tests/migrate_child)

	(ptr 'msg 'name)
	(pulong 'data)
	(ulong 'num)

	(push-scope)

	;read work value etc
	(f-call 'sys_mail 'mymail nil {msg, data})

	;wait a bit (gee that's hard work etc)
	(f-call 'sys_math 'random {100000} {num})
	(f-call 'sys_task 'sleep {num + 100000})

	;do we have more work to do ?
	(assign {*data} {num})
	(assign {num - 1} {num})
	(vpif {num})
		;more work to do, so lets migrate the task
		(assign {num} {*data})
		(f-call 'string 'create_from_cstr {"tests/migrate_child"} {name})
		(f-call 'sys_task 'open_child {name, kn_call_child} {msg->msg_dest.id_id})
		(f-call 'string 'deref {name})
		(f-call 'sys_mail 'send {msg})
	(else)
		;no, we're done
		(f-call 'sys_mail 'free {msg})
	(endif)

	(pop-scope)
	(return)

(def-func-end)
