(import 'inc/func.inc)
(import 'inc/mail.inc)
(import 'class/class_string.inc)

;;;;;;;;;;;
; test code
;;;;;;;;;;;

(def-func 'tests/farm)

	(const 'num_child 128)

	(ptr 'name 'ids 'msg)
	(ulong 'cnt)

	(push-scope)

	;task
	(func-call 'string 'create_from_cstr {"tests/farm_child"} {name})

	;open farm
	(func-call 'sys_task 'open_farm {name, num_child} {ids})

	;send exit messages etc
	(assign {num_child} {cnt})
	(loop-while {cnt != 0})
		(assign {cnt - 1} {cnt})
		(continueifnot '(ids [ cnt * id_size ] . id_mbox))
		(func-call 'sys_mail 'alloc {} {msg})
		(assign {ids [ cnt * id_size ] . id_mbox} {msg -> msg_dest . id_mbox})
		(assign {ids [ cnt * id_size ] . id_cpu} {msg -> msg_dest . id_cpu})
		(func-call 'sys_mail 'send {msg})
		(func-call 'sys_task 'yield)
	(loop-end)

	;free name and ID array
	(func-call 'string 'deref {name})
	(func-call 'sys_mem 'free {ids})
	(pop-scope)
	(return)

(def-func-end)
