(import 'sys/func.inc)
(import 'sys/heap.inc)
(import 'gui/sdl2.inc)
(import 'class/label/label.inc)
(import 'class/string/string.inc)
(import 'sys/kernel.inc)

(defcvar 'dual_buffers t)

(def-func 'gui/gui_statics)
	(times gui_statics_size (vp-byte 0))
(def-func-end)

(def-func 'gui/gui_init)
	;inputs
	;r0 = sdl function table

	;init sdl function table
	(f-bind 'gui_gui 'statics r4)
	(vp-cpy-ri r0 r4 gui_statics_sdl_funcs)

	;init old region
	(vp-xor-rr r0 r0)
	(vp-cpy-ri r0 r4 gui_statics_old_region)

	;init region heap
	(f-jmp 'sys_heap 'init '((& r4 gui_statics_rect_heap) gui_rect_size (mul gui_rect_size 32)))

(def-func-end)

(def-func 'gui/gui)
	(def-struct 'local)
		(int 'x_pos)
		(int 'y_pos)
		(long 'buttons)
		(int 'last_x_pos)
		(int 'last_y_pos)
		(long 'last_buttons)
		(ptr 'last_view)
		(ptr 'key_view)
		(ptr 'keymap)
		(uint 'keymap_size)
		(ptr 'old_keymap)
	(def-struct-end)

	;init vars
	(vp-alloc local_size)
	(vp-xor-rr r0 r0)
	(vp-cpy-ri-i r0 rsp local_last_x_pos)
	(vp-cpy-ri-i r0 rsp local_last_y_pos)
	(vp-cpy-ri r0 rsp local_last_buttons)
	(vp-cpy-ri r0 rsp local_last_view)
	(vp-cpy-ri r0 rsp local_key_view)
	(vp-cpy-ri r0 rsp local_old_keymap)
	(f-bind 'gui_gui 'statics r1)
	(vp-cpy-ri r0 r1 gui_statics_screen)

	;kernel callback for first update
	;this will init SDL etc
	(f-call 'sys_task 'callback '(($ update_callback) rsp))

	;allocate background view for screen
	(f-call 'label 'create '() '(r0))
	(f-bind 'gui_gui 'statics r1)
	(vp-cpy-ri r0 r1 gui_statics_screen)

	;size and color and opaque
	(f-call 'label 'change '(r0 0 0 SCREEN_WIDTH SCREEN_HEIGHT))
	(f-call 'label 'set_color '(r0 0xff000000))
	(f-call 'label 'opaque '(r0))
	(f-call 'label 'dirty_all '(r0))

	;sleep just a moment to let all routeing finish
	;(f-call 'sys_task 'sleep '(1000000))

	;for now fire up the test apps
	;this might be an gui auto run list eventually
	(f-call 'sys_task 'start '((@ apps/launcher/app)))

	;gui event loop
	(loop-start)
	(vp-label 'next_frame)
		;kernel callback for update
		(f-call 'sys_task 'callback '(($ update_callback) rsp))

		;frame rate of gui updates
		(f-call 'sys_task 'sleep '((div 1000000 30)))

		;get keyboard info, see if any changes
		(vp-cpy-ir rsp local_old_keymap r1)
		(vpif '(r1 == 0))
			;create old keymap
			(f-call 'sys_mem 'alloc '((rsp local_keymap_size)) '(r0 _))
			(vp-cpy-ri r0 rsp local_old_keymap)
			(f-call 'sys_mem 'clear '(r0 (rsp local_keymap_size)))
			(vp-cpy-ir rsp local_old_keymap r1)
		(endif)
		(vp-cpy-ir rsp local_keymap r0)
		(vp-cpy-ir-ui rsp local_keymap_size r2)

		;dispatch any key events
		(vp-cpy-ir-ub r0 0xe1 r7)
		(vp-cpy-ir-ub r0 0xe5 r9)
		(vp-or-rr r7 r9)
		(loop-while '(r2 != 0))
			(vp-sub-cr 1 r2)
			(vp-cpy-dr-ub r0 r2 r7)
			(vp-cpy-dr-ub r1 r2 r8)
			(vpif '(r7 != r8))
				;set scan code, - for up
				(vp-cpy-rd-b r7 r1 r2)
				(vp-cpy-rr r2 r10)
				(vpif '(r7 == 0))
					(vp-mul-cr -1 r10)
				(endif)

				;cook keycode
				(vp-lea-p 'scan_codes r4)
				(vp-lea-p 'scan_codes_end r5)
				(vp-xor-rr r11 r11)
				(loop-start)
					(vp-cpy-ir-ub r4 0 r7)
					(vpif '(r7 == r2))
						(vp-lea-i r9 1 r11)
						(vp-cpy-dr-ub r4 r11 r11)
					(endif)
					(vp-add-cr 3 r4)
				(loop-until '(r4 >= r5))

				;dispatch to task and target view
				(vp-cpy-ir rsp local_key_view r5)
				(vpif '(r5 != 0))
					(vp-push r0 r1 r2)
					;lookup view owner
					(f-call 'view 'find_owner '(r5) '(_ r1))
					(vpif '(r1 != 0))
						;save owner mailbox
						(f-call 'kernel 'id '() '(r14))
						(vp-lea-i r1 tk_node_mailbox r13)

						;allocate mail message
						(f-call 'sys_mail 'alloc '() '(r0))

						;fill in data
						(vp-cpy-cr ev_msg_size r1)
						(vp-cpy-ri r1 r0 msg_length)
						(vp-cpy-ri r13 r0 (add msg_dest id_mbox))
						(vp-cpy-ri r14 r0 (add msg_dest id_cpu))
						(vp-cpy-cr ev_type_key r1)
						(vp-cpy-ri r1 r0 ev_msg_type)
						(vp-cpy-ri r5 r0 ev_msg_view)
						(vp-cpy-ri r10 r0 ev_msg_keycode)
						(vp-cpy-ri r11 r0 ev_msg_key)

						;send mail to owner
						(f-call 'sys_mail 'send '(r0))
					(endif)
					(vp-pop r0 r1 r2)
				(endif)
			(endif)
		(loop-end)

		;get mouse info, see if any changes
		(vp-cpy-ir-i rsp local_x_pos r7)
		(vp-cpy-ir-i rsp local_y_pos r8)
		(vp-cpy-ir rsp local_buttons r9)
		(vp-cpy-ir-i rsp local_last_x_pos r10)
		(vpif '(r7 == r10))
			(vp-cpy-ir-i rsp local_last_y_pos r10)
			(vpif '(r8 == r10))
				(vp-cpy-ir-i rsp local_last_buttons r10)
				(vpif '(r9 == r10))
					;same as last time
					(vp-jmp 'next_frame)
				(endif)
			(endif)
		(endif)
		(vp-cpy-ri-i r7 rsp local_last_x_pos)
		(vp-cpy-ri-i r8 rsp local_last_y_pos)
		(vp-cpy-ri r9 rsp local_last_buttons)

		;dispatch to task and target view
		(vp-cpy-ir rsp local_last_view r5)
		(vpif '(r5 != 0))
		(vp-label 'send_mouse)
			;do we need to wait till button goes up ?
			(vpif '(r5 != -1))
				;lookup view owner
				(f-call 'view 'find_owner '(r5) '(_ r1))
				(vpif '(r1 != 0))
					;save owner mailbox
					(f-call 'kernel 'id '() '(r14))
					(vp-lea-i r1 tk_node_mailbox r13)

					;allocate mail message
					(f-call 'sys_mail 'alloc '() '(r0))

					;fill in data
					(vp-cpy-cr ev_msg_size r1)
					(vp-cpy-ri r1 r0 msg_length)
					(vp-cpy-ri r13 r0 (add msg_dest id_mbox))
					(vp-cpy-ri r14 r0 (add msg_dest id_cpu))
					(vp-cpy-ir-i rsp local_x_pos r7)
					(vp-cpy-ir-i rsp local_y_pos r8)
					(vp-cpy-cr ev_type_mouse r1)
					(vp-cpy-ri r1 r0 ev_msg_type)
					(vp-cpy-ri r5 r0 ev_msg_view)
					(vp-cpy-ri-i r7 r0 ev_msg_x)
					(vp-cpy-ri-i r8 r0 ev_msg_y)
					(vp-cpy-ri r9 r0 ev_msg_buttons)
					(vp-cpy-ir-i r5 view_ctx_x r13)
					(vp-cpy-ir-i r5 view_ctx_y r14)
					(vp-sub-rr r13 r7)
					(vp-sub-rr r14 r8)
					(vp-cpy-ri-i r7 r0 ev_msg_rx)
					(vp-cpy-ri-i r8 r0 ev_msg_ry)

					;send mail to owner
					(f-call 'sys_mail 'send '(r0))
				(endif)
			(endif)

			;if button went up then clear locked view
			(vpif '(r9 == 0))
				(vp-cpy-ri r9 rsp local_last_view)
			(endif)
		(else)
			;button down ?
			(vpif '(r9 != 0))
				;find view
				(f-bind 'gui_gui 'statics r4)
				(f-call 'view 'hit_tree '((r4 gui_statics_screen) (rsp local_x_pos i) (rsp local_y_pos i)) '(_ r1 r7 r8))
				(vp-cpy-ir-i r4 gui_statics_screen r5)
				(vpif '(r1 == r5))
					(vp-xor-rr r1 r1)
				(endif)
				(vpif '(r1 == 0))
					(vp-cpy-cr -1 r1)
				(endif)
				(vp-cpy-ri r1 rsp local_last_view)
				(vp-cpy-rr r1 r5)
				(vp-jmp 'send_mouse)
			(else)
				;hover
				;find view for keys
				(f-bind 'gui_gui 'statics r4)
				(f-call 'view 'hit_tree '((r4 gui_statics_screen) (rsp local_x_pos i) (rsp local_y_pos i)) '(_ r1 _ _))
				(vp-cpy-ri r1 rsp local_key_view)
			(endif)
		(endif)
	(loop-end)

	;free old key map
	(vp-cpy-ir rsp local_old_keymap r0)
	(vpif '(r0 != 0))
		(f-call 'sys_mem 'free '(r0))
	(endif)

	;deinit
	(f-call 'sys_task 'callback '(($ deinit_callback) rsp))

	(vp-free local_size)
	(vp-ret)

(vp-label 'update_callback)
	;inputs
	;r0 = user data

	(def-struct 'update)
		(ptr 'old_stack)
		(ptr 'user)
	(def-struct-end)

	;align stack
	(vp-cpy-rr rsp r1)
	(vp-alloc update_size)
	(vp-and-cr -16 rsp)
	(vp-cpy-ri r1 rsp update_old_stack)
	(vp-cpy-ri r0 rsp update_user)

	;create screen window ?
	(f-bind 'gui_gui 'statics r0)
	(vp-cpy-ir r0 gui_statics_window r1)
	(vpif '(r1 == 0))
		;init sdl2
		(sdl-call 'sdl 'sdl_set_main_ready)
		(sdl-call 'sdl 'sdl_init '(SDL_INIT_VIDEO))
		(sdl-call 'sdl 'ttf_init)

		;create window
		(sdl-call 'sdl 'sdl_create_window '(($ title) SDL_WINDOWPOS_UNDEFINED SDL_WINDOWPOS_UNDEFINED SCREEN_WIDTH SCREEN_HEIGHT SDL_WINDOW_OPENGL))
		(f-bind 'gui_gui 'statics r1)
		(vp-cpy-ri r0 r1 gui_statics_window)

		;create renderer
		(sdl-call 'sdl 'sdl_create_renderer '(r0 -1 (bit-or SDL_RENDERER_ACCELERATED SDL_RENDERER_PRESENTVSYNC)))
		(f-bind 'gui_gui 'statics r1)
		(vp-cpy-ri r0 r1 gui_statics_renderer)

		;set blend mode
		(sdl-call 'sdl 'sdl_set_render_draw_blend_mode '(r0 SDL_BLENDMODE_BLEND))
	(endif)

	;update screen
	(f-bind 'gui_gui 'statics r0)
	(vp-cpy-ir r0 gui_statics_screen r0)
	(vpif '(r0 != 0))
		;pump sdl events
		(sdl-call 'sdl 'sdl_pump_events)

		;get mouse state
		(vp-cpy-ir rsp update_user r0)
		(vp-lea-i r0 local_x_pos r1)
		(vp-lea-i r0 local_y_pos r2)
		(sdl-call 'sdl 'sdl_get_mouse_state '(r1 r2))
		(vp-cpy-ir rsp update_user r1)
		(vp-cpy-ri r0 r1 local_buttons)

		;get keyboard state
		(vp-add-cr local_keymap_size r1)
		(sdl-call 'sdl 'sdl_get_keyboard_state '(r1))
		(vp-cpy-ir rsp update_user r1)
		(vp-cpy-ri r0 r1 local_keymap)

		;update the screen
		(f-bind 'gui_gui 'statics r0)
		(f-call 'gui_gui 'update '((r0 gui_statics_screen)))

		;refresh the window
		(f-bind 'gui_gui 'statics r0)
		(sdl-call 'sdl 'sdl_render_present '((r0 gui_statics_renderer)))
	(endif)

	(vp-cpy-ir rsp update_old_stack rsp)
	(vp-ret)

(vp-label 'deinit_callback)
	;inputs
	;r0 = user data

	;free any screen
	(f-bind 'gui_gui 'statics r4)
	(vp-cpy-ir r4 gui_statics_screen r0)
	(vpif '(r0 != 0))
		(vp-xor-rr r1 r1)
		(vp-cpy-ri r1 r4 gui_statics_screen)
		(f-call 'view 'deref '(r0))
	(endif)

	;free old region
	(f-bind 'gui_gui 'statics r4)
	(f-call 'gui_region 'free '((& r4 gui_statics_rect_heap) (& r4 gui_statics_old_region)) '(r0))

	;deinit region heap
	(f-call 'sys_heap 'deinit '(r0))

	;destroy any window
	(vp-cpy-ir r4 gui_statics_window r13)
	(vpif '(r13 != 0))
		;align stack on 16 byte boundary
		(vp-cpy-rr rsp r14)
		(vp-alloc ptr_size)
		(vp-and-cr -16 rsp)
		(vp-cpy-ri r14 rsp 0)

		(sdl-call 'sdl 'sdl_destroy_window '(r13))
		(sdl-call 'sdl 'ttf_quit)
		(sdl-call 'sdl 'sdl_quit)

		(vp-cpy-ir rsp 0 rsp)
	(endif)
	(vp-ret)

(vp-label 'title)
	(vp-string "ChrysaLisp GUI Window") (vp-byte 0)

(vp-label 'scan_codes)
	(vp-byte 4) (vp-string "aA")
	(vp-byte 5) (vp-string "bB")
	(vp-byte 6) (vp-string "cC")
	(vp-byte 7) (vp-string "dD")
	(vp-byte 8) (vp-string "eE")
	(vp-byte 9) (vp-string "fF")
	(vp-byte 10) (vp-string "gG")
	(vp-byte 11) (vp-string "hH")
	(vp-byte 12) (vp-string "iI")
	(vp-byte 13) (vp-string "jJ")
	(vp-byte 14) (vp-string "kK")
	(vp-byte 15) (vp-string "lL")
	(vp-byte 16) (vp-string "mM")
	(vp-byte 17) (vp-string "nN")
	(vp-byte 18) (vp-string "oO")
	(vp-byte 19) (vp-string "pP")
	(vp-byte 20) (vp-string "qQ")
	(vp-byte 21) (vp-string "rR")
	(vp-byte 22) (vp-string "sS")
	(vp-byte 23) (vp-string "tT")
	(vp-byte 24) (vp-string "uU")
	(vp-byte 25) (vp-string "vV")
	(vp-byte 26) (vp-string "wW")
	(vp-byte 27) (vp-string "xX")
	(vp-byte 28) (vp-string "yY")
	(vp-byte 29) (vp-string "zZ")
	(vp-byte 30) (vp-string "1!")
	(vp-byte 31) (vp-string "2@")
	(vp-byte 32) (vp-string "3#")
	(vp-byte 33) (vp-string "4$")
	(vp-byte 34) (vp-string "5%")
	(vp-byte 35) (vp-string "6^")
	(vp-byte 36) (vp-string "7&")
	(vp-byte 37) (vp-string "8*")
	(vp-byte 38) (vp-string "9(")
	(vp-byte 39) (vp-string "0)")
	(vp-byte 45) (vp-string "-_")
	(vp-byte 46) (vp-string "=+")
	(vp-byte 47) (vp-string "[{")
	(vp-byte 48) (vp-string "]}")
	(vp-byte 49) (vp-string "\|")
	(vp-byte 50) (vp-string "  ")
	(vp-byte 51) (vp-string ";:")
	(vp-byte 52 39 34)	;'"
	(vp-byte 53) (vp-string "  ")
	(vp-byte 54) (vp-string ",<")
	(vp-byte 55) (vp-string ".>")
	(vp-byte 56) (vp-string "/?")
	(vp-byte 0x64) (vp-string "`~")
	(vp-byte 40 char_cr char_cr)		;return
	(vp-byte 41 char_esc char_esc)		;escape
	(vp-byte 42 char_backspace char_backspace)	;backspace
	(vp-byte 43 char_tab char_tab)		;tab
	(vp-byte 44 char_space char_space)		;space
	(vp-byte 0xe1 0 0)		;left shift
	(vp-byte 0xe5 0 0)		;right shift
	(vp-byte 0x50 0 0)		;left
	(vp-byte 0x4f 0 0)		;right
	(vp-byte 0x52 129 129)	;up
	(vp-byte 0x51 130 130)	;down
(vp-label 'scan_codes_end)

(def-func-end)

(def-func 'gui/gui_add)
	;inputs
	;r0 = view object
	;trashes
	;all but r0

	(vp-push r0)
	(f-bind 'gui_gui 'statics r2)
	(f-call 'view 'add_front '((r2 gui_statics_screen) r0))
	(f-call 'view 'dirty_all '((rsp 0)))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'gui/gui_update)
	;inputs
	;r0 = root view object
	;trashes
	;all

	(def-struct 'local)
		(ptr 'root)
		(ptr 'ctx_flist)
		(ptr 'ctx_next)
		(struct 'ctx 'gui_ctx)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(vp-cpy-ri r0 rsp local_root)

	;iterate through views back to front
	;setting abs cords
	(vp-xor-rr r7 r7)
	(vp-xor-rr r8 r8)
	(f-call 'view 'backward_tree '(r0 r0 ($ abs_down_callback) ($ abs_up_callback)))

	;iterate through views back to front
	;create visible region at root
	(f-call 'view 'backward_tree '(r0 r0 ($ null_func_down_callback) ($ visible_up_callback)))

(when dual_buffers
	;copy visable region to new region
	(vp-xor-rr r1 r1)
	(vp-push r0 r1)
	(vp-lea-i r0 view_dirty_region r1)
	(assign '((r0 view_w i) (r0 view_h i)) '(r9 r10))
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)
	(f-call 'gui_region 'copy_rect '(r0 r1 rsp 0 0 r9 r10))

	;paste old visible region into root
	(vp-cpy-ir rsp 8 r0)
	(vp-lea-i r0 view_dirty_region r2)
	(f-bind 'gui_gui 'statics r1)
	(vp-lea-i r1 gui_statics_rect_heap r0)
	(vp-add-cr gui_statics_old_region r1)
	(f-call 'gui_region 'paste_region '(r0 r1 r2 0 0) '(r0))

	;free old region and splice over new region
	(f-bind 'gui_gui 'statics r4)
	(f-call 'gui_region 'free '(r0 (& r4 gui_statics_old_region)))
	(vp-pop r0 r1)
	(vp-cpy-ri r1 r4 gui_statics_old_region)
)

	;iterate through views front to back
	;distribute visible region
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 rsp local_ctx_flist)
	(f-call 'view 'forward_tree '(r0 rsp ($ distribute_down_callback) ($ distribute_up_callback)))

	;draw all on draw list, and free dirty regions
	(f-bind 'gui_gui 'statics r1)
	(vp-cpy-ir r1 gui_statics_renderer r1)
	(vp-cpy-ri r1 rsp (add local_ctx gui_ctx_sdl_ctx))
	(loop-flist rsp local_ctx_flist r0 r0)
		(vp-cpy-ri r0 rsp local_ctx_next)
		(vp-sub-cr view_ctx_node r0)
		(assign '((r0 view_ctx_x i) (r0 view_ctx_y i)) '(r7 r8))
		(vp-lea-i rsp local_ctx r1)
		(vp-lea-i r0 view_dirty_region r2)
		(assign '(r7 r8) '((r1 gui_ctx_x i) (r1 gui_ctx_y i)))
		(vp-cpy-ri r2 r1 gui_ctx_dirty_region)
		(v-call 'view 'draw '(r0 r1))
		(vp-cpy-ir rsp local_ctx_next r1)
		(vp-sub-cr (sub view_ctx_node view_dirty_region) r1)
		(f-bind 'gui_gui 'statics r0)
		(vp-add-cr gui_statics_rect_heap r0)
		(f-call 'gui_region 'free '(r0 r1))
		(vp-cpy-ir rsp local_ctx_next r0)
	(loop-end)

	(vp-free local_size)
	(vp-ret)

(vp-label 'null_func_down_callback)
	(vp-cpy-rr r0 r1)
(vp-label 'null_func_up_callback)
	(vp-ret)

(vp-label 'abs_down_callback)
	(assign '((r0 view_x i) (r0 view_y i)) '(r9 r10))
	(vp-add-rr r9 r7)
	(vp-add-rr r10 r8)
	(assign '(r7 r8) '((r0 view_ctx_x i) (r0 view_ctx_y i)))
	(vp-ret)

(vp-label 'abs_up_callback)
	(assign '((r0 view_x i) (r0 view_y i)) '(r9 r10))
	(vp-sub-rr r9 r7)
	(vp-sub-rr r10 r8)
	(vp-ret)

(vp-label 'visible_up_callback)
	(def-struct 'vis)
		(ptr 'this)
		(ptr 'root)
		(ptr 'next)
		(ptr 'region)
	(def-struct-end)

	;save inputs
	(vp-alloc vis_size)
	(vp-cpy-ri r0 rsp vis_this)
	(vp-cpy-ri r1 rsp vis_root)

	;region heap
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)

	;remove opaque region from ancestors if not root
	(vp-cpy-ir rsp vis_this r1)
	(vp-cpy-ir rsp vis_root r2)
	(vpif '(r1 != r2))
		;remove my opaque region from ancestors
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 rsp vis_region)

		;first copy any opaque region
		(assign '((r1 view_x i) (r1 view_y i)) '(r7 r8))
		(vp-cpy-ir r1 hash_map_parent r2)
		(assign '((r2 view_w i) (r2 view_h i)) '(r9 r10))
		(vp-mul-cr -1 r7)
		(vp-mul-cr -1 r8)
		(vp-add-rr r7 r9)
		(vp-add-rr r8 r10)
		(vp-add-cr view_opaque_region r1)
		(vp-lea-i rsp vis_region r2)
		(f-call 'gui_region 'copy_rect '(r0 r1 r2 r7 r8 r9 r10) '(r0))

		;remove from ancestors
		(vp-cpy-ir rsp vis_this r1)
		(loop-start)
			(vp-cpy-ir r1 hash_map_parent r2)
			(vp-cpy-ri r2 rsp vis_next)

			;exit if clipped away
			(vp-cpy-ir rsp vis_region r3)
			(breakif '(r3 == 0))

			;translate temp opaque region
			(assign '((r1 view_x i) (r1 view_y i)) '(r7 r8))
			(vp-lea-i rsp vis_region r1)
			(f-call 'gui_region 'translate '(r1 r7 r8))

			;clip temp opaque region
			(vp-cpy-ir rsp vis_next r2)
			(vp-lea-i rsp vis_region r1)
			(f-call 'gui_region 'clip_rect '(r0 r1 0 0 (r2 view_w i) (r2 view_h i)) '(r0))

			;remove temp opaque region
			(vp-lea-i rsp vis_region r1)
			(vp-cpy-ir rsp vis_next r2)
			(vp-add-cr view_dirty_region r2)
			(f-call 'gui_region 'remove_region '(r0 r1 r2 0 0) '(r0))

			(vp-cpy-ir rsp vis_next r1)
			(vp-cpy-ir rsp vis_root r2)
		(loop-until '(r1 == r2))

		;free any temp region
		(vp-lea-i rsp vis_region r1)
		(f-call 'gui_region 'free '(r0 r1) '(r0))
	(endif)

	;clip local dirty region with parent bounds if not root
	(vp-cpy-ir rsp vis_this r1)
	(vp-cpy-ir r1 hash_map_parent r2)
	(vp-cpy-ir rsp vis_root r3)
	(vpif '(r1 == r3))
		(vp-cpy-rr r1 r2)
	(endif)
	(assign '((r1 view_x i) (r1 view_y i) (r2 view_w i) (r2 view_h i)) '(r7 r8 r9 r10))
	(vp-mul-cr -1 r7)
	(vp-mul-cr -1 r8)
	(vp-add-rr r7 r9)
	(vp-add-rr r8 r10)
	(vp-add-cr view_dirty_region r1)
	(f-call 'gui_region 'clip_rect '(r0 r1 r7 r8 r9 r10) '(r0))

	;paste local dirty region onto parent if not root
	(vp-cpy-ir rsp vis_this r1)
	(vp-cpy-ir rsp vis_root r3)
	(vpif '(r1 != r3))
		(assign '((r1 view_x i) (r1 view_y i)) '(r7 r8))
		(vp-cpy-ir r1 hash_map_parent r2)
		(vp-add-cr view_dirty_region r1)
		(vp-add-cr view_dirty_region r2)
		(f-call 'gui_region 'paste_region '(r0 r1 r2 r7 r8) '(r0))

		;free local dirty region
		(vp-cpy-ir rsp vis_this r1)
		(vp-add-cr view_dirty_region r1)
		(f-call 'gui_region 'free '(r0 r1))
	(endif)

	(vp-cpy-ir rsp vis_this r0)
	(vp-free vis_size)
	(vp-ret)

(vp-label 'distribute_down_callback)
	(def-struct 'dist)
		(ptr 'this)
		(ptr 'data)
		(ptr 'next)
	(def-struct-end)

	;save inputs
	(vp-alloc dist_size)
	(vp-cpy-ri r0 rsp dist_this)
	(vp-cpy-ri r1 rsp dist_data)

	;region heap
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)

	;copy view from parent if not root
	(vp-cpy-ir rsp dist_this r2)
	(vp-cpy-ir r1 local_root r3)
	(vpif '(r2 != r3))
		;copy my area from parent
		(vp-cpy-ir r2 hash_map_parent r1)
		(assign '((r2 view_ctx_x i) (r2 view_ctx_y i) (r2 view_w i) (r2 view_h i)) '(r7 r8 r9 r10))
		(vp-add-rr r7 r9)
		(vp-add-rr r8 r10)
		(vp-add-cr view_dirty_region r1)
		(vp-add-cr view_dirty_region r2)
		(f-call 'gui_region 'copy_rect '(r0 r1 r2 r7 r8 r9 r10) '(r0))

		;did we find any
		(vp-cpy-ir rsp dist_this r1)
		(vp-cpy-ir r1 view_dirty_region r1)
		(vpif '(r1 != 0))
			;remove my opaque region from ancestors
			(vp-cpy-ir rsp dist_this r2)
			(loop-start)
				(vp-cpy-ir r2 hash_map_parent r2)
				(vp-cpy-ri r2 rsp dist_next)

				(vp-cpy-ir rsp dist_this r1)
				(assign '((r1 view_ctx_x i) (r1 view_ctx_y i)) '(r7 r8))
				(vp-add-cr view_opaque_region r1)
				(vp-add-cr view_dirty_region r2)
				(f-call 'gui_region 'remove_region '(r0 r1 r2 r7 r8) '(r0))

				(vp-cpy-ir rsp dist_next r2)
				(vp-cpy-ir rsp dist_data r1)
				(vp-cpy-ir r1 local_root r3)
			(loop-until '(r2 == r3))
		(endif)
	(endif)

	;r1 will be 0 or not depending on haveing any dirty region
	(vp-cpy-ir rsp dist_this r0)
	(vp-free dist_size)
	(vp-ret)

(vp-label 'distribute_up_callback)
	;add myself to draw list if not empty
	(vp-cpy-ir r0 view_dirty_region r2)
	(vpif '(r2 != 0))
		(vp-lea-i r0 view_ctx_node r2)
		(vp-add-cr local_ctx_flist r1)
		(ln-add-fnode r1 0 r2 r3)
	(endif)
	(vp-ret)

(def-func-end)
