(import 'inc/func.inc)
(import 'inc/gui.inc)
(import 'inc/task.inc)
(import 'inc/heap.inc)
(import 'inc/sdl2.inc)
(import 'class/label/label.inc)

(defcvar 'dual_buffers t)

(def-func 'gui/gui_statics)
	(times gui_statics_size (vp-byte 0))
(def-func-end)

(def-func 'gui/gui_init)
	;inputs
	;r0 = sdl function table

	;init sdl function table
	(f-bind 'gui_gui 'statics r3)
	(vp-cpy-ri r0 r3 gui_statics_sdl_funcs)

	;init old region
	(vp-xor-rr r0 r0)
	(vp-cpy-ri r0 r3 gui_statics_old_region)

	;init region heap
	(f-call 'sys_heap 'init '((& r3 gui_statics_rect_heap) gui_rect_size (mul gui_rect_size 32)))

	;init signal heap
	(f-jmp 'sys_heap 'init '((& r3 gui_statics_sigslot_heap) gui_sigslot_size (mul gui_sigslot_size 32)))

(def-func-end)

(def-func 'gui/gui)
	(def-struct 'local)
		(int 'local_x_pos)
		(int 'local_y_pos)
		(long 'local_buttons)
		(int 'local_last_x_pos)
		(int 'local_last_y_pos)
		(long 'local_last_buttons)
		(ptr 'local_last_view)
		(ptr 'local_key_view)
		(ptr 'local_keymap)
		(uint 'local_keymap_size)
		(ptr 'local_old_keymap)
	(def-struct-end)

	;init vars
	(vp-sub-cr local_size r4)
	(vp-xor-rr r0 r0)
	(vp-cpy-ri-i r0 r4 local_last_x_pos)
	(vp-cpy-ri-i r0 r4 local_last_y_pos)
	(vp-cpy-ri r0 r4 local_last_buttons)
	(vp-cpy-ri r0 r4 local_last_view)
	(vp-cpy-ri r0 r4 local_key_view)
	(vp-cpy-ri r0 r4 local_old_keymap)
	(f-bind 'gui_gui 'statics r1)
	(vp-cpy-ri r0 r1 gui_statics_screen)

	;kernel callback for first update
	;this will init SDL etc
	(f-call 'sys_task 'callback '(($ update_callback) r4))

	;allocate background view for screen
	(f-call 'label 'create '() '(r0))
	(f-bind 'gui_gui 'statics r1)
	(vp-cpy-ri r0 r1 gui_statics_screen)

	;size and color and opaque
	(f-call 'label 'change '(r0 0 0 SCREEN_WIDTH SCREEN_HEIGHT))
	(f-call 'label 'set_color '(r0 0xff000000))
	(f-call 'label 'opaque '(r0))
	(f-call 'label 'dirty_all '(r0))

	;sleep just a moment to let all routeing finish
	;(f-call 'sys_task 'sleep '(1000000))

	;for now fire up the test apps
	;this might be an gui auto run list eventually
	(f-call 'sys_task 'start '((@ apps/launcher/app)) '(r0 r1))

	;gui event loop
	(loop-start)
	(vp-label 'next_frame)
		;kernel callback for update
		(f-call 'sys_task 'callback '(($ update_callback) r4))

		;frame rate of gui updates
		(f-call 'sys_task 'sleep '((div 1000000 30)))

		;get keyboard info, see if any changes
		(vp-cpy-ir r4 local_old_keymap r1)
		(vpif '(r1 == 0))
			;create old keymap
			(f-call 'sys_mem 'alloc '((r4 local_keymap_size)) '(r0 _))
			(vp-cpy-ri r0 r4 local_old_keymap)
			(f-call 'sys_mem 'clear '(r0 (r4 local_keymap_size)))
			(vp-cpy-ir r4 local_old_keymap r1)
		(endif)
		(vp-cpy-ir r4 local_keymap r0)
		(vp-cpy-ir-ui r4 local_keymap_size r2)

		;dispatch any key events
		(vp-cpy-ir-ub r0 0xe1 r8)
		(vp-cpy-ir-ub r0 0xe5 r10)
		(vp-or-rr r8 r10)
		(loop-while '(r2 != 0))
			(vp-sub-cr 1 r2)
			(vp-cpy-dr-ub r0 r2 r8)
			(vp-cpy-dr-ub r1 r2 r9)
			(vpif '(r8 != r9))
				;set scan code, - for up
				(vp-cpy-rd-b r8 r1 r2)
				(vp-cpy-rr r2 r11)
				(vpif '(r8 == 0))
					(vp-mul-cr -1 r11)
				(endif)

				;cook keycode
				(vp-lea-p 'scan_codes r5)
				(vp-lea-p 'scan_codes_end r6)
				(vp-xor-rr r12 r12)
				(loop-start)
					(vp-cpy-ir-ub r5 0 r8)
					(vpif '(r8 == r2))
						(vp-lea-i r10 1 r12)
						(vp-cpy-dr-ub r5 r12 r12)
					(endif)
					(vp-add-cr 3 r5)
				(loop-until '(r5 >= r6))

				;dispatch to task and target view
				(vp-cpy-ir r4 local_key_view r6)
				(vpif '(r6 != 0))
					(vp-push r0 r1 r2)
					;lookup view owner
					(f-call 'view 'find_owner '(r6) '(_ r1))
					(vpif '(r1 != 0))
						;save owner mailbox
						(f-call 'sys_cpu 'id '() '(r15))
						(vp-lea-i r1 tk_node_mailbox r14)

						;allocate mail message
						(f-call 'sys_mail 'alloc '() '(r0))
						(assert '(r0 != 0))

						;fill in data
						(vp-cpy-cr ev_msg_size r1)
						(vp-cpy-ri r1 r0 msg_length)
						(vp-cpy-ri r14 r0 (add msg_dest id_mbox))
						(vp-cpy-ri r15 r0 (add msg_dest id_cpu))
						(vp-cpy-cr ev_type_key r1)
						(vp-cpy-ri r1 r0 ev_msg_type)
						(vp-cpy-ri r6 r0 ev_msg_view)
						(vp-cpy-ri r11 r0 ev_msg_keycode)
						(vp-cpy-ri r12 r0 ev_msg_key)

						;send mail to owner
						(f-call 'sys_mail 'send '(r0))
					(endif)
					(vp-pop r0 r1 r2)
				(endif)
			(endif)
		(loop-end)

		;get mouse info, see if any changes
		(vp-cpy-ir-i r4 local_x_pos r8)
		(vp-cpy-ir-i r4 local_y_pos r9)
		(vp-cpy-ir r4 local_buttons r10)
		(vp-cpy-ir-i r4 local_last_x_pos r11)
		(vpif '(r8 == r11))
			(vp-cpy-ir-i r4 local_last_y_pos r11)
			(vpif '(r9 == r11))
				(vp-cpy-ir-i r4 local_last_buttons r11)
				(vpif '(r10 == r11))
					;same as last time
					(vp-jmp 'next_frame)
				(endif)
			(endif)
		(endif)
		(vp-cpy-ri-i r8 r4 local_last_x_pos)
		(vp-cpy-ri-i r9 r4 local_last_y_pos)
		(vp-cpy-ri r10 r4 local_last_buttons)

		;dispatch to task and target view
		(vp-cpy-ir r4 local_last_view r6)
		(vpif '(r6 != 0))
		(vp-label 'send_mouse)
			;do we need to wait till button goes up ?
			(vpif '(r6 != -1))
				;lookup view owner
				(f-call 'view 'find_owner '(r6) '(_ r1))
				(vpif '(r1 != 0))
					;save owner mailbox
					(f-call 'sys_cpu 'id '() '(r15))
					(vp-lea-i r1 tk_node_mailbox r14)

					;allocate mail message
					(f-call 'sys_mail 'alloc '() '(r0))
					(assert '(r0 != 0))

					;fill in data
					(vp-cpy-cr ev_msg_size r1)
					(vp-cpy-ri r1 r0 msg_length)
					(vp-cpy-ri r14 r0 (add msg_dest id_mbox))
					(vp-cpy-ri r15 r0 (add msg_dest id_cpu))
					(vp-cpy-ir-i r4 local_x_pos r8)
					(vp-cpy-ir-i r4 local_y_pos r9)
					(vp-cpy-cr ev_type_mouse r1)
					(vp-cpy-ri r1 r0 ev_msg_type)
					(vp-cpy-ri r6 r0 ev_msg_view)
					(vp-cpy-ri-i r8 r0 ev_msg_x)
					(vp-cpy-ri-i r9 r0 ev_msg_y)
					(vp-cpy-ri r10 r0 ev_msg_buttons)
					(vp-cpy-ir-i r6 view_ctx_x r14)
					(vp-cpy-ir-i r6 view_ctx_y r15)
					(vp-sub-rr r14 r8)
					(vp-sub-rr r15 r9)
					(vp-cpy-ri-i r8 r0 ev_msg_rx)
					(vp-cpy-ri-i r9 r0 ev_msg_ry)

					;send mail to owner
					(f-call 'sys_mail 'send '(r0))
				(endif)
			(endif)

			;if button went up then clear locked view
			(vpif '(r10 == 0))
				(vp-cpy-ri r10 r4 local_last_view)
			(endif)
		(else)
			;button down ?
			(vpif '(r10 != 0))
				;find view
				(f-bind 'gui_gui 'statics r5)
				(f-call 'view 'hit_tree '((r5 gui_statics_screen) (r4 local_x_pos i) (r4 local_y_pos i)) '(_ r1 r8 r9))
				(vp-cpy-ir-i r5 gui_statics_screen r6)
				(vpif '(r1 == r6))
					(vp-xor-rr r1 r1)
				(endif)
				(vpif '(r1 == 0))
					(vp-cpy-cr -1 r1)
				(endif)
				(vp-cpy-ri r1 r4 local_last_view)
				(vp-cpy-rr r1 r6)
				(vp-jmp 'send_mouse)
			(else)
				;hover
				;find view for keys
				(f-bind 'gui_gui 'statics r5)
				(f-call 'view 'hit_tree '((r5 gui_statics_screen) (r4 local_x_pos i) (r4 local_y_pos i)) '(_ r1 _ _))
				(vp-cpy-ri r1 r4 local_key_view)
			(endif)
		(endif)
	(loop-end)

	;free old key map
	(vp-cpy-ir r4 local_old_keymap r0)
	(vpif '(r0 != 0))
		(f-call 'sys_mem 'free '(r0))
	(endif)

	;deinit
	(f-call 'sys_task 'callback '(($ deinit_callback) r4))

	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'update_callback)
	;inputs
	;r0 = user data

	(def-struct 'klocal)
		(long 'klocal_old_stack)
		(long 'klocal_user)
	(def-struct-end)

	;align stack
	(vp-cpy-rr r4 r1)
	(vp-sub-cr klocal_size r4)
	(vp-and-cr -16 r4)
	(vp-cpy-ri r1 r4 klocal_old_stack)
	(vp-cpy-ri r0 r4 klocal_user)

	;create screen window ?
	(f-bind 'gui_gui 'statics r0)
	(vp-cpy-ir r0 gui_statics_window r1)
	(vpif '(r1 == 0))
		;init sdl2
		(sdl-set-main-ready)
		(sdl-init SDL_INIT_VIDEO)
		(ttf-init)

		;create window
		(sdl-create-window '($ title) SDL_WINDOWPOS_UNDEFINED SDL_WINDOWPOS_UNDEFINED SCREEN_WIDTH SCREEN_HEIGHT SDL_WINDOW_OPENGL)
		(f-bind 'gui_gui 'statics r1)
		(vp-cpy-ri r0 r1 gui_statics_window)

		;create renderer
		(sdl-create-renderer r0 -1 (bit-or SDL_RENDERER_ACCELERATED SDL_RENDERER_PRESENTVSYNC))
		(f-bind 'gui_gui 'statics r1)
		(vp-cpy-ri r0 r1 gui_statics_renderer)

		;set blend mode
		(sdl-set-render-draw-blend-mode r0 SDL_BLENDMODE_BLEND)
	(endif)

	;update screen
	(f-bind 'gui_gui 'statics r0)
	(vp-cpy-ir r0 gui_statics_screen r0)
	(vpif '(r0 != 0))
		;pump sdl events
		(sdl-pump-events)

		;get mouse state
		(vp-cpy-ir r4 klocal_user r0)
		(vp-lea-i r0 local_x_pos r1)
		(vp-lea-i r0 local_y_pos r2)
		(sdl-get-mouse-state r1 r2)
		(vp-cpy-ir r4 klocal_user r1)
		(vp-cpy-ri r0 r1 local_buttons)

		;get keyboard state
		(vp-add-cr local_keymap_size r1)
		(sdl-get-keyboard-state r1)
		(vp-cpy-ir r4 klocal_user r1)
		(vp-cpy-ri r0 r1 local_keymap)

		;update the screen
		(f-bind 'gui_gui 'statics r0)
		(f-call 'gui_gui 'update '((r0 gui_statics_screen)))

		;refresh the window
		(f-bind 'gui_gui 'statics r0)
		(sdl-render-present '(r0 gui_statics_renderer))
	(endif)

	(vp-cpy-ir r4 klocal_old_stack r4)
	(vp-ret)

(vp-label 'deinit_callback)
	;inputs
	;r0 = user data

	;free any screen
	(f-bind 'gui_gui 'statics r5)
	(vp-cpy-ir r5 gui_statics_screen r0)
	(vpif '(r0 != 0))
		(vp-xor-rr r1 r1)
		(vp-cpy-ri r1 r5 gui_statics_screen)
		(f-call 'view 'deref '(r0))
	(endif)

	;free old region
	(f-bind 'gui_gui 'statics r5)
	(f-call 'gui_region 'free '((& r5 gui_statics_rect_heap) (& r5 gui_statics_old_region)))

	;deinit region heap
	(f-call 'sys_heap 'deinit '(r0))

	;deinit signal heap
	(f-call 'sys_heap 'deinit '((& r5 gui_statics_sigslot_heap)))

	;destroy any window
	(vp-cpy-ir r5 gui_statics_window r14)
	(vpif '(r14 != 0))
		;align stack on 16 byte boundary
		(vp-cpy-rr r4 r15)
		(vp-and-cr -16 r4)

		(sdl-destroy-window r14)
		(ttf-quit)
		(sdl-quit)

		(vp-cpy-rr r15 r4)
	(endif)
	(vp-ret)

(vp-label 'title)
	(vp-string "Asm Kernel GUI Window") (vp-byte 0)

(vp-label 'scan_codes)
	(vp-byte 4) (vp-string "aA")
	(vp-byte 5) (vp-string "bB")
	(vp-byte 6) (vp-string "cC")
	(vp-byte 7) (vp-string "dD")
	(vp-byte 8) (vp-string "eE")
	(vp-byte 9) (vp-string "fF")
	(vp-byte 10) (vp-string "gG")
	(vp-byte 11) (vp-string "hH")
	(vp-byte 12) (vp-string "iI")
	(vp-byte 13) (vp-string "jJ")
	(vp-byte 14) (vp-string "kK")
	(vp-byte 15) (vp-string "lL")
	(vp-byte 16) (vp-string "mM")
	(vp-byte 17) (vp-string "nN")
	(vp-byte 18) (vp-string "oO")
	(vp-byte 19) (vp-string "pP")
	(vp-byte 20) (vp-string "qQ")
	(vp-byte 21) (vp-string "rR")
	(vp-byte 22) (vp-string "sS")
	(vp-byte 23) (vp-string "tT")
	(vp-byte 24) (vp-string "uU")
	(vp-byte 25) (vp-string "vV")
	(vp-byte 26) (vp-string "wW")
	(vp-byte 27) (vp-string "xX")
	(vp-byte 28) (vp-string "yY")
	(vp-byte 29) (vp-string "zZ")
	(vp-byte 30) (vp-string "1!")
	(vp-byte 31) (vp-string "2@")
	(vp-byte 32) (vp-string "3#")
	(vp-byte 33) (vp-string "4$")
	(vp-byte 34) (vp-string "5%")
	(vp-byte 35) (vp-string "6^")
	(vp-byte 36) (vp-string "7&")
	(vp-byte 37) (vp-string "8*")
	(vp-byte 38) (vp-string "9(")
	(vp-byte 39) (vp-string "0)")
	(vp-byte 45) (vp-string "-_")
	(vp-byte 46) (vp-string "=+")
	(vp-byte 47) (vp-string "[{")
	(vp-byte 48) (vp-string "]}")
	(vp-byte 49) (vp-string "\|")
	(vp-byte 50) (vp-string "  ")
	(vp-byte 51) (vp-string ";:")
	(vp-byte 52 39 34)	;'"
	(vp-byte 53) (vp-string "  ")
	(vp-byte 54) (vp-string ",<")
	(vp-byte 55) (vp-string ".>")
	(vp-byte 56) (vp-string "/?")
	(vp-byte 0x64) (vp-string "`~")
	(vp-byte 40 13 13)		;return
	(vp-byte 41 27 27)		;escape
	(vp-byte 42 128 128)	;backspace
	(vp-byte 43 9 9)		;tab
	(vp-byte 44 32 32)		;space
	(vp-byte 0xe1 0 0)		;left shift
	(vp-byte 0xe5 0 0)		;right shift
	(vp-byte 0x50 0 0)		;left
	(vp-byte 0x4f 0 0)		;right
	(vp-byte 0x52 129 129)	;up
	(vp-byte 0x51 130 130)	;down
(vp-label 'scan_codes_end)

(def-func-end)

(def-func 'gui/gui_add)
	;inputs
	;r0 = view object
	;trashes
	;all but r0, r4

	(vp-push r0)
	(f-bind 'gui_gui 'statics r2)
	(f-call 'view 'add_front '((r2 gui_statics_screen) r0))
	(vp-pop r0)
	(vp-ret)

(def-func-end)

(def-func 'gui/gui_update)
	;inputs
	;r0 = root view object
	;trashes
	;all but r4

	(def-struct 'local)
		(ptr 'local_root)
		(ptr 'local_ctx_flist)
		(ptr 'local_ctx_next)
		(struct 'local_ctx 'gui_ctx)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(vp-cpy-ri r0 r4 local_root)

	;iterate through views back to front
	;setting abs cords
	(vp-xor-rr r8 r8)
	(vp-xor-rr r9 r9)
	(f-call 'view 'backward_tree '(r0 r0 ($ abs_down_callback) ($ abs_up_callback)))

	;iterate through views back to front
	;create visible region at root
	(f-call 'view 'backward_tree '(r0 r0 ($ null_func_down_callback) ($ visible_up_callback)))

(when dual_buffers
	;copy visable region to new region
	(vp-xor-rr r1 r1)
	(vp-push r0 r1)
	(vp-lea-i r0 view_dirty_region r1)
	(assign '((r0 view_w i) (r0 view_h i)) '(r10 r11))
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)
	(f-call 'gui_region 'copy_rect '(r0 r1 r4 0 0 r10 r11))

	;paste old visable region into root
	(vp-cpy-ir r4 8 r0)
	(vp-lea-i r0 view_dirty_region r2)
	(f-bind 'gui_gui 'statics r1)
	(vp-lea-i r1 gui_statics_rect_heap r0)
	(vp-add-cr gui_statics_old_region r1)
	(f-call 'gui_region 'paste_region '(r0 r1 r2 0 0))

	;free old region and splice over new region
	(f-bind 'gui_gui 'statics r5)
	(f-call 'gui_region 'free '((& r5 gui_statics_rect_heap) (& r5 gui_statics_old_region)))
	(vp-pop r1)
	(vp-cpy-ri r1 r5 gui_statics_old_region)
	(vp-pop r0)
)

	;iterate through views front to back
	;distribute visible region
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 r4 local_ctx_flist)
	(f-call 'view 'forward_tree '(r0 r4 ($ distribute_down_callback) ($ distribute_up_callback)))

	;draw all on draw list, and free dirty regions
	(f-bind 'gui_gui 'statics r1)
	(vp-cpy-ir r1 gui_statics_renderer r1)
	(vp-cpy-ri r1 r4 (add local_ctx gui_ctx_sdl_ctx))
	(loop-flist-forward r4 local_ctx_flist r0 r0)
		(vp-cpy-ri r0 r4 local_ctx_next)
		(vp-sub-cr view_ctx_node r0)
		(assign '((r0 view_ctx_x i) (r0 view_ctx_y i)) '(r8 r9))
		(vp-lea-i r4 local_ctx r1)
		(vp-lea-i r0 view_dirty_region r2)
		(assign '(r8 r9) '((r1 gui_ctx_x i) (r1 gui_ctx_y i)))
		(vp-cpy-ri r2 r1 gui_ctx_dirty_region)
		(v-call 'view 'draw '(r0 r1))
		(vp-cpy-ir r4 local_ctx_next r1)
		(vp-sub-cr (sub view_ctx_node view_dirty_region) r1)
		(f-bind 'gui_gui 'statics r0)
		(vp-add-cr gui_statics_rect_heap r0)
		(f-call 'gui_region 'free '(r0 r1))
		(vp-cpy-ir r4 local_ctx_next r0)
	(loop-end)

	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'null_func_down_callback)
	(vp-cpy-rr r0 r1)
(vp-label 'null_func_up_callback)
	(vp-ret)

(vp-label 'abs_down_callback)
	(assign '((r0 view_x i) (r0 view_y i)) '(r10 r11))
	(vp-add-rr r10 r8)
	(vp-add-rr r11 r9)
	(assign '(r8 r9) '((r0 view_ctx_x i) (r0 view_ctx_y i)))
	(vp-ret)

(vp-label 'abs_up_callback)
	(assign '((r0 view_x i) (r0 view_y i)) '(r10 r11))
	(vp-sub-rr r10 r8)
	(vp-sub-rr r11 r9)
	(vp-ret)

(vp-label 'visible_up_callback)
	(def-struct 'vis)
		(ptr 'vis_inst)
		(ptr 'vis_root)
		(ptr 'vis_next)
		(ptr 'vis_region)
	(def-struct-end)

	;save inputs
	(vp-sub-cr vis_size r4)
	(vp-cpy-ri r0 r4 vis_inst)
	(vp-cpy-ri r1 r4 vis_root)

	;region heap
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)

	;remove opaque region from ancestors if not root
	(vp-cpy-ir r4 vis_inst r1)
	(vp-cpy-ir r4 vis_root r2)
	(vpif '(r1 != r2))
		;remove my opaque region from ancestors
		(vp-xor-rr r2 r2)
		(vp-cpy-ri r2 r4 vis_region)

		;first copy any opaque region
		(assign '((r1 view_x i) (r1 view_y i)) '(r8 r9))
		(vp-cpy-ir r1 view_parent r2)
		(assign '((r2 view_w i) (r2 view_h i)) '(r10 r11))
		(vp-mul-cr -1 r8)
		(vp-mul-cr -1 r9)
		(vp-add-rr r8 r10)
		(vp-add-rr r9 r11)
		(vp-add-cr view_opaque_region r1)
		(vp-lea-i r4 vis_region r2)
		(f-call 'gui_region 'copy_rect '(r0 r1 r2 r8 r9 r10 r11))

		;remove from ancestors
		(vp-cpy-ir r4 vis_inst r1)
		(loop-start)
			(vp-cpy-ir r1 view_parent r2)
			(vp-cpy-ri r2 r4 vis_next)

			;exit if clipped away
			(vp-cpy-ir r4 vis_region r3)
			(breakif '(r3 == 0))

			;translate temp opaque region
			(assign '((r1 view_x i) (r1 view_y i)) '(r8 r9))
			(vp-lea-i r4 vis_region r1)
			(f-call 'gui_region 'translate '(r1 r8 r9))

			;clip temp opaque region
			(vp-cpy-ir r4 vis_next r2)
			(vp-lea-i r4 vis_region r1)
			(f-call 'gui_region 'clip_rect '(r0 r1 0 0 (r2 view_w i) (r2 view_h i)))

			;remove temp opaque region
			(vp-lea-i r4 vis_region r1)
			(vp-cpy-ir r4 vis_next r2)
			(vp-add-cr view_dirty_region r2)
			(f-call 'gui_region 'remove_region '(r0 r1 r2 0 0))

			(vp-cpy-ir r4 vis_next r1)
			(vp-cpy-ir r4 vis_root r2)
		(loop-until '(r1 == r2))

		;free any temp region
		(vp-lea-i r4 vis_region r1)
		(f-call 'gui_region 'free '(r0 r1))
	(endif)

	;clip local dirty region with parent bounds if not root
	(vp-cpy-ir r4 vis_inst r1)
	(vp-cpy-ir r1 view_parent r2)
	(vp-cpy-ir r4 vis_root r3)
	(vpif '(r1 == r3))
		(vp-cpy-rr r1 r2)
	(endif)
	(assign '((r1 view_x i) (r1 view_y i) (r2 view_w i) (r2 view_h i)) '(r8 r9 r10 r11))
	(vp-mul-cr -1 r8)
	(vp-mul-cr -1 r9)
	(vp-add-rr r8 r10)
	(vp-add-rr r9 r11)
	(vp-add-cr view_dirty_region r1)
	(f-call 'gui_region 'clip_rect '(r0 r1 r8 r9 r10 r11))

	;paste local dirty region onto parent if not root
	(vp-cpy-ir r4 vis_inst r1)
	(vp-cpy-ir r4 vis_root r3)
	(vpif '(r1 != r3))
		(assign '((r1 view_x i) (r1 view_y i)) '(r8 r9))
		(vp-cpy-ir r1 view_parent r2)
		(vp-add-cr view_dirty_region r1)
		(vp-add-cr view_dirty_region r2)
		(f-call 'gui_region 'paste_region '(r0 r1 r2 r8 r9))

		;free local dirty region
		(vp-cpy-ir r4 vis_inst r1)
		(vp-add-cr view_dirty_region r1)
		(f-call 'gui_region 'free '(r0 r1))
	(endif)

	(vp-cpy-ir r4 vis_inst r0)
	(vp-add-cr vis_size r4)
	(vp-ret)

(vp-label 'distribute_down_callback)
	(def-struct 'dist)
		(ptr 'dist_inst)
		(ptr 'dist_data)
		(ptr 'dist_next)
	(def-struct-end)

	;save inputs
	(vp-sub-cr dist_size r4)
	(vp-cpy-ri r0 r4 dist_inst)
	(vp-cpy-ri r1 r4 dist_data)

	;region heap
	(f-bind 'gui_gui 'statics r0)
	(vp-add-cr gui_statics_rect_heap r0)

	;copy view from parent if not root
	(vp-cpy-ir r4 dist_inst r2)
	(vp-cpy-ir r1 local_root r3)
	(vpif '(r2 != r3))
		;copy my area from parent
		(vp-cpy-ir r2 view_parent r1)
		(assign '((r2 view_ctx_x i) (r2 view_ctx_y i) (r2 view_w i) (r2 view_h i)) '(r8 r9 r10 r11))
		(vp-add-rr r8 r10)
		(vp-add-rr r9 r11)
		(vp-add-cr view_dirty_region r1)
		(vp-add-cr view_dirty_region r2)
		(f-call 'gui_region 'copy_rect '(r0 r1 r2 r8 r9 r10 r11))

		;did we find any
		(vp-cpy-ir r4 dist_inst r1)
		(vp-cpy-ir r1 view_dirty_region r1)
		(vpif '(r1 != 0))
			;remove my opaque region from ancestors
			(vp-cpy-ir r4 dist_inst r2)
			(loop-start)
				(vp-cpy-ir r2 view_parent r2)
				(vp-cpy-ri r2 r4 dist_next)

				(vp-cpy-ir r4 dist_inst r1)
				(assign '((r1 view_ctx_x i) (r1 view_ctx_y i)) '(r8 r9))
				(vp-add-cr view_opaque_region r1)
				(vp-add-cr view_dirty_region r2)
				(f-call 'gui_region 'remove_region '(r0 r1 r2 r8 r9))

				(vp-cpy-ir r4 dist_next r2)
				(vp-cpy-ir r4 dist_data r1)
				(vp-cpy-ir r1 local_root r3)
			(loop-until '(r2 == r3))
		(endif)
	(endif)

	;r1 will be 0 or not depending on haveing any dirty region
	(vp-cpy-ir r4 dist_inst r0)
	(vp-add-cr dist_size r4)
	(vp-ret)

(vp-label 'distribute_up_callback)
	;add myself to draw list if not empty
	(vp-cpy-ir r0 view_dirty_region r2)
	(vpif '(r2 != 0))
		(vp-lea-i r0 view_ctx_node r2)
		(vp-add-cr local_ctx_flist r1)
		(ln-add-fnode r1 0 r2 r3)
	(endif)
	(vp-ret)

(def-func-end)
