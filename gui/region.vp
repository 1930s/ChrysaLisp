(import 'inc/func.inc)
(import 'inc/gui.inc)

(def-func 'gui/region_clip_rect)
	;inputs
	;r0 = region heap pointer
	;r1 = source region listhead pointer
	;r8 = x (pixels)
	;r9 = y (pixels)
	;r10 = x1 (pixels)
	;r11 = y1 (pixels)
	;trashes
	;r5-r15

	;check for any obvious errors in inputs
	(f-entry 'gui_region 'clip_rect '(r0 r1 r8 r9 r10 r11))
	(vpif '(r10 > r8))
		(vpif '(r11 > r9))
			;run through source region list
			(vp-cpy-rr r1 r7)
			(loop-start)
			(vp-label 'loop)
				(ln-next-fnode r7 r6)

				(switch)
					(vp-cpy-ir-i r7 gui_rect_x r12)
					(breakif '(r12 >= r10))
					(vp-cpy-ir-i r7 gui_rect_y r13)
					(breakif '(r13 >= r11))
					(vp-cpy-ir-i r7 gui_rect_x1 r14)
					(breakif '(r14 <= r8))
					(vp-cpy-ir-i r7 gui_rect_y1 r15)
					(breakif '(r15 <= r9))

					;clip region
					(vpif '(r12 < r8))
						(assign '(r8) '((r7 gui_rect_x i)))
					(endif)
					(vpif '(r13 < r9))
						(assign '(r9) '((r7 gui_rect_y i)))
					(endif)
					(vpif '(r14 > r10))
						(assign '(r10) '((r7 gui_rect_x1 i)))
					(endif)
					(vpif '(r15 > r11))
						(assign '(r11) '((r7 gui_rect_y1 i)))
					(endif)
					(vp-jmp 'loop)
				(endswitch)

				;region is outside
				(vp-cpy-rr r7 r5)
				(ln-remove-fnode r7 r6)
				(hp-freecell r0 r5 r6)
			(loop-end)
		(endif)
	(endif)
	(f-exit 'gui_region 'clip_rect '(r0))
	(vp-ret)

(def-func-end)

(def-func 'gui/region_copy_rect)
	;inputs
	;r0 = region heap pointer
	;r1 = source region listhead pointer
	;r2 = dest region listhead pointer
	;r8 = x (pixels)
	;r9 = y (pixels)
	;r10 = x1 (pixels)
	;r11 = y1 (pixels)
	;trashes
	;r1-r2, r5-r15

	;check for any obvious errors in inputs
	(f-entry 'gui_region 'copy_rect '(r0 r1 r2 r8 r9 r10 r11))
	(vpif '(r10 > r8))
		(vpif '(r11 > r9))
			;run through source region list
			(vp-cpy-rr r2 r5)
			(loop-flist-forward r1 0 r7 r7)
				;not in contact ?
				(vp-cpy-ir-i r7 gui_rect_x r12)
				(continueif '(r12 >= r10))
				(vp-cpy-ir-i r7 gui_rect_y r13)
				(continueif '(r13 >= r11))
				(vp-cpy-ir-i r7 gui_rect_x1 r14)
				(continueif '(r8 >= r14))
				(vp-cpy-ir-i r7 gui_rect_y1 r15)
				(continueif '(r9 >= r15))

				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)

				;jump to correct splitting code
				(vp-jmpif '(r12 >= r8) 'copy_split1)
				(vp-jmpif '(r13 >= r9) 'copy_split2)
				(vp-jmpif '(r10 >= r14) 'copy_split4)
				(vp-jmpif '(r11 >= r15) 'copy_xyx1)

			(vp-label 'copy_xyx1y1)
				;r8 + r9 + r10 + r11 inside
				(assign '(r8 r9 r10 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_split1)
				;jump to correct splitting code
				(vp-jmpif '(r13 >= r9) 'copy_split3)
				(vp-jmpif '(r10 >= r14) 'copy_split5)
				(vp-jmpif '(r11 >= r15) 'copy_yx1)

			(vp-label 'copy_yx1y1)
				;r9 + r10 + r11 inside
				(assign '(r12 r9 r10 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_split2)
				;jump to correct splitting code
				(vp-jmpif '(r10 >= r14) 'copy_split6)
				(vp-jmpif '(r11 >= r15) 'copy_xx1)

			(vp-label 'copy_xx1y1)
				;r8 + r10 + r11 inside
				(assign '(r8 r13 r10 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_split3)
				;jump to correct splitting code
				(vp-jmpif '(r10 >= r14) 'copy_split7)
				(vp-jmpif '(r11 >= r15) 'copy_x1)

			(vp-label 'copy_x1y1)
				;r10 + r11 inside
				(assign '(r12 r13 r10 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_split4)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'copy_xy)

			(vp-label 'copy_xyy1)
				;r8 + r9 + r11 inside
				(assign '(r8 r9 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_split5)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'copy_y)

			(vp-label 'copy_yy1)
				;r9 + r11 inside
				(assign '(r12 r9 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_split6)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'copy_x)

			(vp-label 'copy_xy1)
				;r8 + r11 inside
				(assign '(r8 r13 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_split7)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'copy_encl)

			(vp-label 'copy_y1)
				;r11 inside
				(assign '(r12 r13 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_xyx1)
				;r8 + r9 + r10 inside
				(assign '(r8 r9 r10 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_encl)
				;region is enclosed
				(assign '(r12 r13 r14 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_x)
				;r8 inside
				(assign '(r8 r13 r14 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_y)
				;r9 inside
				(assign '(r12 r9 r14 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_xy)
				;r8 + r9 inside
				(assign '(r8 r9 r14 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_x1)
				;r10 inside
				(assign '(r12 r13 r10 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_xx1)
				;r8 + r10 inside
				(assign '(r8 r13 r10 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'copy_yx1)
				;r9 + r10 inside
				(assign '(r12 r9 r10 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
			(loop-end)
		(endif)
	(endif)
	(f-exit 'gui_region 'copy_rect '(r0))
	(vp-ret)

(def-func-end)

(def-func 'gui/region_copy_region)
	;inputs
	;r0 = region heap pointer
	;r1 = source region listhead pointer
	;r2 = dest region listhead pointer
	;r3 = copy region listhead pointer
	;r8 = x translation
	;r9 = y translation
	;trashes
	;r1-r3, r5-r15

	(def-struct 'local)
		(ptr 'node)
		(ptr 'slist)
		(ptr 'dlist)
		(int 'dx)
		(int 'dy)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(f-entry 'gui_region 'copy_region '(r0 (r4 local_slist) (r4 local_dlist) r3 (r4 local_dx i) (r4 local_dy i)))

	;run through copy region list
	(loop-flist-forward r3 0 r1 r1)
		(vp-cpy-ri r1 r4 local_node)

		(assign '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)) '(r8 r9 r10 r11))
		(assign '((r4 local_dx i) (r4 local_dy i)) '(r12 r13))
		(vp-add-rr r12 r8)
		(vp-add-rr r13 r9)
		(vp-add-rr r12 r10)
		(vp-add-rr r13 r11)
		(f-call 'gui_region 'copy_rect '(r0 (r4 local_slist) (r4 local_dlist) r8 r9 r10 r11))

		(vp-cpy-ir r4 local_node r1)
	(loop-end)

	(f-exit 'gui_region 'copy_region '(r0))
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'gui/region_cut_rect)
	;inputs
	;r0 = region heap pointer
	;r1 = source region listhead pointer
	;r2 = dest region listhead pointer
	;r8 = x (pixels)
	;r9 = y (pixels)
	;r10 = x1 (pixels)
	;r11 = y1 (pixels)

	;check for any obvious errors in inputs
	(f-entry 'gui_region 'cut_rect '(r0 r1 r2 r8 r9 r10 r11))
	(vpif '(r10 > r8))
		(vpif '(r11 > r9))
			;run through source region list
			(vp-cpy-rr r2 r5)
			(vp-cpy-rr r1 r6)
			(vp-sub-cr ptr_size r4)
			(loop-flist-forward r1 0 r7 r2)
				(vp-cpy-ri r2 r4 0)

				;not in contact ?
				(vp-cpy-ir-i r7 gui_rect_x r12)
				(continueif '(r12 >= r10))
				(vp-cpy-ir-i r7 gui_rect_y r13)
				(continueif '(r13 >= r11))
				(vp-cpy-ir-i r7 gui_rect_x1 r14)
				(continueif '(r8 >= r14))
				(vp-cpy-ir-i r7 gui_rect_y1 r15)
				(continueif '(r9 >= r15))

				;jump to correct splitting code
				(vp-jmpif '(r12 >= r8) 'cut_split1)
				(vp-jmpif '(r13 >= r9) 'cut_split2)
				(vp-jmpif '(r10 >= r14) 'cut_split4)
				(vp-jmpif '(r11 >= r15) 'cut_xyx1)

			(vp-label 'cut_xyx1y1)
				;r8 + r9 + r10 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r8 r9 r10 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;right part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r10 r9 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;left part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r12 r9 r8 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_split1)
				;jump to correct splitting code
				(vp-jmpif '(r13 >= r9) 'cut_split3)
				(vp-jmpif '(r10 >= r14) 'cut_split5)
				(vp-jmpif '(r11 >= r15) 'cut_yx1)

			(vp-label 'cut_yx1y1)
				;r9 + r10 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r9 r10 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;right part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r10 r9 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_split2)
				;jump to correct splitting code
				(vp-jmpif '(r10 >= r14) 'cut_split6)
				(vp-jmpif '(r11 >= r15) 'cut_xx1)

			(vp-label 'cut_xx1y1)
				;r8 + r10 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r8 r13 r10 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;right part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r10 r13 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;left part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r12 r13 r8 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_split3)
				;jump to correct splitting code
				(vp-jmpif '(r10 >= r14) 'cut_split7)
				(vp-jmpif '(r11 >= r15) 'cut_x1)

			(vp-label 'cut_x1y1)
				;r10 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r10 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;right part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r10 r13 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_split4)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'cut_xy)

			(vp-label 'cut_xyy1)
				;r8 + r9 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r8 r9 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;left part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r12 r9 r8 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_split5)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'cut_y)

			(vp-label 'cut_yy1)
				;r9 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r9 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_split6)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'cut_x)

			(vp-label 'cut_xy1)
				;r8 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r8 r13 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;left part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r12 r13 r8 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_split7)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'cut_encl)

			(vp-label 'cut_y1)
				;r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_xyx1)
				;r8 + r9 + r10 inside
				;left part
				(assign '(r9 r8) '((r7 gui_rect_y i) (r7 gui_rect_x1 i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r8 r9 r10 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;right part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r10 r9 r14 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_encl)
				;region is enclosed
				(vp-cpy-rr r7 r1)
				(vp-cpy-ir r4 0 r2)
				(ln-remove-fnode r7 r2)
				(ln-add-fnode r5 0 r1 r2)
				(continue)

			(vp-label 'cut_x)
				;r8 inside
				;left part
				(assign '(r8) '((r7 gui_rect_x1 i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r8 r13 r14 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_y)
				;r9 inside
				;top part
				(assign '(r9) '((r7 gui_rect_y1 i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r9 r14 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_xy)
				;r8 + r9 inside
				;left part
				(assign '(r9 r8) '((r7 gui_rect_y i) (r7 gui_rect_x1 i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r8 r9 r14 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_x1)
				;r10 inside
				;right part
				(assign '(r10) '((r7 gui_rect_x i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r10 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_xx1)
				;r8 + r10 inside
				;right part
				(assign '(r10) '((r7 gui_rect_x i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r8 r13 r10 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;left part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r12 r13 r8 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'cut_yx1)
				;r9 + r10 inside
				;right part
				(assign '(r10 r9) '((r7 gui_rect_x i) (r7 gui_rect_y i)))
				;cut part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r9 r10 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r6 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
			(loop-end)
			(vp-add-cr 8 r4)
		(endif)
	(endif)
	(f-exit 'gui_region 'cut_rect '(r0))
	(vp-ret)

(def-func-end)

(def-func 'gui/region_free)
	;inputs
	;r0 = region heap pointer
	;r1 = source region listhead pointer
	;trashes
	;r1-r3

	;run through source region list
	(f-entry 'gui_region 'free '(r0 r1))
	(loop-flist-forward r1 0 r1 r2)
		(vp-cpy-rr r1 r3)
		(ln-remove-fnode r1 r2)
		(hp-freecell r0 r3 r2)
	(loop-end)
	(f-exit 'gui_region 'free '(r0))
	(vp-ret)

(def-func-end)

(def-func 'gui/region_paste_rect)
	;inputs
	;r0 = region heap pointer
	;r1 = dest region listhead pointer
	;r8 = x (pixels)
	;r9 = y (pixels)
	;r10 = x1 (pixels)
	;r11 = y1 (pixels)
	;trashes
	;r1-r3, r5-r15

	;check for any obvious errors in inputs
	(f-entry 'gui_region 'paste_rect '(r0 r1 r8 r9 r10 r11))
	(vpif '(r10 > r8))
		(vpif '(r11 > r9))
			;run through source region list
			(vp-cpy-rr r1 r5)
			(loop-flist-forward r1 0 r7 r6)
				;not in contact ?
				(vp-cpy-ir-i r7 gui_rect_x r12)
				(continueif '(r12 >= r10))
				(vp-cpy-ir-i r7 gui_rect_y r13)
				(continueif '(r13 >= r11))
				(vp-cpy-ir-i r7 gui_rect_x1 r14)
				(continueif '(r8 >= r14))
				(vp-cpy-ir-i r7 gui_rect_y1 r15)
				(continueif '(r9 >= r15))

				;jump to correct splitting code
				(vp-jmpif '(r12 >= r8) 'paste_split1)
				(vp-jmpif '(r13 >= r9) 'paste_split2)
				(vp-jmpif '(r10 >= r14) 'paste_split4)
				(vp-jmpif '(r11 >= r15) 'paste_xyx1)

			(vp-label 'paste_xyx1y1)
				;r8 + r9 + r10 + r11 inside
				(vp-ret)

			(vp-label 'paste_split1)
				;jump to correct splitting code
				(vp-jmpif '(r13 >= r9) 'paste_split3)
				(vp-jmpif '(r10 >= r14) 'paste_split5)
				(vp-jmpif '(r11 >= r15) 'paste_yx1)

			(vp-label 'paste_yx1y1)
				;r9 + r10 + r11 inside
				(vp-cpy-rr r12 r10)
				(continue)

			(vp-label 'paste_split2)
				;jump to correct splitting code
				(vp-jmpif '(r10 >= r14) 'paste_split6)
				(vp-jmpif '(r11 >= r15) 'paste_xx1)

			(vp-label 'paste_xx1y1)
				;r8 + r10 + r11 inside
				(vp-cpy-rr r13 r11)
				(continue)

			(vp-label 'paste_split3)
				;jump to correct splitting code
				(vp-jmpif '(r10 >= r14) 'paste_split7)
				(vp-jmpif '(r11 >= r15) 'paste_x1)

			(vp-label 'paste_x1y1)
				;r10 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;right part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r10 r13 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'paste_split4)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'paste_xy)

			(vp-label 'paste_xyy1)
				;r8 + r9 + r11 inside
				(vp-cpy-rr r14 r8)
				(continue)

			(vp-label 'paste_split5)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'paste_y)

			(vp-label 'paste_yy1)
				;r9 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'paste_split6)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'paste_x)

			(vp-label 'paste_xy1)
				;r8 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;left part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r8 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'paste_split7)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'paste_encl)

			(vp-label 'paste_y1)
				;r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				(continue)

			(vp-label 'paste_xyx1)
				;r8 + r9 + r10 inside
				(vp-cpy-rr r15 r9)
				(continue)

			(vp-label 'paste_encl)
				;region is enclosed
				(vp-cpy-rr r7 r1)
				(ln-remove-fnode r7 r6)
				(hp-freecell r0 r1 r2)
				(continue)

			(vp-label 'paste_x)
				;r8 inside
				;left part
				(assign '(r8) '((r7 gui_rect_x1 i)))
				(continue)

			(vp-label 'paste_y)
				;r9 inside
				;top part
				(assign '(r9) '((r7 gui_rect_y1 i)))
				(continue)

			(vp-label 'paste_xy)
				;r8 + r9 inside
				;left part
				(assign '(r9 r8) '((r7 gui_rect_y i) (r7 gui_rect_x1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'paste_x1)
				;r10 inside
				;right part
				(assign '(r10) '((r7 gui_rect_x i)))
				(continue)

			(vp-label 'paste_xx1)
				;r8 + r10 inside
				;right part
				(assign '(r10) '((r7 gui_rect_x i)))
				;left part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r8 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'paste_yx1)
				;r9 + r10 inside
				;right part
				(assign '(r10 r9) '((r7 gui_rect_x i) (r7 gui_rect_y i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
			(loop-end)

			;create new region ?
			(switch)
				(breakif '(r8 == r10))
				(breakif '(r9 == r11))
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(breakif '(r1 == 0))

				(ln-add-fnode r5 0 r1 r2)
				(assign '(r8 r9 r10 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
			(endswitch)
		(endif)
	(endif)
	(f-exit 'gui_region 'paste_rect '(r0))
	(vp-ret)

(def-func-end)

(def-func 'gui/region_paste_region)
	;inputs
	;r0 = region heap pointer
	;r1 = source region listhead pointer
	;r2 = dest region listhead pointer
	;r8 = x translation
	;r9 = y translation
	;trashes
	;r1-r3, r5-r15

	(def-struct 'local)
		(ptr 'node)
		(ptr 'dlist)
		(int 'dx)
		(int 'dy)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(f-entry 'gui_region 'paste_region '(r0 r1 (r4 local_dlist) (r4 local_dx i) (r4 local_dy i)))

	;run through source region list
	(loop-flist-forward r1 0 r1 r1)
		(vp-cpy-ri r1 r4 local_node)

		(assign '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)) '(r8 r9 r10 r11))
		(assign '((r4 local_dx i) (r4 local_dy i)) '(r12 r13))
		(vp-add-rr r12 r8)
		(vp-add-rr r13 r9)
		(vp-add-rr r12 r10)
		(vp-add-rr r13 r11)
		(f-call 'gui_region 'paste_rect '(r0 (r4 local_dlist) r8 r9 r10 r11))

		(vp-cpy-ir r4 local_node r1)
	(loop-end)

	(f-exit 'gui_region 'paste_region '(r0))
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'gui/region_remove_rect)
	;inputs
	;r0 = region heap pointer
	;r1 = source region listhead pointer
	;r8 = x (pixels)
	;r9 = y (pixels)
	;r10 = x1 (pixels)
	;r11 = y1 (pixels)
	;trashes
	;r1-r2, r5-r15

	;check for any obvious errors in inputs
	(f-entry 'gui_region 'remove_rect '(r0 r1 r8 r9 r10 r11))
	(vpif '(r10 > r8))
		(vpif '(r11 > r9))
			;run through source region list
			(vp-cpy-rr r1 r5)
			(loop-flist-forward r1 0 r7 r6)
				;not in contact ?
				(vp-cpy-ir-i r7 gui_rect_x r12)
				(continueif '(r12 >= r10))
				(vp-cpy-ir-i r7 gui_rect_y r13)
				(continueif '(r13 >= r11))
				(vp-cpy-ir-i r7 gui_rect_x1 r14)
				(continueif '(r8 >= r14))
				(vp-cpy-ir-i r7 gui_rect_y1 r15)
				(continueif '(r9 >= r15))

				;jump to correct splitting code
				(vp-jmpif '(r12 >= r8) 'rem_split1)
				(vp-jmpif '(r13 >= r9) 'rem_split2)
				(vp-jmpif '(r10 >= r14) 'rem_split4)
				(vp-jmpif '(r11 >= r15) 'rem_xyx1)

			(vp-label 'rem_xyx1y1)
				;r8 + r9 + r10 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;right part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r10 r9 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;left part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r9 r8 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'rem_split1)
				;jump to correct splitting code
				(vp-jmpif '(r13 >= r9) 'rem_split3)
				(vp-jmpif '(r10 >= r14) 'rem_split5)
				(vp-jmpif '(r11 >= r15) 'rem_yx1)

			(vp-label 'rem_yx1y1)
				;r9 + r10 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;right part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r10 r9 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'rem_split2)
				;jump to correct splitting code
				(vp-jmpif '(r10 >= r14) 'rem_split6)
				(vp-jmpif '(r11 >= r15) 'rem_xx1)

			(vp-label 'rem_xx1y1)
				;r8 + r10 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;right part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r10 r13 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;left part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r8 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'rem_split3)
				;jump to correct splitting code
				(vp-jmpif '(r10 >= r14) 'rem_split7)
				(vp-jmpif '(r11 >= r15) 'rem_x1)

			(vp-label 'rem_x1y1)
				;r10 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;right part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r10 r13 r14 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'rem_split4)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'rem_xy)

			(vp-label 'rem_xyy1)
				;r8 + r9 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;left part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r9 r8 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'rem_split5)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'rem_y)

			(vp-label 'rem_yy1)
				;r9 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'rem_split6)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'rem_x)

			(vp-label 'rem_xy1)
				;r8 + r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				;left part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r8 r11) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'rem_split7)
				;jump to correct splitting code
				(vp-jmpif '(r11 >= r15) 'rem_encl)

			(vp-label 'rem_y1)
				;r11 inside
				;bottom part
				(assign '(r11) '((r7 gui_rect_y i)))
				(continue)

			(vp-label 'rem_xyx1)
				;r8 + r9 + r10 inside
				;left part
				(assign '(r9 r8) '((r7 gui_rect_y i) (r7 gui_rect_x1 i)))
				;right part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r10 r9 r14 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'rem_encl)
				;region is enclosed
				(vp-cpy-rr r7 r1)
				(ln-remove-fnode r7 r6)
				(hp-freecell r0 r1 r2)
				(continue)

			(vp-label 'rem_x)
				;r8 inside
				;left part
				(assign '(r8) '((r7 gui_rect_x1 i)))
				(continue)

			(vp-label 'rem_y)
				;r9 inside
				;top part
				(assign '(r9) '((r7 gui_rect_y1 i)))
				(continue)

			(vp-label 'rem_xy)
				;r8 + r9 inside
				;left part
				(assign '(r9 r8) '((r7 gui_rect_y i) (r7 gui_rect_x1 i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'rem_x1)
				;r10 inside
				;right part
				(assign '(r10) '((r7 gui_rect_x i)))
				(continue)

			(vp-label 'rem_xx1)
				;r8 + r10 inside
				;right part
				(assign '(r10) '((r7 gui_rect_x i)))
				;left part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r8 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
				(continue)

			(vp-label 'rem_yx1)
				;r9 + r10 inside
				;right part
				(assign '(r10 r9) '((r7 gui_rect_x i) (r7 gui_rect_y i)))
				;top part
				(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
				(continueif '(r1 == 0))
				(ln-add-fnode r5 0 r1 r2)
				(assign '(r12 r13 r14 r9) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
			(loop-end)
		(endif)
	(endif)
	(f-exit 'gui_region 'remove_rect '(r0))
	(vp-ret)

(def-func-end)

(def-func 'gui/region_remove_region)
	;inputs
	;r0 = region heap pointer
	;r1 = source region listhead pointer
	;r2 = dest region listhead pointer
	;r8 = x translation
	;r9 = y translation
	;trashes
	;r1-r3, r5-r15

	(def-struct 'local)
		(ptr 'node)
		(ptr 'dlist)
		(int 'dx)
		(int 'dy)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(f-entry 'gui_region 'remove_region '(r0 r1 (r4 local_dlist) (r4 local_dx i) (r4 local_dy i)))

	;run through source region list
	(loop-flist-forward r1 0 r1 r1)
		(vp-cpy-ri r1 r4 local_node)

		(assign '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)) '(r8 r9 r10 r11))
		(assign '((r4 local_dx i) (r4 local_dy i)) '(r12 r13))
		(vp-add-rr r12 r8)
		(vp-add-rr r13 r9)
		(vp-add-rr r12 r10)
		(vp-add-rr r13 r11)
		(f-call 'gui_region 'remove_rect '(r0 (r4 local_dlist) r8 r9 r10 r11))

		(vp-cpy-ir r4 local_node r1)
	(loop-end)

	(f-exit 'gui_region 'remove_region '(r0))
	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'gui/region_translate)
	;inputs
	;r1 = region listhead pointer
	;r8 = x translation
	;r9 = y translation
	;trashes
	;r1, r12-r15

	;run through source region list
	(f-entry 'gui_region 'translate '(r1 r8 r9))
	(loop-flist-forward r1 0 r1 r1)
		(assign '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)) '(r12 r13 r14 r15))
		(vp-add-rr r8 r12)
		(vp-add-rr r9 r13)
		(vp-add-rr r8 r14)
		(vp-add-rr r9 r15)
		(assign '(r12 r13 r14 r15) '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)))
	(loop-end)
	(vp-ret)

(def-func-end)

(def-func 'gui/region_bounds)
	;inputs
	;r1 = region listhead pointer
	;outputs
	;r8 = x
	;r9 = y
	;r10 = x1
	;r11 = y1
	;trashes
	;r1, r12-r15

	;is empty ?
	(f-entry 'gui_region 'bounds '(r1))
	(vp-cpy-ir r1 ln_fnode_next r1)
	(vpif '(r1 == 0))
		(assign '(r1 r1 r1 r1) '(r8 r9 r10 r11))
	(else)
		;first rect
		(assign '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)) '(r8 r9 r10 r11))
		;run through region list
		(loop-flist-forward r1 0 r1 r1)
			(assign '((r1 gui_rect_x i) (r1 gui_rect_y i) (r1 gui_rect_x1 i) (r1 gui_rect_y1 i)) '(r12 r13 r14 r15))
			(vpif '(r12 < r8))
				(vp-cpy-rr r12 r8)
			(endif)
			(vpif '(r13 < r9))
				(vp-cpy-rr r13 r9)
			(endif)
			(vpif '(r14 > r10))
				(vp-cpy-rr r14 r10)
			(endif)
			(vpif '(r15 > r11))
				(vp-cpy-rr r15 r11)
			(endif)
		(loop-end)
	(endif)
	(f-exit 'gui_region 'bounds '(r8 r9 r10 r11))
	(vp-ret)

(def-func-end)
