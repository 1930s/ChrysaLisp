(import 'sys/func.inc)
(import 'gui/points/class.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

(def-method 'points 'lisp_transform)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6 'arg7)

	(push-scope)
	(entry 'points 'lisp_transform {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 8} {value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'transform {arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	(call 'obj 'ref {arg0} {value})

(vp-label 'funcexit)
	(exit 'points 'lisp_transform {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-transform dst src m1x m1y m2x m2y trx try)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'points 'points 'integer 'integer 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_simplify)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3)

	(push-scope)
	(entry 'points 'lisp_simplify {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 4} {value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'simplify {arg0, arg1, arg2, arg3})
	(call 'obj 'ref {arg0} {value})

(vp-label 'funcexit)
	(exit 'points 'lisp_simplify {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-simplify dst src stack tol)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'points 'points 'array 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_gen_quadratic)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6 'arg7 'arg8)

	(push-scope)
	(entry 'points 'lisp_gen_quadratic {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 9} {value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'gen_quadratic {arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	(call 'obj 'ref {arg0} {value})

(vp-label 'funcexit)
	(exit 'points 'lisp_gen_quadratic {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-gen-quadratic dst stack p1x p1y p2x p2y p3x p3y tol)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'points 'array 'integer 'integer 'integer 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_gen_cubic)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6 'arg7 'arg8 'arg9 'arg10)

	(push-scope)
	(entry 'points 'lisp_gen_cubic {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 11} {value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'gen_cubic {arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10})
	(call 'obj 'ref {arg0} {value})

(vp-label 'funcexit)
	(exit 'points 'lisp_gen_cubic {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-gen-cubic dst stack p1x p1y p2x p2y p3x p3y p4x p4y tol)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'points 'array 'integer 'integer 'integer 'integer 'integer 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_gen_arc)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6 'arg7)

	(push-scope)
	(entry 'points 'lisp_gen_arc {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 8} {value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'gen_arc {arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	(call 'obj 'ref {arg0} {value})

(vp-label 'funcexit)
	(exit 'points 'lisp_gen_arc {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-gen-arc dst stack cx cy start end radius tol)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'points 'array 'integer 'integer 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_stroke_polylines)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6 'arg7)

	(push-scope)
	(entry 'points 'lisp_stroke_polylines {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 8} {value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'stroke_polylines {arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	(call 'obj 'ref {arg0} {value})

(vp-label 'funcexit)
	(exit 'points 'lisp_stroke_polylines {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-stroke-polylines dst stack src join cap1 cap2 radius tol)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'vector 'array 'vector 'integer 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_stroke_polygons)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5)

	(push-scope)
	(entry 'points 'lisp_stroke_polygons {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 6} {value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'stroke_polygons {arg0, arg1, arg2, arg3, arg4, arg5})
	(call 'obj 'ref {arg0} {value})

(vp-label 'funcexit)
	(exit 'points 'lisp_stroke_polygons {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-stroke-polygons dst stack src join radius tol)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'vector 'array 'vector 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(defun vecop (_)
	(ptr 'this 'args)
	(ptr 'arg0 'arg1 'value)
	(uint 'length 'veclen)

	(push-scope)
	(entry 'points (sym-cat "lisp_" _) {this, args})

	(call 'vector 'get_length {args} {_, length})
(errorcases
	(errorif {length < 2} 'error1)
	(errorif {length > 3} 'error1)
	(call 'lisp 'env_args_type (cat {args, @} (f-path 'points 'vtable) {, 0}) {value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'get_length {arg0} {_, veclen})
	(errorif {veclen == 0} 'error1)
	(errorif {veclen != arg1->array_length} 'error1)

	(vpif {length == 2})
		(call 'points 'create nil {value})
		(call 'points 'set_capacity {value, veclen})
		(call 'points 'set_length {value, veclen})
	(else)
		(errorif {veclen != value->array_length} 'error1)
		(call 'obj 'ref {value})
	(endif)
	(call 'points _ {value, arg0, arg1})

(vp-label 'funcexit)
	(exit 'points (sym-cat "lisp_" _) {this, value})
	(return))

(def-method 'points 'lisp_add)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vecop 'add)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-add points points [points])", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_sub)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vecop 'sub)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-sub points points [points])", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_mul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vecop 'mul)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-mul points points [points])", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_div)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vecop 'div)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-div points points [points])", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_mod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vecop 'mod)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-mod points points [points])", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_fmul)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vecop 'fmul)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-fmul points points [points])", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_fdiv)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vecop 'fdiv)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-fdiv points points [points])", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_fmod)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(vecop 'fmod)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-fmod points points [points])", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_sum)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'value)
	(union
		'(ptr 'args)
		'(long 'length))

	(push-scope)
	(entry 'points 'lisp_sum {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1} {value})
	(errorifnot {value} 'error1))

	(call 'vector 'get_first {args} {_, value})
	(call 'points 'get_length {value} {_, length})
	(vpif {length})
		(call 'points 'sum {value} {_, length})
	(endif)
	(call 'integer 'create {length} {value})

(vp-label 'funcexit)
	(exit 'points 'lisp_sum {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-sum points)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'points))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_fscale)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args)
	(ptr 'arg0 'arg1 'value)
	(uint 'length 'veclen)

	(push-scope)
	(entry 'points 'lisp_fscale {this, args})

	(call 'vector 'get_length {args} {_, length})
(errorcases
	(errorif {length < 2} 'error1)
	(errorif {length > 3} 'error1)
	(call 'lisp 'env_args_type {args, $sig, length} {value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'points 'get_length {arg0} {_, veclen})
	(vpif {length == 2})
		(call 'points 'create nil {value})
		(call 'points 'set_capacity {value, veclen})
		(call 'points 'set_length {value, veclen})
	(else)
		(errorif {veclen != value->array_length} 'error1)
		(call 'obj 'ref {value})
	(endif)
	(call 'points 'fscale {value, arg0, arg1})

(vp-label 'funcexit)
	(exit 'points 'lisp_fscale {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-fscale points scale [points])", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'points 'integer 'points))

	(pop-scope-syms)

(def-func-end)
