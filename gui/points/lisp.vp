(import 'sys/func.inc)
(import 'gui/points/class.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

(def-method 'points 'lisp_transform)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4)

	(push-scope)
	(f-entry 'points 'lisp_transform {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 5} {_, value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {this, args, &arg0, 0})
	(call 'points 'transform {arg0, arg1, arg2, arg3, arg4})
	(call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'points 'lisp_transform {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-transform dst src m1 m2 tr)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'points 'points 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_simplify)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3)

	(push-scope)
	(f-entry 'points 'lisp_simplify {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 4} {_, value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {this, args, &arg0, 0})
	(call 'points 'simplify {arg0, arg1, arg2, arg3})
	(call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'points 'lisp_simplify {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-simplify dst src stack tol)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'points 'points 'array 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_gen_quadratic)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5)

	(push-scope)
	(f-entry 'points 'lisp_gen_quadratic {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 6} {_, value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {this, args, &arg0, 0})
	(call 'points 'gen_quadratic {arg0, arg1, arg2, arg3, arg4, arg5})
	(call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'points 'lisp_gen_quadratic {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-gen-quadratic dst stack p1 p2 p3 tol)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'points 'array 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_gen_cubic)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6)

	(push-scope)
	(f-entry 'points 'lisp_gen_cubic {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 7} {_, value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {this, args, &arg0, 0})
	(call 'points 'gen_cubic {arg0, arg1, arg2, arg3, arg4, arg5, arg6})
	(call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'points 'lisp_gen_cubic {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-gen-cubic dst stack p1 p2 p3 p4 tol)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'points 'array 'integer 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_gen_arc)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6)

	(push-scope)
	(f-entry 'points 'lisp_gen_arc {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 7} {_, value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {this, args, &arg0, 0})
	(call 'points 'gen_arc {arg0, arg1, arg2, arg3, arg4, arg5, arg6})
	(call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'points 'lisp_gen_arc {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-gen-arc dst stack center start end radius tol)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'points 'array 'integer 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_stroke_polylines)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5 'arg6 'arg7)

	(push-scope)
	(f-entry 'points 'lisp_stroke_polylines {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 8} {_, value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {this, args, &arg0, 0})
	(call 'points 'stroke_polylines {arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	(call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'points 'lisp_stroke_polylines {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-stroke-polylines dst stack src join cap1 cap2 radius tol)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'vector 'array 'vector 'integer 'integer 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'points 'lisp_stroke_polygons)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2 'arg3 'arg4 'arg5)

	(push-scope)
	(f-entry 'points 'lisp_stroke_polygons {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 6} {_, value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {this, args, &arg0, 0})
	(call 'points 'stroke_polygons {arg0, arg1, arg2, arg3, arg4, arg5})
	(call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'points 'lisp_stroke_polygons {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(points-stroke-polygons dst stack src join radius tol)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'vector 'array 'vector 'integer 'integer 'integer))

	(pop-scope-syms)

(def-func-end)
