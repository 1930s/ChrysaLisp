(import 'sys/func.inc)
(import 'gui/font.inc)
(import 'sys/string.inc)
(import 'gui/sdl2.inc)
(import 'class/string/string.inc)

(defq debug_inout_old debug_inout)
(def-func 'gui/font_statics)
	(times ft_statics_size (vp-byte 0))
(def-func-end)
(setq debug_inout debug_inout_old)

(def-func 'gui/font_init)

	;get font statics
	(f-bind 'gui_font 'statics r1)

	;init font lists
	(vp-xor-rr r0 r0)
	(vp-cpy-ri r0 r1 ft_statics_font_flist)

	;init text image hash slots
	(vp-add-cr ft_statics_text_flists r1)
	(vp-lea-i r1 ft_buckets_size r2)
	(loop-start)
		(vp-cpy-ri r0 r1 0)
		(vp-add-cr ptr_size r1)
	(loop-until '(r1 == r2))
	(vp-ret)

(def-func-end)

(def-func 'gui/font_deinit)

	(def-struct 'local)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack to 16 bytes for SDl
	(vp-cpy-rr rsp r14)
	(vp-alloc local_size)
	(vp-and-cr -16 rsp)
	(vp-cpy-ri r14 rsp local_old_stack)

	;free all text in the cache
	(f-bind 'gui_font 'statics r14)
	(vp-lea-i r14 ft_statics_text_flists r9)
	(vp-lea-i r9 ft_buckets_size r10)
	(loop-start)
		(loop-flist r9 0 r13 r12)
			(vp-cpy-rr r13 r11)
			(ln-remove-fnode r13 r12)
			(sdl-call 'sdl 'sdl_destroy_texture '((r11 ft_text_texture)))
			(f-call 'sys_mem 'free '(r11))
		(loop-end)
		(vp-add-cr ptr_size r9)
	(loop-until '(r9 == r10))

	;free all fonts in the cache
	(f-bind 'gui_font 'statics r14)
	(loop-flist r14 ft_statics_font_flist r13 r12)
		(vp-cpy-rr r13 r11)
		(ln-remove-fnode r13 r12)
		(sdl-call 'sdl 'ttf_close_font '((r11 ft_font_handle)))
		(f-call 'sys_mem 'free '(r11))
	(loop-end)

	(vp-cpy-ir rsp local_old_stack rsp)
	(vp-ret)

(def-func-end)

(def-func 'gui/font_bounds)
	;inputs
	;r0 = font entry
	;r1 = string object
	;outputs
	;r0 = 0 if error, else text entry
	;r9 = width
	;r10 = height
	;trashes
	;r1-r5

	(f-call 'gui_font 'text '(r0 r1) '(r0))
	(vpif '(r0 == 0))
		(vp-xor-rr r9 r9)
		(vp-xor-rr r10 r10)
	(else)
		(vp-cpy-ir r0 ft_text_width r9)
		(vp-cpy-ir r0 ft_text_height r10)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'gui/font_open)
	;inputs
	;r0 = font name
	;r1 = point size
	;outputs
	;r0 = 0 if error, else font cache entry
	;trashes
	;all

	(def-struct 'local)
		(long 'font)
		(long 'points)
		(long 'handle)
	(def-struct-end)

	;save inputs
	(vp-alloc local_size)
	(assign '(r0 r1) '((rsp local_font) (rsp local_points)))

	;get font statics
	(f-bind 'gui_font 'statics r4)

	;search font list
	(loop-flist r4 ft_statics_font_flist r4 r4)
		(vp-cpy-ir rsp local_points r0)
		(vp-cpy-ir r4 ft_font_points r1)
		(continueif '(r0 != r1))
		(f-call 'sys_string 'compare '((& r4 ft_font_name) (rsp local_font)) '(r0))
	(loop-until '(r0 == 0))

	;did we find it ?
	(vp-cpy-rr r4 r0)
	(vpif '(r4 == 0))
		;no so try open it
		(f-call 'sys_task 'callback '(($ kernel_callback) rsp))
		(vp-cpy-ir rsp local_handle r0)
	(endif)
	(vp-free local_size)
	(vp-ret)

(vp-label 'kernel_callback)
	;inputs
	;r0 = user data
	;trashes
	;all

	(def-struct 'fopen)
		(ptr 'user)
		(ptr 'entry)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack
	(vp-cpy-rr rsp r1)
	(vp-alloc fopen_size)
	(vp-and-cr -16 rsp)
	(vp-cpy-ri r0 rsp fopen_user)
	(vp-cpy-ri r1 rsp fopen_old_stack)

	;get font statics
	(f-bind 'gui_font 'statics r4)

	;search font list
	(vp-cpy-ir rsp fopen_user r13)
	(loop-flist r4 ft_statics_font_flist r4 r4)
		(vp-cpy-ir r13 local_points r0)
		(vp-cpy-ir r4 ft_font_points r1)
		(continueif '(r0 != r1))
		(f-call 'sys_string 'compare '((& r4 ft_font_name) (r13 local_font)) '(r0))
	(loop-until '(r0 == 0))

	;did we find it ?
	(vp-cpy-rr r4 r0)
	(vpif '(r4 == 0))
		(sdl-call 'sdl 'ttf_open_font '((r13 local_font) (r13 local_points)))
		(vp-cpy-ir rsp fopen_user r13)
		(vpif '(r0 != 0))
			(vp-cpy-rr r0 r4)
			(f-call 'sys_string 'length '((r13 local_font)) '(_ r1))
			(f-call 'sys_mem 'alloc '((& r1 (add ft_font_size 1))) '(r12 _))
			(vp-cpy-ri r12 rsp fopen_entry)

			(vp-cpy-ir r13 local_points r0)
			(vp-cpy-ri r0 r12 ft_font_points)
			(vp-cpy-ri r4 r12 ft_font_handle)
			(f-call 'sys_string 'copy '((r13 local_font) (& r12 ft_font_name)))

			;fill in ascent, descent and height
			(sdl-call 'sdl 'ttf_font_ascent '((r12 ft_font_handle)))
			(vp-cpy-ir rsp fopen_entry r12)
			(vp-cpy-ri r0 r12 ft_font_ascent)

			(sdl-call 'sdl 'ttf_font_descent '((r12 ft_font_handle)))
			(vp-cpy-ir rsp fopen_entry r12)
			(vp-cpy-ri r0 r12 ft_font_descent)

			(sdl-call 'sdl 'ttf_font_height '((r12 ft_font_handle)))
			(vp-cpy-ir rsp fopen_entry r12)
			(vp-cpy-ri r0 r12 ft_font_height)

			(vp-cpy-rr r12 r0)
			(f-bind 'gui_font 'statics r4)
			(ln-add-fnode r4 ft_statics_font_flist r0 r1)

			(vp-cpy-ir rsp fopen_user r13)
		(endif)
	(endif)
	(vp-cpy-ri r0 r13 local_handle)

	(vp-cpy-ir rsp fopen_old_stack rsp)
	(vp-ret)

(def-func-end)

(def-func 'gui/font_text)
	;inputs
	;r0 = font entry
	;r1 = string object
	;outputs
	;r0 = 0 if error, else text entry
	;trashes
	;all

	(def-struct 'local)
		(ptr 'font)
		(ptr 'text)
		(ptr 'bucket)
		(ulong 'handle)
		(long 'surface)
		(long 'width)
		(long 'height)
	(def-struct-end)

	;save inputs
	(vp-lea-i r1 string_data r2)
	(vp-alloc local_size)
	(assign '(r0 r2) '((rsp local_font) (rsp local_text)))

	;get font statics
	(f-bind 'gui_font 'statics r4)

	;string hash to bucket
	(v-call 'string 'hash '(r1) '(_ r0))
	(vp-cpy-cr ft_num_buckets r1)
	(vp-xor-rr r2 r2)
	(vp-div-rrr r1 r2 r0)
	(vp-shl-cr (log2 ptr_size) r2)
	(vp-lea-d r4 r2 r4)
	(vp-cpy-ri r4 rsp local_bucket)

	;search bucket
	(loop-flist r4 0 r4 r5)
		(vp-cpy-ir rsp local_font r0)
		(vp-cpy-ir r4 ft_text_font r1)
		(continueif '(r0 != r1))
		(f-call 'sys_string 'compare '((& r4 ft_text_name) (rsp local_text)) '(r0))
	(loop-until '(r0 == 0))

	;did we find it ?
	(vp-cpy-rr r4 r0)
	(vpif '(r4 == 0))
		;no so try create it
		(f-call 'sys_task 'callback '(($ kernel_callback) rsp))
		(vp-cpy-ir rsp local_handle r0)
	(else)
		;yes so LRU to front
		(ln-remove-fnode r4 r5)
		(vp-cpy-ir rsp local_bucket r4)
		(ln-add-fnode r4 0 r0 r1)
	(endif)

	(vp-free local_size)
	(vp-ret)

(vp-label 'kernel_callback)
	;inputs
	;r0 = user data
	;trashes
	;all

	(def-struct 'ftext)
		(ptr 'user)
		(ptr 'entry)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack
	(vp-cpy-rr rsp r1)
	(vp-alloc ftext_size)
	(vp-and-cr -16 rsp)
	(vp-cpy-ri r0 rsp ftext_user)
	(vp-cpy-ri r1 rsp ftext_old_stack)

	(vp-cpy-rr r0 r13)
	(vp-cpy-ir r0 local_font r0)
	(sdl-call 'sdl 'ttf_render_utf8_blended '((r0 ft_font_handle) (r13 local_text) 0xffffff))
	(vp-cpy-ir rsp ftext_user r13)
	(vpif '(r0 != 0))
		(vp-cpy-ri r0 r13 local_surface)
		(vp-cpy-ir-ui r0 sdl_surface_w r9)
		(vp-cpy-ir-ui r0 sdl_surface_h r10)
		(vp-cpy-ri r9 r13 local_width)
		(vp-cpy-ri r10 r13 local_height)

		;create texture
		(f-bind 'gui_gui 'statics r0)
		(sdl-call 'sdl 'sdl_create_texture_from_surface '((r0 gui_statics_renderer) (r13 local_surface)))
		(vp-cpy-ir rsp ftext_user r13)
		(vpif '(r0 != 0))
			(vp-cpy-rr r0 r4)

			(f-call 'sys_string 'length '((r13 local_text)) '(_ r1))
			(f-call 'sys_mem 'alloc '((& r1 (add ft_text_size 1))) '(r12 _))
			(vp-cpy-ri r12 rsp ftext_entry)

			(vp-cpy-ir r13 local_font r0)
			(vp-cpy-ri r0 r12 ft_text_font)
			(vp-cpy-ri r4 r12 ft_text_texture)
			(f-call 'sys_string 'copy '((r13 local_text) (& r12 ft_text_name)))

			;fill in width and height
			(vp-cpy-ir r13 local_width r9)
			(vp-cpy-ir r13 local_height r10)
			(vp-cpy-ri r9 r12 ft_text_width)
			(vp-cpy-ri r10 r12 ft_text_height)

			;texture blend mode
			(sdl-call 'sdl 'sdl_set_texture_blend_mode '((r12 ft_text_texture) SDL_BLENDMODE_BLEND))
			(vp-cpy-ir rsp ftext_entry r0)

			(vp-cpy-ir r13 local_bucket r4)
			(ln-add-fnode r4 0 r0 r1)
		(endif)
		(vp-cpy-ri r0 r13 local_handle)
		(sdl-call 'sdl 'sdl_free_surface '((r13 local_surface)))
		(vp-cpy-ir r13 local_handle r0)
	(endif)
	(vp-cpy-ri r0 r13 local_handle)

	(vp-cpy-ir rsp ftext_old_stack rsp)
	(vp-ret)

(def-func-end)
