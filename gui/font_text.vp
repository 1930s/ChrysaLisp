(import 'inc/func.inc)
(import 'inc/font.inc)
(import 'inc/string.inc)
(import 'inc/sdl2.inc)
(import 'class/class_string.inc)

(def-func 'gui/font_text)
	;inputs
	;r0 = font entry
	;r1 = string object
	;outputs
	;r0 = 0 if error, else text entry
	;trashes
	;all but r4

	(def-struct 'local)
		(ptr 'local_font)
		(ptr 'local_text)
		(ptr 'local_bucket)
		(ulong 'local_handle)
		(long 'local_surface)
		(long 'local_width)
		(long 'local_height)
	(def-struct-end)

	;save inputs
	(vp-lea-i r1 string_data r2)
	(vp-sub-cr local_size r4)
	(set-src '(r0 r2))
	(set-dst '((r4 local_font) (r4 local_text)))
	(map-src-to-dst)

	;get font statics
	(f-bind 'gui_font 'statics r5)

	;string hash to bucket
	(v-call 'string 'hash '(r1) '(r0))
	(vp-cpy-cr ft_num_buckets r1)
	(vp-xor-rr r2 r2)
	(vp-div r1 r2 r0)
	(vp-lea-i r5 r2 * ptr_size r5)
	(vp-cpy-ri r5 r4 local_bucket)

	;search bucket
	(loop-flist-forward r5 0 r5 r6)
		(vp-cpy-ir r4 local_font r0)
		(continueif '(r0 != (r5 ft_text_font)))
		(f-call 'sys_string 'compare '((& r5 ft_text_name) (r4 local_text)) '(r0))
	(loop-until '(r0 == 0))

	;did we find it ?
	(vp-cpy-rr r5 r0)
	(vpif '(r5 == 0))
		;no so try create it
		(f-call 'sys_task 'callback '(($ kernel_callback) r4))
		(vp-cpy-ir r4 local_handle r0)
	(else)
		;yes so LRU to front
		(ln-remove-fnode r5 r6)
		(vp-cpy-ir r4 local_bucket r5)
		(ln-add-fnode r5 r0 r1)
	(endif)

	(vp-add-cr local_size r4)
	(vp-ret)

(vp-label 'kernel_callback)
	;inputs
	;r0 = user data
	;trashes
	;all but r4

	;align stack
	(vp-cpy-rr r4 r15)
	(vp-and-cr -16 r4)

	;save input
	(vp-cpy-rr r0 r14)

	(vp-cpy-ir r14 local_font r0)
	((ttf-render-utf8-blended '((r0 ft_font_handle) , (r14 local_text) , 0xffffff))
	(vpif '(r0 != 0))
		(vp-cpy-ri r0 r14 local_surface)
		(vp-cpy-ir-ui r0 sdl_surface_w r10)
		(vp-cpy-ir-ui r0 sdl_surface_h r11)
		(vp-cpy-ri r10 r14 local_width)
		(vp-cpy-ri r11 r14 local_height)

		;create texture
		(f-bind 'gui_gui 'statics r0)
		(sdl-create-texture-from-surface '((r0 gui_statics_renderer) , (r14 local_surface)))
		(vpif '(r0 != 0))
			(vp-cpy-rr r0 r5)

			(f-call 'sys_string 'length '((r14 local_text)) '(r1))
			(f-call 'sys_mem 'alloc '((& r1 (add ft_text_size 1))) '(r13 _))
			(assert '(r0 != 0))

			(vp-cpy-ir r14 local_font r0)
			(vp-cpy-ri r0 r13 ft_text_font)
			(vp-cpy-ri r5 r13 ft_text_texture)
			(f-call 'sys_string 'copy '((r14 local_text) (& r13 ft_text_name)) '(_ _))

			;fill in width and height
			(vp-cpy-ir r14 local_width r10)
			(vp-cpy-ir r14 local_height r11)
			(vp-cpy-ri r10 r13 ft_text_width)
			(vp-cpy-ri r11 r13 ft_text_height)

			;texture blend mode
			(sdl-set-texture-blend-mode '((r13 ft_text_texture) , SDL_BLENDMODE_BLEND))

			(vp-cpy-rr r13 r0)
			(vp-cpy-ir r14 local_bucket r5)
			(ln-add-fnode r5 r0 r1)
		(endif)
		(vp-cpy-ri r0 r14 local_handle)
		(sdl-free-surface '((r14 local_surface)))
		(vp-cpy-ir r14 local_handle r0)
	(endif)
	(vp-cpy-ri r0 r14 local_handle)

	(vp-cpy-rr r15 r4)
	(vp-ret)

(def-func-end)
