(import 'sys/func.inc)
(import 'gui/sdl2.inc)

(def-func 'gui/ctx_blit)
	;inputs
	;r0 = ctx
	;r1 = texture
	;r2 = color mod
	;r8 = x
	;r9 = y
	;r10 = width
	;r11 = height
	;trashes
	;all but rsp

	(def-struct 'local)
		(struct 'drect 'sdl_rect)
		(struct 'srect 'sdl_rect)
		(struct 'clip_rect 'sdl_rect)
		(ptr 'ctx)
		(ulong 'texture)
		(ptr 'dirty_rect)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack to 16 bytes for SDl
	(vp-cpy-rr rsp r15)
	(vp-alloc-stack local_size)
	(vp-and-cr -16 rsp)
	(vp-cpy-ri r15 rsp local_old_stack)

	;save draw rectangle info
	(vp-cpy-ri r0 rsp local_ctx)
	(vp-cpy-ri r1 rsp local_texture)
	(vp-cpy-ir-i r0 gui_ctx_x r12)
	(vp-cpy-ir-i r0 gui_ctx_y r13)
	(vp-add-rr r12 r8)
	(vp-add-rr r13 r9)
	(vp-cpy-ri-i r8 rsp (add local_drect sdl_rect_x))
	(vp-cpy-ri-i r9 rsp (add local_drect sdl_rect_y))
	(vp-cpy-ri-i r10 rsp (add local_drect sdl_rect_w))
	(vp-cpy-ri-i r11 rsp (add local_drect sdl_rect_h))
	(vp-xor-rr r8 r8)
	(vp-cpy-ri-i r8 rsp (add local_srect sdl_rect_x))
	(vp-cpy-ri-i r8 rsp (add local_srect sdl_rect_y))
	(vp-cpy-ri-i r10 rsp (add local_srect sdl_rect_w))
	(vp-cpy-ri-i r11 rsp (add local_srect sdl_rect_h))

	;set the color mod
	(vp-cpy-rr r2 r3)
	(vp-cpy-rr r2 r1)
	(vp-shr-cr 16 r3)
	(vp-shr-cr 8 r2)
	(vp-and-cr 0xff r3)
	(vp-and-cr 0xff r2)
	(vp-and-cr 0xff r1)
	(sdl-set-texture-color-mod '((rsp local_texture) r3 r2 r1))

	;for each rect on the dirty region
	(vp-cpy-ir rsp local_ctx r0)
	(vp-cpy-ir r0 gui_ctx_dirty_region r0)
	(loop-flist r0 0 r0 r0)
		(vp-cpy-ri r0 rsp local_dirty_rect)

		;continue if out of bounds
		(vp-cpy-ir-i r0 gui_rect_x r8)
		(vp-cpy-ir-i r0 gui_rect_y r9)
		(vp-cpy-ir-i r0 gui_rect_x1 r10)
		(vp-cpy-ir-i r0 gui_rect_y1 r11)
		(vp-cpy-ir-i rsp (add local_drect sdl_rect_x) r12)
		(continueif '(r10 <= r12))
		(vp-cpy-ir-i rsp (add local_drect sdl_rect_y) r13)
		(continueif '(r11 <= r13))
		(vp-cpy-ir-i rsp (add local_drect sdl_rect_w) r14)
		(vp-add-rr r12 r14)
		(continueif '(r8 >= r14))
		(vp-cpy-ir-i rsp (add local_drect sdl_rect_h) r15)
		(vp-add-rr r13 r15)
		(continueif '(r9 >= r15))

		;set clip region to this region
		(vp-sub-rr r8 r10)
		(vp-sub-rr r9 r11)
		(vp-cpy-ri-i r8 rsp (add local_clip_rect sdl_rect_x))
		(vp-cpy-ri-i r9 rsp (add local_clip_rect sdl_rect_y))
		(vp-cpy-ri-i r10 rsp (add local_clip_rect sdl_rect_w))
		(vp-cpy-ri-i r11 rsp (add local_clip_rect sdl_rect_h))
		(vp-cpy-ir rsp local_ctx r0)
		(sdl-render-set-clip-rect '((r0 gui_ctx_sdl_ctx) (& rsp local_clip_rect)))

		;blit the texture
		(vp-cpy-ir rsp local_ctx r0)
		(sdl-render-copy '((r0 gui_ctx_sdl_ctx) (rsp local_texture) (& rsp local_srect) (& rsp local_drect)))

		(vp-cpy-ir rsp local_dirty_rect r0)
	(loop-end)

	(vp-cpy-ir rsp local_old_stack rsp)
	(vp-ret)

(def-func-end)

(def-func 'gui/ctx_box)
	;inputs
	;r0 = ctx
	;r8 = x
	;r9 = y
	;r10 = width
	;r11 = height
	;trashes
	;all but rsp

	(def-struct 'local)
		(struct 'rect 'sdl_rect)
		(struct 'clip_rect 'sdl_rect)
		(ptr 'ctx)
		(ptr 'dirty_rect)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack to 16 bytes for SDl
	(vp-cpy-rr rsp r15)
	(vp-alloc-stack local_size)
	(vp-and-cr -16 rsp)
	(vp-cpy-ri r15 rsp local_old_stack)

	;save draw rectangle info
	(vp-cpy-ri r0 rsp local_ctx)
	(vp-cpy-ir-i r0 gui_ctx_x r12)
	(vp-cpy-ir-i r0 gui_ctx_y r13)
	(vp-add-rr r12 r8)
	(vp-add-rr r13 r9)
	(vp-cpy-ri-i r8 rsp (add local_rect sdl_rect_x))
	(vp-cpy-ri-i r9 rsp (add local_rect sdl_rect_y))
	(vp-cpy-ri-i r10 rsp (add local_rect sdl_rect_w))
	(vp-cpy-ri-i r11 rsp (add local_rect sdl_rect_h))

	;for each rect on the dirty region
	(vp-cpy-ir r0 gui_ctx_dirty_region r0)
	(loop-flist r0 0 r0 r0)
		(vp-cpy-ri r0 rsp local_dirty_rect)

		;continue if out of bounds
		(vp-cpy-ir-i r0 gui_rect_x r8)
		(vp-cpy-ir-i r0 gui_rect_y r9)
		(vp-cpy-ir-i r0 gui_rect_x1 r10)
		(vp-cpy-ir-i r0 gui_rect_y1 r11)
		(vp-cpy-ir-i rsp (add local_drect sdl_rect_x) r12)
		(continueif '(r10 <= r12))
		(vp-cpy-ir-i rsp (add local_drect sdl_rect_y) r13)
		(continueif '(r11 <= r13))
		(vp-cpy-ir-i rsp (add local_drect sdl_rect_w) r14)
		(vp-add-rr r12 r14)
		(continueif '(r8 >= r14))
		(vp-cpy-ir-i rsp (add local_drect sdl_rect_h) r15)
		(vp-add-rr r13 r15)
		(continueif '(r9 >= r15))

		;set clip region to this region
		(vp-sub-rr r8 r10)
		(vp-sub-rr r9 r11)
		(vp-cpy-ri-i r8 rsp (add local_clip_rect sdl_rect_x))
		(vp-cpy-ri-i r9 rsp (add local_clip_rect sdl_rect_y))
		(vp-cpy-ri-i r10 rsp (add local_clip_rect sdl_rect_w))
		(vp-cpy-ri-i r11 rsp (add local_clip_rect sdl_rect_h))
		(vp-cpy-ir rsp local_ctx r0)
		(sdl-render-set-clip-rect '((r0 gui_ctx_sdl_ctx) (& rsp local_clip_rect)))

		;draw the rectangle
		(vp-cpy-ir rsp local_ctx r0)
		(sdl-render-draw-rect '((r0 gui_ctx_sdl_ctx) (& rsp local_rect)))

		(vp-cpy-ir rsp local_dirty_rect r0)
	(loop-end)

	(vp-cpy-ir rsp local_old_stack rsp)
	(vp-ret)

(def-func-end)

(def-func 'gui/ctx_brighter)
	;inputs
	;r1 = color
	;inputs
	;r1 = brighter color
	;trashes
	;r2, r3

	(vp-cpy-rr r1 r2)
	(vp-cpy-cr 0xff000000 r3)
	(vp-and-rr r3 r1)
	(vp-and-cr 0x00fefefe r2)
	(vp-shr-cr 1 r2)
	(vp-add-cr 0x00808080 r2)
	(vp-add-rr r2 r1)
	(vp-ret)

(def-func-end)

(def-func 'gui/ctx_darker)
	;inputs
	;r1 = color
	;inputs
	;r1 = darker color
	;trashes
	;r2, r3

	(vp-cpy-rr r1 r2)
	(vp-cpy-cr 0xff000000 r3)
	(vp-and-rr r3 r1)
	(vp-and-cr 0x00fefefe r2)
	(vp-shr-cr 1 r2)
	(vp-add-rr r2 r1)
	(vp-ret)

(def-func-end)

(def-func 'gui/ctx_filled_box)
	;inputs
	;r0 = ctx
	;r8 = x
	;r9 = y
	;r10 = width
	;r11 = height
	;trashes
	;all but rsp

	(def-struct 'local)
		(struct 'rect 'sdl_rect)
		(struct 'clip_rect 'sdl_rect)
		(ptr 'ctx)
		(ptr 'dirty_rect)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack to 16 bytes for SDl
	(vp-cpy-rr rsp r15)
	(vp-alloc-stack local_size)
	(vp-and-cr -16 rsp)
	(vp-cpy-ri r15 rsp local_old_stack)

	;save draw rectangle info
	(vp-cpy-ri r0 rsp local_ctx)
	(vp-cpy-ir-i r0 gui_ctx_x r12)
	(vp-cpy-ir-i r0 gui_ctx_y r13)
	(vp-add-rr r12 r8)
	(vp-add-rr r13 r9)
	(vp-cpy-ri-i r8 rsp (add local_rect sdl_rect_x))
	(vp-cpy-ri-i r9 rsp (add local_rect sdl_rect_y))
	(vp-cpy-ri-i r10 rsp (add local_rect sdl_rect_w))
	(vp-cpy-ri-i r11 rsp (add local_rect sdl_rect_h))

	;for each rect on the dirty region
	(vp-cpy-ir r0 gui_ctx_dirty_region r0)
	(loop-flist r0 0 r0 r0)
		(vp-cpy-ri r0 rsp local_dirty_rect)

		;continue if out of bounds
		(vp-cpy-ir-i r0 gui_rect_x r8)
		(vp-cpy-ir-i r0 gui_rect_y r9)
		(vp-cpy-ir-i r0 gui_rect_x1 r10)
		(vp-cpy-ir-i r0 gui_rect_y1 r11)
		(vp-cpy-ir-i rsp (add local_drect sdl_rect_x) r12)
		(continueif '(r10 <= r12))
		(vp-cpy-ir-i rsp (add local_drect sdl_rect_y) r13)
		(continueif '(r11 <= r13))
		(vp-cpy-ir-i rsp (add local_drect sdl_rect_w) r14)
		(vp-add-rr r12 r14)
		(continueif '(r8 >= r14))
		(vp-cpy-ir-i rsp (add local_drect sdl_rect_h) r15)
		(vp-add-rr r13 r15)
		(continueif '(r9 >= r15))

		;set clip region to this region
		(vp-sub-rr r8 r10)
		(vp-sub-rr r9 r11)
		(vp-cpy-ri-i r8 rsp (add local_clip_rect sdl_rect_x))
		(vp-cpy-ri-i r9 rsp (add local_clip_rect sdl_rect_y))
		(vp-cpy-ri-i r10 rsp (add local_clip_rect sdl_rect_w))
		(vp-cpy-ri-i r11 rsp (add local_clip_rect sdl_rect_h))
		(vp-cpy-ir rsp local_ctx r0)
		(sdl-render-set-clip-rect '((r0 gui_ctx_sdl_ctx) (& rsp local_clip_rect)))

		;draw the rectangle
		(vp-cpy-ir rsp local_ctx r0)
		(sdl-render-fill-rect '((r0 gui_ctx_sdl_ctx) (& rsp local_rect)))

		(vp-cpy-ir rsp local_dirty_rect r0)
	(loop-end)

	(vp-cpy-ir rsp local_old_stack rsp)
	(vp-ret)

(def-func-end)

(def-func 'gui/ctx_panel)
	;inputs
	;r0 = ctx object
	;r1 = color
	;r2 = flags
	;r3 = depth
	;r8 = x
	;r9 = y
	;r10 = width
	;r11 = height
	;trashes
	;all rsp

	(def-struct 'local)
		(ptr 'ctx)
		(long 'flags)
		(uint 'color)
		(int 'depth)
		(int 'x)
		(int 'y)
		(int 'w)
		(int 'h)
	(def-struct-end)

	;save inputs
	(vp-alloc-stack local_size)
	(assign '(r0 r1 r2 r3) '((rsp local_ctx) (rsp local_color i) (rsp local_flags) (rsp local_depth i)))
	(assign '(r8 r9 r10 r11) '((rsp local_x i) (rsp local_y i) (rsp local_w i) (rsp local_h i)))

	(vpif '(r2 != 0))
		;fill middle
		(f-call 'gui_ctx 'set_color '(r0 r1))

		(assign '((rsp local_x i) (rsp local_y i) (rsp local_w i) (rsp local_h i) (rsp local_depth i)) '(r8 r9 r10 r11 r12))
		(vp-add-rr r12 r8)
		(vp-add-rr r12 r9)
		(vp-shl-cr 1 r12)
		(vp-sub-rr r12 r10)
		(vp-sub-rr r12 r11)
		(f-call 'gui_ctx 'filled_box '((rsp local_ctx) r8 r9 r10 r11))
	(endif)

	(vp-cpy-ir-i rsp local_depth r12)
	(vpif '(r12 > 0))
		;brighter color
		(f-call 'gui_ctx 'brighter '((rsp local_color ui)) '(r1))
		(f-call 'gui_ctx 'set_color '((rsp local_ctx) r1))

		;fill left edge and top
		(assign '((rsp local_x i) (rsp local_y i) (rsp local_w i) (rsp local_depth i)) '(r8 r9 r10 r11))
		(f-call 'gui_ctx 'filled_box '((rsp local_ctx) r8 r9 r10 r11))

		(assign '((rsp local_x i) (rsp local_y i) (rsp local_h i) (rsp local_depth i)) '(r8 r9 r11 r10))
		(vp-add-rr r10 r9)
		(vp-sub-rr r10 r11)
		(f-call 'gui_ctx 'filled_box '((rsp local_ctx) r8 r9 r10 r11))

		;darker color
		(f-call 'gui_ctx 'darker '((rsp local_color ui)) '(r1))
		(f-call 'gui_ctx 'set_color '((rsp local_ctx) r1))

		;fill bottom edge and right
		(assign '((rsp local_x i) (rsp local_y i) (rsp local_w i) (rsp local_h i) (rsp local_depth i)) '(r8 r9 r10 r11 r12))
		(vp-add-rr r12 r8)
		(vp-sub-rr r12 r10)
		(vp-add-rr r11 r9)
		(vp-sub-rr r12 r9)
		(f-call 'gui_ctx 'filled_box '((rsp local_ctx) r8 r9 r10 r12))

		(assign '((rsp local_x i) (rsp local_y i) (rsp local_w i) (rsp local_h i) (rsp local_depth i)) '(r8 r9 r10 r11 r12))
		(vp-add-rr r10 r8)
		(vp-sub-rr r12 r8)
		(vp-add-rr r12 r9)
		(vp-sub-rr r12 r11)
		(vp-sub-rr r12 r11)
		(f-call 'gui_ctx 'filled_box '((rsp local_ctx) r8 r9 r12 r11))
	(else)
		;sunken panel
		(vp-mul-cr -1 r12)
		(vp-cpy-ri-i r12 rsp local_depth)

		;darker color
		(f-call 'gui_ctx 'darker '((rsp local_color ui)) '(r1))
		(f-call 'gui_ctx 'set_color '((rsp local_ctx) r1))

		;fill left edge and top
		(assign '((rsp local_x i) (rsp local_y i) (rsp local_w i) (rsp local_depth i)) '(r8 r9 r10 r11))
		(vp-sub-rr r11 r10)
		(f-call 'gui_ctx 'filled_box '((rsp local_ctx) r8 r9 r10 r11))

		(assign '((rsp local_x i) (rsp local_y i) (rsp local_h i) (rsp local_depth i)) '(r8 r9 r11 r10))
		(vp-add-rr r10 r9)
		(vp-sub-rr r10 r11)
		(vp-sub-rr r10 r11)
		(f-call 'gui_ctx 'filled_box '((rsp local_ctx) r8 r9 r10 r11))

		;brighter color
		(f-call 'gui_ctx 'brighter '((rsp local_color ui)) '(r1))
		(f-call 'gui_ctx 'set_color '((rsp local_ctx) r1))

		;fill bottom edge and right
		(assign '((rsp local_x i) (rsp local_y i) (rsp local_w i) (rsp local_h i) (rsp local_depth i)) '(r8 r9 r10 r11 r12))
		(vp-add-rr r11 r9)
		(vp-sub-rr r12 r9)
		(f-call 'gui_ctx 'filled_box '((rsp local_ctx) r8 r9 r10 r12))

		(assign '((rsp local_x i) (rsp local_y i) (rsp local_w i) (rsp local_h i) (rsp local_depth i)) '(r8 r9 r10 r11 r12))
		(vp-add-rr r10 r8)
		(vp-sub-rr r12 r8)
		(vp-sub-rr r12 r11)
		(f-call 'gui_ctx 'filled_box '((rsp local_ctx) r8 r9 r12 r11))
	(endif)

	(vp-free-stack local_size)
	(vp-ret)

(def-func-end)

(def-func 'gui/ctx_set_color)
	;inputs
	;r0 = ctx
	;r1 = color
	;trashes
	;all but rsp

	(def-struct 'local)
		(ptr 'old_stack)
	(def-struct-end)

	;align stack to 16 bytes for SDl
	(vp-cpy-rr rsp r15)
	(vp-alloc-stack local_size)
	(vp-and-cr -16 rsp)
	(vp-cpy-ri r15 rsp local_old_stack)

	(vp-cpy-rr r1 r8)
	(vp-cpy-rr r1 r9)
	(vp-cpy-rr r1 r10)
	(vp-cpy-rr r1 r11)
	(vp-shr-cr 24 r11)
	(vp-shr-cr 16 r8)
	(vp-shr-cr 8 r9)
	(vp-and-cr 0xff r8)
	(vp-and-cr 0xff r9)
	(vp-and-cr 0xff r10)
	(vp-and-cr 0xff r11)
	(sdl-set-render-draw-color '((r0 gui_ctx_sdl_ctx) r8 r9 r10 r11))

	(vp-cpy-ir rsp local_old_stack rsp)
	(vp-ret)

(def-func-end)
