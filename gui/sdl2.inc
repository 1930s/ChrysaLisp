(import 'gui/class.inc)

(def-class 'sdl)
(dec-method 'sdl_set_main_ready nil 'virtual (abi-args 0) '(r0))
(dec-method 'sdl_init nil 'virtual (abi-args 1) '(r0))
(dec-method 'sdl_get_error nil 'virtual (abi-args 0) '(r0))
(dec-method 'sdl_quit nil 'virtual (abi-args 0) '(r0))
(dec-method 'sdl_create_window nil 'virtual (abi-args 6) '(r0))
(dec-method 'sdl_create_window_and_renderer nil 'virtual (abi-args 5) '(r0))
(dec-method 'sdl_destroy_window nil 'virtual (abi-args 1) '(r0))
(dec-method 'sdl_delay nil 'virtual (abi-args 1) '(r0))
(dec-method 'sdl_create_renderer nil 'virtual (abi-args 3) '(r0))
(dec-method 'sdl_set_render_draw_color nil 'virtual (abi-args 5) '(r0))
(dec-method 'sdl_render_fill_rect nil 'virtual (abi-args 2) '(r0))
(dec-method 'sdl_render_present nil 'virtual (abi-args 1) '(r0))
(dec-method 'sdl_render_set_clip_rect nil 'virtual (abi-args 2) '(r0))
(dec-method 'sdl_set_render_draw_blend_mode nil 'virtual (abi-args 2) '(r0))
(dec-method 'sdl_poll_event nil 'virtual (abi-args 1) '(r0))
(dec-method 'sdl_render_draw_rect nil 'virtual (abi-args 2) '(r0))
(dec-method 'sdl_free_surface nil 'virtual (abi-args 1) '(r0))
(dec-method 'sdl_create_texture_from_surface nil 'virtual (abi-args 2) '(r0))
(dec-method 'sdl_destroy_texture nil 'virtual (abi-args 1) '(r0))
(dec-method 'sdl_render_copy nil 'virtual (abi-args 4) '(r0))
(dec-method 'sdl_set_texture_blend_mode nil 'virtual (abi-args 2) '(r0))
(dec-method 'sdl_set_texture_color_mod nil 'virtual (abi-args 4) '(r0))
(dec-method 'sdl_create_rgb_surface_from nil 'virtual (abi-args 9) '(r0))
(dec-method 'ttf_init nil 'virtual (abi-args 0) '(r0))
(dec-method 'ttf_quit nil 'virtual (abi-args 0) '(r0))
(dec-method 'ttf_open_font nil 'virtual (abi-args 2) '(r0))
(dec-method 'ttf_close_font nil 'virtual (abi-args 1) '(r0))
(dec-method 'ttf_size_utf8 nil 'virtual (abi-args 4) '(r0))
(dec-method 'ttf_font_ascent nil 'virtual (abi-args 1) '(r0))
(dec-method 'ttf_font_descent nil 'virtual (abi-args 1) '(r0))
(dec-method 'ttf_font_height nil 'virtual (abi-args 1) '(r0))
(dec-method 'ttf_render_utf8_blended nil 'virtual (abi-args 3) '(r0))

(defcfun sdl-call (_1 _2 &optional _3 _4 _5)
	;_1 = class name
	;_2 = member name
	;_3 = in parameters
	;_4 = out parameters
	;_5 = dispatch reg
	(setd _5 r14)
	(bind '(v m) (virtual-method-lookup _1 _2 0))
	(defq x (list) s (elem 2 m))
	(if (eql (elem 1 m) 'static)
		(throw "Abi methods must be virtual !" (list _1 _2)))
	(if (find _5 s)
		(throw "Dispatch register conflicts with arg !" (list _5 s)))
	(assign _3 s)
	(when (gt (defq ls (length s)) (defq la (length (abi-args))))
		(setq x (reduce-rev (lambda (x y) (push x y)) (slice la ls s) (list))))
	(f-bind 'gui_gui 'statics _5)
	(vp-cpy-ir _5 gui_statics_sdl_funcs _5)
	(vp-call-abi _5 v x)
	(if _4 (assign (elem 3 m) _4)))

(defcvar 'SDL_INIT_TIMER 0x00000001)
(defcvar 'SDL_INIT_AUDIO 0x00000010)
(defcvar 'SDL_INIT_VIDEO 0x00000020)
(defcvar 'SDL_INIT_JOYSTICK 0x00000200)
(defcvar 'SDL_INIT_HAPTIC 0x00001000)
(defcvar 'SDL_INIT_GAMECONTROLLER 0x00002000)
(defcvar 'SDL_INIT_EVENTS 0x00004000)
(defcvar 'SDL_INIT_NOPARACHUTE 0x00100000)
(defcvar 'SDL_INIT_EVERYTHING (bit-or SDL_INIT_TIMER SDL_INIT_AUDIO SDL_INIT_VIDEO SDL_INIT_EVENTS SDL_INIT_JOYSTICK SDL_INIT_HAPTIC SDL_INIT_GAMECONTROLLER))

(defcvar 'SDL_WINDOW_FULLSCREEN 0x00000001)
(defcvar 'SDL_WINDOW_OPENGL 0x00000002)
(defcvar 'SDL_WINDOW_SHOWN 0x00000004)
(defcvar 'SDL_WINDOW_HIDDEN 0x00000008)
(defcvar 'SDL_WINDOW_BORDERLESS 0x00000010)
(defcvar 'SDL_WINDOW_RESIZABLE 0x00000020)
(defcvar 'SDL_WINDOW_MINIMIZED 0x00000040)
(defcvar 'SDL_WINDOW_MAXIMIZED 0x00000080)
(defcvar 'SDL_WINDOW_INPUT_GRABBED 0x00000100)
(defcvar 'SDL_WINDOW_INPUT_FOCUS 0x00000200)
(defcvar 'SDL_WINDOW_MOUSE_FOCUS 0x00000400)
(defcvar 'SDL_WINDOW_FULLSCREEN_DESKTOP (bit-or SDL_WINDOW_FULLSCREEN 0x00001000))
(defcvar 'SDL_WINDOW_FOREIGN 0x00000800)
(defcvar 'SDL_WINDOW_ALLOW_HIGHDPI 0x00002000)

(defcvar 'SDL_WINDOWPOS_UNDEFINED_MASK 0x1FFF0000)
(defcvar 'SDL_WINDOWPOS_UNDEFINED SDL_WINDOWPOS_UNDEFINED_MASK)
(defcvar 'SDL_WINDOWPOS_CENTERED_MASK 0x2FFF0000)

(defcvar 'SDL_RENDERER_SOFTWARE 0x00000001)
(defcvar 'SDL_RENDERER_ACCELERATED 0x00000002)
(defcvar 'SDL_RENDERER_PRESENTVSYNC 0x00000004)
(defcvar 'SDL_RENDERER_TARGETTEXTURE 0x00000008)

(defcvar 'SDL_BLENDMODE_NONE 0)
(defcvar 'SDL_BLENDMODE_BLEND 1)
(defcvar 'SDL_BLENDMODE_ADD 2)
(defcvar 'SDL_BLENDMODE_MOD 3)

(def-struct 'sdl_rect)
	(int 'x)
	(int 'y)
	(int 'w)
	(int 'h)
(def-struct-end)

(def-struct 'sdl_surface)
	(int 'flags)
	(long 'format)
	(int 'w)
	(int 'h)
	(int 'pitch)
	(long 'pixels)
	(long 'userdata)
	(int 'locked)
	(long 'lockdata)
	(struct 'clip 'sdl_rect)
	(long 'map)
	(int 'obj)
(def-struct-end)

(defcvar 'SDL_RELEASED 0)
(defcvar 'SDL_PRESSED 1)

(defcvar 'SDL_QUIT 0x100)
(defcvar 'SDL_KEYDOWN 0x300)
(defcvar 'SDL_KEYUP 0x301)
(defcvar 'SDL_MOUSEMOTION 0x400)
(defcvar 'SDL_MOUSEBUTTONDOWN 0x401)
(defcvar 'SDL_MOUSEBUTTONUP 0x402)
(defcvar 'SDL_MOUSEWHEEL 0x403)

(def-struct 'sdl_common_event)
	(uint 'type)			;SDL_KEYDOWN, SDL_KEYUP etc
	(uint 'timestamp)
(def-struct-end)

(def-struct 'sdl_keysym)
	(int 'scancode)
	(int 'sym)
	(ushort 'mod)
	(uint 'unused)
(def-struct-end)

(def-struct 'sdl_keyboard_event)
	(uint 'type)
	(uint 'timestamp)
	(uint 'windowid)
	(ubyte 'state)		;SDL_PRESSED, SDL_RELEASED
	(ubyte 'repeat)		;1 if repeat
	(ubyte 'padding2)
	(ubyte 'padding3)
	(struct 'keysym 'sdl_keysym)
(def-struct-end)

(def-struct 'sdl_mouse_motion_event)
	(uint 'type)
	(uint 'timestamp)
	(uint 'windowid)
	(uint 'which)
	(uint 'state)
	(int 'x)
	(int 'y)
	(int 'xrel)
	(int 'yrel)
(def-struct-end)

(def-struct 'sdl_mouse_button_event)
	(uint 'type)
	(uint 'timestamp)
	(uint 'windowid)
	(uint 'which)
	(ubyte 'button)
	(ubyte 'state)		;SDL_PRESSED, SDL_RELEASED
	(ubyte 'clicks)
	(ubyte 'padding1)
	(int 'x)
	(int 'y)
(def-struct-end)

(def-struct 'sdl_mouse_wheel_event)
	(uint 'type)
	(uint 'timestamp)
	(uint 'windowid)
	(uint 'which)
	(int 'x)
	(int 'y)
	(uint 'direction)
(def-struct-end)

(def-struct 'sdl_quit_event)
	(uint 'type)
	(uint 'timestamp)
(def-struct-end)
