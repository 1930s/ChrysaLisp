(import 'inc/func.inc)
(import 'inc/mail.inc)

(def-func 'sys/mail_send)
	;inputs
	;r0 = mail message
	;trashes
	;r0-r2

	;on or off chip ?
	(vp-cpy-rr r0 r2)
	(f-call 'sys_cpu 'id '() '(r0))
	(vpif '(r0 == [ r2 + msg_dest + id_cpu ]))
		;on this chip
		(vp-cpy-ir r2 msg_parcel_size r1)
		(vpif '(r1 != 0))
			;mail for postman !
			(f-bind 'sys_mail 'statics r1)
			(vp-cpy-ir r1 ml_statics_in_mailbox r1)
		(else)
			(vp-cpy-ir r2 (add msg_dest id_mbox) r1)
			(vpif '(r1 == 0))
				;mail for kernel !
				(f-bind 'sys_mail 'statics r1)
				(vp-cpy-ir r1 ml_statics_kernel_mailbox r1)
			(endif)
		(endif)
	(vp-label 'post_it)
		(lh-add-at-tail r1 r2 r0)
		(vp-cpy-ir r1 mailbox_tcb r0)
		(vpif '(r0 != 0))
			(vp-xor-rr r2 r2)
			(vp-cpy-ri r2 r1 mailbox_tcb)
			(f-call 'sys_task 'resume '(r0))
		(endif)
	(else)
		;going off chip
		(f-bind 'sys_mail 'statics r1)
		(vp-cpy-ir r2 msg_length r0)
		(vpif '(r0 > msg_size))
			;must use postman task
			(vp-cpy-ir r1 ml_statics_out_mailbox r1)
			(vp-jmp 'post_it)
		(else)
			;queue it on the outgoing packet list
			(vp-lea-ir r1 ml_statics_offchip_list r1)
			(lh-add-at-tail r1 r2 r0)
		(endif)
	(endif)
	(vp-ret)

(def-func-end)
