(import 'sys/func.inc)
(import 'sys/task/class.inc)
(import 'class/integer/class.inc)
(import 'class/string/class.inc)
(import 'class/lisp/class.inc)

(def-method 'sys_task 'lisp_sleep)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0)

	(push-scope)
	(entry 'sys_task 'lisp_sleep {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 1} {_, value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {this, args, &arg0, 0})
	(call 'sys_task 'sleep {arg0})
	(call 'obj 'ref {this->lisp_sym_t} {value})

(vp-label 'funcexit)
	(exit 'sys_task 'lisp_sleep {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(task-sleep usec)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_task 'lisp_mailbox)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0)
(errorcases
	(uint 'length))

	(push-scope)
	(entry 'sys_task 'lisp_mailbox {this, args})

(errorcases
	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length} 'error1))

	(call 'sys_task 'mailbox nil {arg0})
	(call 'integer 'create {arg0} {value})

(vp-label 'funcexit)
	(exit 'sys_task 'lisp_mailbox {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(task-mailbox)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_task 'lisp_open_child)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'sys_task 'lisp_open_child {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 2} {_, value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {this, args, &arg0, 0})
	(call 'sys_task 'open_child {&arg0->string_data, arg1} {arg0})
	(call 'integer 'create {arg0} {value})

(vp-label 'funcexit)
	(exit 'sys_task 'lisp_open_child {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(open-child path mode)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'string 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_task 'lisp_open_remote)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2)

	(push-scope)
	(entry 'sys_task 'lisp_open_remote {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 3} {_, value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {this, args, &arg0, 0})
	(call 'sys_task 'open_remote {&arg0->string_data, arg1, arg2} {arg0})
	(call 'integer 'create {arg0} {value})

(vp-label 'funcexit)
	(exit 'sys_task 'lisp_open_remote {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(open-remote path cpu mode)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'string 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_task 'lisp_open_farm)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2)

	(push-scope)
	(entry 'sys_task 'lisp_open_farm {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 3} {_, value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {this, args, &arg0, 0})
	(call 'sys_task 'open_farm {&arg0->string_data, arg1, arg2} {value})

(vp-label 'funcexit)
	(exit 'sys_task 'lisp_open_farm {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(open-farm path num mode)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'string 'integer 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_task 'lisp_open_pipe)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0)

	(push-scope)
	(entry 'sys_task 'lisp_open_pipe {this, args})

(errorcases
	(call 'lisp 'env_args_type {this, args, $sig, 1} {_, value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {this, args, &arg0, 0})

(errorcases
	(call 'lisp 'env_args_type (cat {this, arg0, @} (f-path 'string 'vtable) {, -1}) {_, value})
	(errorifnot {value} 'error1))

	(call 'sys_task 'open_pipe {arg0} {value})

(vp-label 'funcexit)
	(exit 'sys_task 'lisp_open_pipe {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(open-pipe paths)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'vector))

	(pop-scope-syms)

(def-func-end)
