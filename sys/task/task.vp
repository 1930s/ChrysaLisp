(import 'sys/func.inc)
(import 'sys/kernel/kernel.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)

(def-func 'sys/task/statics)
	;info
	;task statics data

	(times tk_statics_size (vp-byte 0))
(def-func-end)

(def-func 'sys/task/init)
	;info
	;init task statics

	;init task lists
	(f-bind 'sys_task 'statics r0)
	(vp-add-cr tk_statics_timer_list r0)
	(lh-init r0 r1)
	(vp-ret)

(def-func-end)

(def-func 'sys/task/callback)
	;inputs
	;r0 = user data address (ptr)
	;r1 = callback address (ptr)
	;trashes
	;all

	;test if we are the kernel task
	(f-bind 'sys_task 'statics r2)
	(vp-cpy-ir r2 tk_statics_current_tcb r3)
	(vp-cpy-ir r2 tk_statics_kernel_tcb r2)
	(vpif '(r2 == r3))
		;yes we can just do local call
		(vp-jmp-r r1)
	(endif)

	(ptr 'usr 'addr 'msg 'data 'mbox_addr)
	(uint 'id 'mbox_id)

	(push-scope)
	(f-entry 'sys_task 'callback {usr, addr})

	;alloc temp mailbox
	(f-call 'sys_mail 'alloc_mbox nil {mbox_id})
	(f-call 'sys_mail 'mbox_addr {mbox_id} {mbox_addr})

	;allocate mail message
	(f-call 'sys_mail 'alloc {kn_msg_callback_size} {msg, data})

	;fill in destination, reply and function
	(f-call 'kernel 'id nil {id})
	(assign {0} {msg->msg_dest.id_mbox})
	(assign {id} {msg->msg_dest.id_cpu})
	(assign {mbox_id} {data->kn_msg_reply_id.id_mbox})
	(assign {id} {data->kn_msg_reply_id.id_cpu})
	(assign {kn_call_callback} {data->kn_msg_function})
	(assign {usr} {data->kn_msg_user})
	(assign {addr} {data->kn_msg_callback_addr})

	;send mail to kernel then wait for reply
	(f-call 'sys_mail 'send {msg})
	(f-call 'sys_mail 'read {mbox_addr} {msg, _})

	;free reply mail and temp mailbox
	(f-call 'sys_mail 'free_mbox {mbox_id})
	(assign {msg} '(r0))
	(pop-scope)
	(f-jmp 'sys_mail 'free '(r0))

(def-func-end)

(def-func 'sys/task/count)
	;outputs
	;r0 = task count (uint)

	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir-ui r0 tk_statics_task_count r0)
	(vp-ret)

(def-func-end)

(def-func 'sys/task/mailbox)
	;outputs
	;r0 = current task mailbox id (id)

	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir-ui r0 tk_statics_cpu_id r1)
	(vp-cpy-ir r0 tk_statics_current_tcb r0)
	(vp-shl-cr 32 r1)
	(vp-cpy-ir-ui r0 tk_node_mbox_id r0)
	(vp-add-rr r1 r0)
	(vp-ret)

(def-func-end)

(def-func 'sys/task/restore)
	;inputs
	;r14 = control block to restore (ptr)
	;info
	;restore next task

	;restore old task
	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ri r14 r0 tk_statics_current_tcb)
	(vp-cpy-ir r14 tk_node_stack rsp)

	;pop task state
	(tk-load-state)
	(vp-ret)

(def-func-end)

(def-func 'sys/task/suspend)
	;info
	;suspend current task, switch to next task

	;push task state
	(tk-save-state)

	;save stack pointer
	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_current_tcb r0)
	(vp-cpy-ri rsp r0 tk_node_stack)

	;remove task control block, and flag as suspended
	(vp-cpy-rr r0 r1)
	(ln-remove-node r1 r14)
	(vp-xor-rr r1 r1)
	(ln-set-succ r0 r1)

	;restore next task
	(f-jmp 'sys_task 'restore)

(def-func-end)

(def-func 'sys/task/resume)
	;inputs
	;r0 = task control node to resume (ptr)
	;trashes
	;r1-r2

	;are we in suspend state ?
	(ln-get-succ r0 0 r1)
	(vpif '(r1 == 0))
		;add to task list
		(f-bind 'sys_task 'statics r1)
		(vp-cpy-ir r1 tk_statics_current_tcb r1)
		(ln-add-node-before r1 r0 r2)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'sys/task/sleep)
	;inputs
	;r0 = time delay in usec (ulong)

	;push task state
	(tk-save-state)

	;save stack pointer
	(f-bind 'sys_task 'statics r3)
	(vp-cpy-ir r3 tk_statics_current_tcb r14)
	(vp-cpy-ri rsp r14 tk_node_stack)

	;save timeout
	(vp-cpy-rr r0 r1)

	;calculate wake time
	(f-call 'pii 'time '() '(r0))
	(vp-add-rr r1 r0)
	(vp-cpy-ri r0 r14 tk_node_time)

	;remove task control block
	(vp-cpy-rr r14 r2)
	(vp-cpy-rr r14 r1)
	(ln-remove-node r2 r14)

	;add to timer list
	(loop-list-forward r3 tk_statics_timer_list r4 r2)
		(vp-cpy-ir r4 tk_node_time r3)
	(loop-until '(r0 < r3))
	(ln-add-node-before r4 r1 r0)

	;restore next task
	(f-jmp 'sys_task 'restore)

(def-func-end)

(def-func 'sys/task/start)
	;inputs
	;r0 = new task func pointer (ptr)
	;outputs
	;r0 = new task control block (ptr)
	;r1 = new task mailbox id (id)
	;trashes
	;all

	(ptr 'func 'task_statics 'tcb)
	(ulong 'tcb_size)

	(push-scope)
	(f-entry 'sys_task 'start {func})

	;increment task count
	(assign (cat {@} (f-path 'sys_task 'statics)) {task_statics})
	(assign {task_statics->tk_statics_task_count + 1} {task_statics->tk_statics_task_count})

	;create new task control block and task
	(f-call 'sys_mem 'alloc {ushort(func - ubyte(func - byte_size) - short_size) + tk_node_stackspace} {tcb, tcb_size})
(errorcases
	(f-call 'sys_mem 'clear {tcb, tcb_size}))

	;alloc task mailbox
	(f-call 'sys_mail 'alloc_mbox nil {tcb->tk_node_mbox_id})
	(f-call 'sys_mail 'mbox_addr {tcb->tk_node_mbox_id} {tcb->tk_node_mbox_addr})

	;init task control block stack, pc and stop address's
	(assign {tcb, tcb + tcb_size, func} '(r0 r1 r4))
	(stack-init)
	(assign '(r1) {tcb->tk_node_stack})

	;resume new task, check for first
	(vp-def tcb current_tcb tmp task_statics)
	(assign {tcb, task_statics->tk_statics_current_tcb, task_statics} (list tcb current_tcb task_statics))
	(vpif `(,current_tcb == 0))
		(vp-cpy-ri tcb task_statics tk_statics_current_tcb)
		(ln-set-succ tcb tcb)
		(ln-set-pred tcb tcb)
	(else)
		(ln-add-node-before current_tcb tcb tmp)
	(endif)

	;return tcb and mailbox id
	(f-exit 'sys_task 'start {tcb, tcb->tk_node_mbox_id + (task_statics->tk_statics_cpu_id << 32)})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'sys/task/stop)
	;info
	;stop current task, switch to next task

	(ptr 'task_statics 'tcb 'next_tcb)
	(pptr 'stack 'stack_end)

	(push-scope)
	(f-entry 'sys_task 'stop '())

	;decrement task count
	(assign (cat {@} (f-path 'sys_task 'statics)) {task_statics})
	(assign {task_statics->tk_statics_task_count - 1} {task_statics->tk_statics_task_count})

	;free task mailbox
	(assign {task_statics->tk_statics_current_tcb} {tcb})
	(f-call 'sys_mail 'free_mbox {tcb->tk_node_mbox_id})

	;remove task control block
	(vp-def tcb next_tcb)
	(assign {tcb} (list tcb))
	(ln-remove-node tcb next_tcb)
	(assign (list next_tcb) {next_tcb})

(errorcases
	;test stack space canary
	(assign {&tcb->tk_node_stackspace} {stack})
	(assign {stack + 1024} {stack_end})
	(loop-while {stack != stack_end})
		(vpif {*stack != 0})
			(abort "Stack overrun !")
		(endif)
		(assign {stack + ptr_size} {stack})
	(loop-end))

	;free our task control block
	(f-call 'sys_mem 'free {tcb})
	(assign {next_tcb} '(r14))
	(pop-scope)
	(f-jmp 'sys_task 'restore)

(def-func-end)

(def-func 'sys/task/tcb)
	;outputs
	;r0 = current task tcb (ptr)

	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_current_tcb r0)
	(vp-ret)

(def-func-end)

(def-func 'sys/task/yield)
	;info
	;switch to next task

	;push task state
	(tk-save-state)

	;save old stack pointer
	(f-bind 'sys_task 'statics r14)
	(vp-cpy-ir r14 tk_statics_current_tcb r14)
	(vp-cpy-ri rsp r14 tk_node_stack)

	;get next task control block
	(ln-get-succ r14 0 r14)
	(f-jmp 'sys_task 'restore)

(def-func-end)

;;;;;;;;;;;;;;;;;;;;;;
; single child process
;;;;;;;;;;;;;;;;;;;;;;

(def-func 'sys/task/open_child)
	;inputs
	;r0 = name string object (ptr)
	;r1 = spawn type (uint)
	;outputs
	;r0 = mailbox ID (id)
	;trashes
	;all

	(f-entry 'sys_task 'open_child '(r0 r1))
	(f-bind 'sys_task 'statics r3)
	(f-jmp 'sys_task 'open_remote '(r0 (r3 tk_statics_cpu_id ui) r1))

(def-func-end)

(def-func 'sys/task/open_remote)
	;inputs
	;r0 = name string object (ptr)
	;r1 = cpu target (uint)
	;r2 = spawn type (uint)
	;outputs
	;r0 = mailbox id (id)
	;trashes
	;all

	(ptr 'name 'msg 'data 'mailbox)
	(uint 'cpu 'type 'mbox_id)
	(struct 'id 'id)

	;save task info
	(push-scope)
	(f-entry 'sys_task 'open_remote {name, cpu, type})

	;alloc temp mailbox
	(f-call 'sys_mail 'alloc_mbox nil {mbox_id})
	(f-call 'sys_mail 'mbox_addr {mbox_id} {mailbox})

	;start task
	(f-call 'sys_mail 'alloc {name->string_length + 1 + kn_msg_open_size} {msg, data})
	(assign {0} {msg->msg_dest.id_mbox})
	(assign {cpu} {msg->msg_dest.id_cpu})
	(assign {mbox_id} {data->kn_msg_reply_id.id_mbox})
	(f-call 'kernel 'id nil {data->kn_msg_reply_id.id_cpu})
	(assign {type} {data->kn_msg_function})
	(f-call 'sys_mem 'copy {&name->string_data, &data->kn_msg_open_pathname, name->string_length + 1})
	(f-call 'sys_mail 'send {msg})

	;wait for reply
	(f-call 'sys_mail 'read {mailbox} {msg, data})
	(assign {data->kn_msg_reply_id.id_id} {id.id_id})
	(f-call 'sys_mail 'free {msg})

	;free temp mailbox
	(f-call 'sys_mail 'free_mbox {mbox_id})

	;return ids array
	(f-exit 'sys_task 'open_remote {id.id_id})
	(pop-scope)
	(return)

(def-func-end)

;;;;;;;;;;;;;;;;;;;;;;;;
; multiple child process
;;;;;;;;;;;;;;;;;;;;;;;;

(def-func 'sys/task/open_farm)
	;inputs
	;r0 = name string object (ptr)
	;r1 = number to spawn (uint)
	;r2 = spawn type (uint)
	;outputs
	;r0 = mailbox id's array object (ptr)
	;trashes
	;all

	(ptr 'name 'ids 'msg 'data 'mailbox)
	(uint 'length 'type 'index 'cpu 'total 'offset 'mbox_id)

	;save task info
	(push-scope)
	(f-entry 'sys_task 'open_farm {name, length, type})

	;gather network info
	(f-call 'kernel 'id nil {cpu})
	(f-call 'kernel 'total nil {total})

	;create output array
	(f-call 'array 'create nil {ids})
	(f-call 'array 'set_capacity {ids, length})
	(f-call 'array 'set_length {ids, length})

	;alloc temp mailbox
	(f-call 'sys_mail 'alloc_mbox nil {mbox_id})
	(f-call 'sys_mail 'mbox_addr {mbox_id} {mailbox})

	;start all tasks in parallel, centered around our cpu
	(assign {cpu - (length >> 1)} {offset})
	(vpif {offset < 0})
		(assign {total + (offset %% total)} {offset})
	(endif)
	(assign {0} {index})
	(loop-while {index != length})
		(f-call 'sys_mail 'alloc {name->string_length + 1 + kn_msg_open_size} {msg, data})
		(assign {0} {msg->msg_dest.id_mbox})
		(assign {(index + offset) % total} {msg->msg_dest.id_cpu})
		(assign {mbox_id} {data->kn_msg_reply_id.id_mbox})
		(assign {cpu} {data->kn_msg_reply_id.id_cpu})
		(assign {type} {data->kn_msg_function})
		(assign {index} {data->kn_msg_user})
		(f-call 'sys_mem 'copy {&name->string_data, &data->kn_msg_open_pathname, name->string_length + 1})
		(f-call 'sys_mail 'send {msg})
		(assign {index + 1} {index})
	(loop-end)

	;wait for reply's
	(loop-while {index})
		(assign {index - 1} {index})
		(f-call 'sys_mail 'read {mailbox} {msg, data})
		(d-call 'array 'set_element {ids, data->kn_msg_reply_id.id_id, data->kn_msg_user})
		(f-call 'sys_mail 'free {msg})
	(loop-end)

	;free temp mailbox
	(f-call 'sys_mail 'free_mbox {mbox_id})

	;return ids array
	(f-exit 'sys_task 'open_farm {ids})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'sys/task/open_pipe)
	;inputs
	;r0 = vector of string objects (ptr)
	;outputs
	;r0 = mailbox id's array object (ptr)
	;trashes
	;all

	(ptr 'tasks 'ids 'msg 'data 'name 'mailbox)
	(uint 'cpu 'index 'length 'mbox_id)

	;save task info
	(push-scope)
	(f-entry 'sys_task 'open_pipe {tasks})

	;create output array
	(d-call 'vector 'get_length {tasks} {_, length})
	(f-call 'array 'create nil {ids})
	(f-call 'array 'set_capacity {ids, length})
	(f-call 'array 'set_length {ids, length})

	;alloc temp mailbox
	(f-call 'sys_mail 'alloc_mbox nil {mbox_id})
	(f-call 'sys_mail 'mbox_addr {mbox_id} {mailbox})

	;start all tasks, starting on kernel of this chip
	(f-call 'kernel 'id nil {cpu})
	(assign {0} {index})
	(loop-while {index != length})
		(f-call 'vector 'get_element {tasks, index} {_, name})
		(f-call 'sys_mail 'alloc {name->string_length + 1 + kn_msg_open_size} {msg, data})
		(assign {0} {msg->msg_dest.id_mbox})
		(assign {cpu} {msg->msg_dest.id_cpu})
		(assign {mbox_id} {data->kn_msg_reply_id.id_mbox})
		(f-call 'kernel 'id nil {data->kn_msg_reply_id.id_cpu})
		(assign {kn_call_child} {data->kn_msg_function})
		(f-call 'sys_mem 'copy {&name->string_data, &data->kn_msg_open_pathname, name->string_length + 1})

		;send mail to kernel, wait for reply
		(f-call 'sys_mail 'send {msg})
		(f-call 'sys_mail 'read {mailbox} {msg, data})

		;save reply mailbox ID
		(assign {data->kn_msg_reply_id.id_cpu} {cpu})
		(d-call 'array 'set_element {ids, data->kn_msg_reply_id.id_id, index})
		(f-call 'sys_mail 'free {msg})

		;next pipe worker
		(assign {index + 1} {index})
	(loop-end)

	;free temp mailbox
	(f-call 'sys_mail 'free_mbox {mbox_id})

	;return ids array
	(f-exit 'sys_task 'open_pipe {ids})
	(pop-scope)
	(return)

(def-func-end)
