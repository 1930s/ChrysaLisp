(import 'inc/func.inc)
(import 'inc/load.inc)

;%define list_loaded

(def-func 'sys/load_bind)
	;input
	;r0 = function path name
	;output
	;r0 = 0 else, function entry pointer
	;trashes
	;r1-r3, r5-r8

(vp-label 'ld_load_function)
	;save pathname
	(vp-cpy-rr r0 r7)

	;get loader statics !
	(vp-rel '_func_start r8)
	(vp-cpy-ir-ui r8 fn_header_length r0)
	(vp-add-rr r0 r8)
	(vp-cpy-ir-ui r8 fn_header_entry r0)
	(vp-add-rr r0 r8)

	;check if function already present !
	(loop-flist-forward (r8 ld_statics_function_flist) r6 r6)
		(vp-cpy-rr r7 r0)
		(vp-lea-ir r6 fn_header_pathname r1)
		(vp-call 'string_compare)
	(loop-until '(r0 == 0))
	(vpif '(r6 != 0))
		;found function already loaded
		(vp-cpy-ir-ui r6 fn_header_entry r0)
		(vp-add-rr r6 r0)
		(vp-ret)
	(endif)

	;create filename
	(fn-string "obj/" r0)
	(vp-lea-ir r8 ld_statics_name_buffer r1)
	(vp-call 'string_copy)
	(vp-cpy-rr r7 r0)
	(vp-dec r1)
	(vp-call 'string_copy)
	(vp-lea-ir r8 ld_statics_name_buffer r7)

	;get length of function on disk
	(vp-lea-ir r8 ld_statics_stat_buffer r0)
	sys_stat r7, r0
	(vpif '(r0 != 0))
	(vp-label 'exit)
		(vp-xor-rr r0 r0)
		(vp-ret)
	(endif)

	;test for regular file only
	(vp-cpy-ir-us r8 (add ld_statics_stat_buffer stat_mode) r0)
	(vp-and-cr s_ifmt r0)
	(vp-jmpif '(r0 != s_ifreg) 'exit)

	;ensure space for new function
	(vp-cpy-ir r8 ld_statics_block_start r1)
	(vp-cpy-ir r8 ld_statics_block_end r2)
	(vp-sub-rr r1 r2)
	(vp-cpy-ir r8 (add ld_statics_stat_buffer stat_fsize) r0)
	(vpif '(r2 < r0))
		;not enough so allocate new function buffer
		(sys-mmap '(0, ld_block_size, prot_read|prot_write|prot_exec, map_private|map_anon, -1, 0))
		(assert '(r0 != 0))

		;add to block list for freeing
		(ln-add-fnode r8 + ld_statics_block_flist r0 r1)

		;set block pointers for loading
		(vp-add-cr ptr_size r0)
		(vp-cpy-ri r0 r8 ld_statics_block_start)
		(vp-add-cr ld_block_size - ptr_size r0)
		(vp-cpy-ri r0 r8 ld_statics_block_end)
	(endif)

(if (defined 'list_loaded)
(progn
	;print loaded function name
	(vp-rel 'loaded_name r0)
	(sys-write-string 2 r0 loaded_name_end-loaded_name)
	(vp-cpy-rr r7 r0)
	(vp-call 'string_skip)
	(vp-lea-ir r0 -1 r1)
	(vp-sub-rr r7 r1)
	(sys-write-string 2 r7 r1)
	(sys-write-char '(2, "'"))
	(sys-write-char '(2, 10))
))

	;open function file
	(sys-open '(r7, o_rdonly, 0))
	(vp-cpy-rr r0 r7)

	;read into buffer
	(vp-cpy-ir r8 ld_statics_block_start r3)
	(vp-lea-ir r8 ld_statics_stat_buffer r2)
	(sys-read '(r7, r3, (r2 stat_fsize)))

	;close function file
	(sys-close '(r7))

	;check loaded length equals file size
	(vp-cpy-ir-ui r3 fn_header_length r0)
	(vpif '(r0 != (r2 stat_fsize)))
		(vp-rel 'size_error r0)
		(sys-write-string 2 r0 size_error_end-size_error)
		(sys-exit '(1))
	(endif)

	;add to function list
	(ln-add-fnode r8 + ld_statics_function_flist r3 r0)

	;relocate vtable so we can discard paths
	(vp-cpy-ir r8 ld_statics_reloc_stack r1)
	(vp-cpy-rr r1 r6)

	;copy paths to reloc buffer
	(vp-cpy-ir-ui r3 fn_header_paths r0)
	(vp-cpy-ir-ui r3 fn_header_length r2)
	(vp-add-rr r3 r0)
	(vp-add-rr r3 r2)
	(loop-while '(r0 < r2))
	 	(vp-cpy-ir r0 r5)
		(vp-cpy-ri r5 r1)
		(vp-add-cr ptr_size r0)
		(vp-add-cr ptr_size r1)
	(loop-end)

	;push reloc buffer entry
	(vp-add-cr ptr_size r1)
	(vp-cpy-ri r6 r1 (sub 0 ptr_size))
	(vp-cpy-ri r1 r8 ld_statics_reloc_stack)

	;overflow check
	(vp-lea-ir r8 ld_statics_size r2)
	(vpif '(r1 > r2))
		(vp-rel 'reloc_error r0)
		(sys-write-string 2 r0 reloc_error_end-reloc_error)
		(sys-exit '(1))
	(endif)

	;bind links to paths in reloc buffer
	(vp-cpy-ir-ui r3 fn_header_links r0)
	(vp-cpy-ir-ui r3 fn_header_paths r2)
	(vp-add-rr r3 r0)
	(vp-add-rr r3 r2)
	(vp-sub-rr r2 r6)
	(loop-start)
	 	(vp-cpy-ir r0 r2)
		(breakif '(r2 == 0))
		(vp-add-rr r0 r2)
		(vp-add-rr r6 r2)
		(vp-cpy-ri r2 r0)
		(vp-add-cr ptr_size r0)
	(loop-end)

	;adjust block start
	(vp-add-cr ptr_size r0)
	(vp-cpy-ri r0 r8 ld_statics_block_start)

	;load and link function references
	;now actual addresses of strings in the reloc buffer
	(vp-cpy-ir-ui r3 fn_header_links r0)
	(vp-add-rr r3 r0)
	(vp-push r3)
	(loop-start)
		(vp-cpy-ir r0 r1)
		(breakif '(r1 == 0))
		(vp-push r0)
		(vp-cpy-rr r1 r0)
		(vp-call 'ld_load_function)
		(vpif '(r0 == 0))
			;no such file
			(vp-rel 'bind_error r0)
			(sys-write-string 2 r0 '(sub bind_error_end bind_error))
			(vp-cpy-ir r4 r0)
			(vp-cpy-ir r0 r0)
			(vp-call 'string_skip)
			(vp-lea-ir r0 -1 r1)
			(vp-cpy-ir r4 r0)
			(vp-cpy-ir r0 r0)
			(vp-sub-rr r0 r1)
			(sys-write-string 2 r0 r1)
			(sys-write-char '(2, 10))
			(sys-exit '(1))
		(endif)
		(vp-cpy-rr r0 r1)
		(vp-pop r0)
		(vp-cpy-ri r1 r0)
		(vp-add-cr ptr_size r0)
	(loop-end)
	(vp-pop r3)

	;get loader statics !
	(vp-rel '_func_start r8)
	(vp-cpy-ir-ui r8 fn_header_length r0)
	(vp-add-rr r0 r8)
	(vp-cpy-ir-ui r8 fn_header_entry r0)
	(vp-add-rr r0 r8)

	;pop reloc buffer
	(vp-cpy-ir r8 ld_statics_reloc_stack r0)
	(vp-cpy-ir r0 (sub 0 ptr_size) r0)
	(vp-cpy-ri r0 r8 ld_statics_reloc_stack)

	;return function address
	(vp-cpy-ir-ui r3 fn_header_entry r0)
	(vp-add-rr r3 r0)
	(vp-ret)

(vp-label 'string_compare)
	(loop-start)
		(vp-cpy-ir-ub r0 r2)
		(vp-cpy-ir-ub r1 r3)
		(vp-sub-rr r3 r2)
		(breakif '(r2 != 0))
		(breakif '(r3 == 0))
		(vp-inc r0)
		(vp-inc r1)
	(loop-end)
	(vp-cpy-rr r2 r0)
	(vp-ret)

(vp-label 'string_copy)
	(loop-start)
		(vp-cpy-ir-ub r0 r2)
		(vp-cpy-ri-b r2 r1)
		(vp-inc r0)
		(vp-inc r1)
	(loop-until '(r2 == 0))
	(vp-ret)

(vp-label 'string_skip)
	(loop-start)
		(vp-cpy-ir-ub r0 r1)
		(vp-inc r0)
	(loop-until '(r1 == 0))
	ret

(vp-label 'bind_error)
	(vp-string "Bind error ")
(vp-label 'bind_error_end)

(vp-label 'reloc_error)
	(vp-string "Reloc buffer overflow !") (vp-byte 10)
(vp-label 'reloc_error_end)

(vp-label 'size_error)
	(vp-string "Length field error !") (vp-byte 10)
(vp-label 'size_error_end)

(if (defined 'list_loaded)
(progn
	(vp-label 'loaded_name)
		(vp-string "incbin '")
	(vp-label 'loaded_name_end)))

(def-func-end)
