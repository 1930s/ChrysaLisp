(import 'inc/func.inc)
(import 'inc/task.inc)

(def-func 'sys/task_start)
	;inputs
	;r0 = new task func pointer
	;outputs
	;r0 = new task control block
	;r1 = new task mailbox
	;trashes
	;r2-r3, r5-r6

	;save prog counter
	(vp-cpy-rr r0 r5)

	;increment task count
	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_task_count r1)
	(vp-inc r1)
	(vp-cpy-ri r1 r0 tk_statics_task_count)

	;create new task control block and task
	(vp-cpy-rr r5 r2)
	(vp-cpy-ir-ub r2 -1 r1)
	(vp-sub-rr r1 r2)
	(vp-cpy-ir-ui r2 (sub 0 int_size) r1)
	(vpif '(r1 > tk_stack_size))
		(vp-add-cr tk_node_stackspace r1)
		(vp-cpy-cr tk_node_size r1)
		(f-call 'sys_mem 'alloc '(r1) '(r0, r1))
	else
		(vp-add-cr tk_statics_task_heap r0)
		(f-call 'sys_heap 'alloc '(r0) '(r1))
		(vp-cpy-ri r0 r1)
		(vp-lea-ir r1 ptr_size r0)
		(vp-cpy-cr tk_node_size r1)
	(endif)

	;initialise task mailbox etc
	(vp-xor-rr r2 r2)
	(vp-cpy-ri r2 r0)
	(vp-lea-ir r0 tk_node_mailbox r6)
	ml_init r6, r2, r3

	;set task control block stack and return address's
	(vp-lea-ir r0 r1 r1)
	(vp-sub-cr (add tk_state_size (mul ptr_size 2)) r1)
	(vp-cpy-ri r1 r0 tk_node_stack)
	fn_bind sys/task_stop, r2
	(vp-cpy-ri r2 r1 (add tk_state_size ptr_size))
	(vp-cpy-ri r5 r1 tk_state_size)

	;resume new task
	(f-call 'sys_task 'resume '(r0))

	;return mailbox pointer
	(vp-lea-ir r0 tk_node_mailbox r1)
	(vp-ret)

(def-func-end)
