(import 'inc/func.inc)
(import 'inc/heap.inc)
(import 'inc/syscall.inc)

(def-func 'sys/heap_alloc)
	;inputs
	;r0 = heap
	;outputs
	;r0 = heap
	;r1 = cell
	;trashes
	;r2-r3

	(loop-start)
		(vp-cpy-ir r0 hp_heap_free_flist r1)
		(vpif '(r1 != 0))
			(vp-cpy-ir r1 ln_fnode_next r2)
			(vp-cpy-ri r2 r0 hp_heap_free_flist)
			(vp-ret)
		(endif)
		(vp-cpy-ir r0 hp_heap_blocksize r1)
		(vp-add-cr ln_fnode_size r1)
		(vp-cpy-rr r0 r2)
		(sys-mmap 0 r1 (bit-or prot_read prot_write) (bit-or map_private map_anon)  -1  0)
		(assert '(r0 != 0))
		(f-bind 'sys_mem 'statics r3)
		(vp-add-ir r3 r1)
		(vp-cpy-ri r1 r3 0)
		(vp-cpy-rr r0 r1)
		(vp-cpy-rr r2 r0)
		(ln-add-fnode r0 hp_heap_block_flist r1 r2)
		(vp-add-cr ln_fnode_size r1)
		(vp-cpy-rr r1 r3)
		(vp-add-ir r0 hp_heap_blocksize r3)
		(vp-xor-rr r2 r2)
		(loop-start)
			(vp-cpy-ri r2 r3 ln_fnode_next)
			(vp-cpy-rr r1 r2)
			(vp-add-ir r0 hp_heap_cellsize r1)
		(loop-until '(r1 >= r3))
		(vp-cpy-ri r2 r0 hp_heap_free_flist)
	(loop-end)

(def-func-end)
