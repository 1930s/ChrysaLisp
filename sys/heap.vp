(import 'sys/func.inc)
(import 'sys/heap.inc)

(def-func 'sys/heap_init)
	;inputs
	;r0 = heap
	;r1 = cell size
	;r2 = block size
	;outputs
	;r0 = heap
	;r1 = cell size
	;r2 = block size
	;trashes
	;r2

	(f-entry 'sys_heap 'init '(r0 r1 r2))
	(vp-add-cr (dec ptr_size) r1)
	(vp-and-cr (neg ptr_size) r1)
	(vp-cpy-ri-i r1 r0 hp_heap_cellsize)
	(vp-cpy-ri-i r2 r0 hp_heap_blocksize)
	(vp-xor-rr r2 r2)
	(vp-cpy-ri r2 r0 hp_heap_free_flist)
	(vp-cpy-ri r2 r0 hp_heap_block_flist)
	(f-exit 'sys_heap 'init '(r0 r1 r2))
	(vp-ret)

(def-func-end)

(def-func 'sys/heap_deinit)
	;inputs
	;r0 = heap
	;outputs
	;r0 = heap
	;trashes
	;r0-r3

	(f-entry 'sys_heap 'deinit '(r0))
	(vp-cpy-rr r0 r1)
	(loop-flist r0 hp_heap_block_flist r2 r3)
		(vp-cpy-rr r2 r0)
		(ln-remove-fnode r2 r3)
		(vp-cpy-ir-ui r1 hp_heap_blocksize r3)
		(vp-add-cr ln_fnode_size r3)
		(f-call 'pii 'munmap '(r0 r3))
		(f-bind 'sys_mem 'statics r0)
		(vp-cpy-ir r0 0 r0)
		(vp-sub-rr r3 r0)
		(f-bind 'sys_mem 'statics r3)
		(vp-cpy-ri r0 r3 0)
	(loop-end)
	(f-exit 'sys_heap 'deinit '(r0))
	(vp-ret)

(def-func-end)

(def-func 'sys/heap_alloc)
	;inputs
	;r0 = heap
	;outputs
	;r0 = heap
	;r1 = cell
	;trashes
	;r2-r3

	(f-entry 'sys_heap 'alloc '(r0))
	(loop-start)
		(vp-cpy-ir r0 hp_heap_free_flist r1)
		(vpif '(r1 != 0))
			(vp-cpy-ir r1 ln_fnode_next r2)
			(vp-cpy-ri r2 r0 hp_heap_free_flist)
			(f-exit 'sys_heap 'alloc '(r0 r1))
			(vp-ret)
		(endif)
		(vp-push r4 r5)
		(vp-cpy-ir-ui r0 hp_heap_blocksize r1)
		(vp-add-cr ln_fnode_size r1)
		(vp-push r1 r0)
		(f-call 'pii 'mmap '(0 r1 (bit-or prot_read prot_write) (bit-or map_private map_anon) -1  0) '(r0))
		(vp-pop r1 r2)
		(errorif '(r0 == 0) 'error)
		(f-bind 'sys_mem 'statics r3)
		(vp-cpy-ir r3 0 r4)
		(vp-add-rr r4 r1)
		(vp-cpy-ri r1 r3 0)
		(vp-cpy-rr r0 r1)
		(vp-cpy-rr r2 r0)
		(ln-add-fnode r0 hp_heap_block_flist r1 r2)
		(vp-add-cr ln_fnode_size r1)
		(vp-cpy-rr r1 r3)
		(vp-cpy-ir-ui r0 hp_heap_blocksize r4)
		(vp-xor-rr r2 r2)
		(vp-add-rr r4 r3)
		(loop-start)
			(vp-cpy-ri r2 r3 ln_fnode_next)
			(vp-cpy-ir-ui r0 hp_heap_cellsize r4)
			(vp-cpy-rr r1 r2)
			(vp-add-rr r4 r1)
		(loop-until '(r1 >= r3))
		(vp-cpy-ri r2 r0 hp_heap_free_flist)
		(vp-pop r4 r5)
	(loop-end)

(errorcases
(vp-label 'error)
	(abort))

(def-func-end)

(def-func 'sys/heap_reset)
	;inputs
	;r0 = heap
	;outputs
	;r0 = heap
	;trashes
	;r1-r4

	(f-entry 'sys_heap 'reset '(r0))
	(vp-xor-rr r1 r1)
	(vp-cpy-ir r0 hp_heap_block_flist r2)
	(loop-while '(r2 != 0))
		(vp-lea-i r2 ln_fnode_size r3)
		(vp-cpy-ir-ui r0 hp_heap_blocksize r4)
		(vp-add-rr r3 r4)
		(loop-start)
			(vp-cpy-ri r1 r3 ln_fnode_next)
			(vp-cpy-ir r0 ln_fnode_size r1)
			(vp-add-rr r3 r1)
			(vp-swp-rr r3 r1)
		(loop-until '(r3 >= r4))
		(vp-cpy-ir r2 ln_fnode_next r2)
	(loop-end)
	(vp-cpy-ri r1 r0 hp_heap_free_flist)
	(f-exit 'sys_heap 'reset '(r0))
	(vp-ret)

(def-func-end)
