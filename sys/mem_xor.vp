(import 'inc/func.inc)

(def-func 'sys/mem_xor)
	;inputs
	;r0 = source address
	;r1 = destination address
	;r2 = length in bytes
	;outputs
	;r0 = source address end
	;r1 = destination address end
	;trashes
	;r2-r3, r5

	(vpif '(r2 != 0))
		;not zero length
		(vp-cpy-rr r0 r3)
		(vp-and-cr (sub ptr_size 1) r3)
		(vpif '(r3 == 0))
			(vp-cpy-rr r1 r3)
			(vp-and-cr (sub ptr_size 1) r3)
			(vpif '(r3 == 0))
				(vp-cpy-rr r2 r3)
				(vp-and-cr (sub ptr_size 1) r3)
				(vpif '(r3 == 0))
					;all aligned on 8 byte boundary
					(vp-add-rr r0 r2)
					(loop-start)
						(vp-cpy-ir r0 0 r3)
						(vp-cpy-ir r1 0 r5)
						(vp-xor-rr r5 r3)
						(vp-cpy-ri r3 r1 0)
						(vp-add-cr ptr_size r0)
						(vp-add-cr ptr_size r1)
					(loop-until '(r0 == r2))
					(vp-ret)
				(endif)
			(endif)
		(endif)
		;something not aligned so byte xor
		(vp-add-rr r0 r2)
		(loop-start)
			(vp-cpy-ir-ub r0 0 r3)
			(vp-cpy-ir-ub r1 0 r5)
			(vp-xor-rr r5 r3)
			(vp-cpy-ri-b r3 r1 0)
			(vp-inc r0)
			(vp-inc r1)
		(loop-until '(r0 == r2))
	(endif)
	(vp-ret)

(def-func-end)
