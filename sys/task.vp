(import 'sys/func.inc)
(import 'class/vector/vector.inc)
(import 'class/string/string.inc)
(import 'sys/kernel.inc)

(def-func 'sys/task_statics)
	(times tk_statics_size (vp-byte 0))
(def-func-end)

(def-func 'sys/task_init)
	;set up current tcb
	(f-bind 'sys_task 'statics r4)
	(vp-lea-i r4 (add tk_statics_task_list lh_list_tail) r14)
	(vp-cpy-ri r14 r4 tk_statics_current_tcb)

	;init task lists
	(vp-lea-i r4 tk_statics_task_list r0)
	(lh-init r0 r1)
	(vp-lea-i r4 tk_statics_timer_list r0)
	(lh-init r0 r1)

	;init cpu count, task count and id
	(vp-cpy-cr 1 r1)
	(vp-cpy-ri r1 r4 tk_statics_cpu_total)
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 r4 tk_statics_cpu_id)
	(vp-cpy-ri r1 r4 tk_statics_task_count)
	(vp-ret)

(def-func-end)

(def-func 'sys/task_callback)
	;inputs
	;r0 = callback address
	;r1 = user data address
	;trashes
	;all

	;test if we are the kernel task
	(f-bind 'sys_task 'statics r3)
	(vp-cpy-ir r3 tk_statics_current_tcb r2)
	(vp-cpy-ir r3 tk_statics_kernel_tcb r4)
	(vpif '(r2 == r4))
		;yes we can just do local call
		(vp-swp-rr r0 r1)
		(vp-jmp-r r1)
	(endif)

	;save task info
	(vp-cpy-rr r0 r4)
	(vp-cpy-rr r1 r5)

	;create temp mailbox
	(ml-temp-create r0 r1)

	;allocate mail message
	(f-call 'sys_mail 'alloc '() '(r3))

	;fill in destination, reply and function
	(f-call 'kernel 'id '() '(r0))
	(vp-cpy-ri rsp r3 kn_msg_reply_id)
	(vp-cpy-ri r0 r3 (add kn_msg_reply_id 8))
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 r3 (add msg_dest id_mbox))
	(vp-cpy-ri r0 r3 (add msg_dest id_cpu))
	(vp-cpy-cr kn_call_callback r1)
	(vp-cpy-ri r1 r3 kn_msg_function)
	(vp-cpy-ri r4 r3 kn_msg_callback_addr)
	(vp-cpy-ri r5 r3 kn_msg_user)
	(vp-cpy-cr kn_msg_callback_size r1)
	(vp-cpy-ri r1 r3 msg_length)

	;send mail to kernel then wait for reply
	(f-call 'sys_mail 'send '(r3))
	(f-call 'sys_mail 'read '(rsp) '(r0))

	;free reply mail and temp mailbox
	(ml-temp-destroy)
	(f-jmp 'sys_mem 'free '(r0))

(def-func-end)

(def-func 'sys/task_count)
	;outputs
	;r0 = task count

	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_task_count r0)
	(vp-ret)

(def-func-end)

(def-func 'sys/task_mailbox)
	;outputs
	;r0, r1 = current task mailbox id

	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_cpu_id r1)
	(vp-cpy-ir r0 tk_statics_current_tcb r0)
	(vp-add-cr tk_node_mailbox r0)
	(vp-ret)

(def-func-end)

(def-func 'sys/task_restore)
	;restore next task
	;r14 = control block to restore

	;round robin past any list head
	(ln-get-forward r14 r0)
	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ri r14 r0 tk_statics_current_tcb)

	;restore old stack pointer
	(vp-cpy-ir r14 tk_node_stack rsp)

	;pop task state
	(tk-load-state)
	(vp-ret)

(def-func-end)

(def-func 'sys/task_suspend)
	;push task state
	(tk-save-state)

	;save stack pointer
	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_current_tcb r0)
	(vp-cpy-ri rsp r0 tk_node_stack)

	;remove task control block, and flag as suspended
	(vp-cpy-rr r0 r1)
	(ln-remove-node r1 r14)
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 r0 0)

	;restore next task
	(f-jmp 'sys_task 'restore)

(def-func-end)

(def-func 'sys/task_resume)
	;inputs
	;r0 = task control node (to resume)
	;trashes
	;r1-r2

	;are we in suspend state ?
	(vp-cpy-ir r0 0 r1)
	(vpif '(r1 == 0))
		;add to task list
		(f-bind 'sys_task 'statics r1)
		(vp-cpy-ir r1 tk_statics_current_tcb r1)
		(ln-add-node-before r1 r0 r2)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'sys/task_sleep)
	;inputs
	;r0 = time delay in usec

	;push task state
	(tk-save-state)

	;save stack pointer
	(f-bind 'sys_task 'statics r3)
	(vp-cpy-ir r3 tk_statics_current_tcb r14)
	(vp-cpy-ri rsp r14 tk_node_stack)

	;save timeout
	(vp-cpy-rr r0 r1)

	;calculate wake time
	(f-call 'pii 'time '() '(r0))
	(vp-add-rr r1 r0)
	(vp-cpy-ri r0 r14 tk_node_time)

	;remove task control block
	(vp-cpy-rr r14 r2)
	(vp-cpy-rr r14 r1)
	(ln-remove-node r2 r14)

	;add to timer list
	(loop-list-forward r3 tk_statics_timer_list r4 r2)
		(vp-cpy-ir r4 tk_node_time r3)
	(loop-until '(r0 < r3))
	(ln-add-node-before r4 r1 r0)

	;restore next task
	(f-jmp 'sys_task 'restore)

(def-func-end)

(def-func 'sys/task_start)
	;inputs
	;r0 = new task func pointer
	;outputs
	;r0 = new task control block
	;r1 = new task mailbox id
	;r2 = new task mailbox id
	;trashes
	;r3-r5

	;save prog counter
	(vp-cpy-rr r0 r4)

	;increment task count
	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_task_count r1)
	(vp-add-cr 1 r1)
	(vp-cpy-ri r1 r0 tk_statics_task_count)

	;create new task control block and task
	(vp-cpy-rr r4 r2)
	(vp-cpy-ir-ub r2 -1 r1)
	(vp-sub-rr r1 r2)
	(vp-cpy-ir-us r2 (neg short_size) r1)
	(vp-add-cr tk_node_stackspace r1)
	(f-call 'sys_mem 'alloc '(r1) '(r0 r1))

(errorcases
	(vp-push r0 r1)
	(f-call 'sys_mem 'clear '(r0 r1) '(_))
	(vp-pop r0 r1))

	;initialize task mailbox etc
	(vp-xor-rr r2 r2)
	(vp-cpy-ri r2 r0 0)
	(vp-lea-i r0 tk_node_mailbox r5)
	(ml-init r5 r2 r3)

	;init task control block stack, pc and stop address's
	(vp-lea-d r0 r1 r1)
	(stack-init)
	(vp-cpy-ri r1 r0 tk_node_stack)

	;resume new task
	(f-call 'sys_task 'resume '(r0))

	;return mailbox
	(f-bind 'sys_task 'statics r2)
	(f-exit 'sys_task 'start '(r0 (& r0 tk_node_mailbox) (r2 tk_statics_cpu_id)))
	(vp-ret)

(def-func-end)

(def-func 'sys/task_stop)
	;remove task control block
	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_current_tcb r1)
	(vp-cpy-rr r1 r2)
	(ln-remove-node r2 r14)

(errorcases
	;test stack space canary
	(vp-lea-i r1 tk_node_stackspace r2)
	(vp-lea-i r1 (add tk_node_stackspace 1024) r3)
	(vp-xor-rr r4 r4)
	(loop-while '(r2 != r3))
		(vp-cpy-ir r2 0 r5)
		(vp-or-rr r5 r4)
		(vp-add-cr ptr_size r2)
	(loop-end)
	(assert '(r4 == 0) "Stack overrun !"))

	;decrement task count
	(vp-cpy-ir r0 tk_statics_task_count r2)
	(vp-sub-cr 1 r2)
	(vp-cpy-ri r2 r0 tk_statics_task_count)

	;free our task control block
	(f-call 'sys_mem 'free '(r1))
	(f-jmp 'sys_task 'restore)

(def-func-end)

(def-func 'sys/task_tcb)
	;outputs
	;r0 = current task tcb

	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_current_tcb r0)
	(vp-ret)

(def-func-end)

(def-func 'sys/task_yield)
	;push task state
	(tk-save-state)

	;save old stack pointer
	(f-bind 'sys_task 'statics r14)
	(vp-cpy-ir r14 tk_statics_current_tcb r14)
	(vp-cpy-ri rsp r14 tk_node_stack)

	;get next task control block
	(ln-get-succ r14 0 r14)
	(f-jmp 'sys_task 'restore)

(def-func-end)

;;;;;;;;;;;;;;;;;;;;;;
; single child process
;;;;;;;;;;;;;;;;;;;;;;

(def-func 'sys/task_open)
	;inputs
	;r0 = name string object
	;outputs
	;r0, r1 = mailbox id
	;trashes
	;all

	(f-entry 'sys_task 'open '(r0))
	(f-bind 'sys_task 'statics r1)
	(f-jmp 'sys_task 'open_device '(r0 (r1 tk_statics_cpu_id)))

(def-func-end)

(def-func 'sys/task_open_child)
	;inputs
	;r0 = name string object
	;outputs
	;r0, r1 = mailbox ID
	;trashes
	;all

	(f-entry 'sys_task 'open_child '(r0))
	(f-bind 'sys_task 'statics r1)
	(f-jmp 'sys_task 'open_remote '(r0 (r1 tk_statics_cpu_id)))

(def-func-end)

(def-func 'sys/task_open_device)
	;inputs
	;r0 = name string object
	;r1 = cpu target
	;outputs
	;r0, r1 = mailbox id
	;trashes
	;all

	(ptr 'name 'msg)
	(ulong 'cpu)
	(struct 'id 'id)
	(struct 'mailbox 'mailbox)

	;save task info
	(push-scope)
	(f-entry 'sys_task 'open_device {name, cpu})

	;init temp mailbox
	(f-call 'sys_mail 'init_mailbox {&mailbox})

	;start task
	(f-call 'sys_mail 'alloc {} {msg})
	(assign {name->string_length + 1 + kn_msg_open_size} {msg->msg_length})
	(assign {0} {msg->msg_dest.id_mbox})
	(assign {cpu} {msg->msg_dest.id_cpu})
	(assign {&mailbox} {msg->kn_msg_reply_id.id_mbox})
	(f-call 'kernel 'id {} {msg->kn_msg_reply_id.id_cpu})
	(assign {kn_call_task_open} {msg->kn_msg_function})
	(f-call 'sys_mem 'copy {&name->string_data, &msg->kn_msg_open_pathname, name->string_length + 1})
	(f-call 'sys_mail 'send {msg})

	;wait for reply
	(f-call 'sys_mail 'read {&mailbox} {msg})
	(assign {msg->kn_msg_reply_id.id_mbox} {id.id_mbox})
	(assign {msg->kn_msg_reply_id.id_cpu} {id.id_cpu})
	(f-call 'sys_mem 'free {msg})

	;return ids array
	(f-exit 'sys_task 'open_device {id.id_mbox, id.id_cpu})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'sys/task_open_remote)
	;inputs
	;r0 = name string object
	;r1 = cpu target
	;outputs
	;r0, r1 = mailbox id
	;trashes
	;all

	(ptr 'name 'msg)
	(ulong 'cpu)
	(struct 'id 'id)
	(struct 'mailbox 'mailbox)

	;save task info
	(push-scope)
	(f-entry 'sys_task 'open_remote {name, cpu})

	;init temp mailbox
	(f-call 'sys_mail 'init_mailbox {&mailbox})

	;start task
	(f-call 'sys_mail 'alloc {} {msg})
	(assign {name->string_length + 1 + kn_msg_child_size} {msg->msg_length})
	(assign {0} {msg->msg_dest.id_mbox})
	(assign {cpu} {msg->msg_dest.id_cpu})
	(assign {&mailbox} {msg->kn_msg_reply_id.id_mbox})
	(f-call 'kernel 'id {} {msg->kn_msg_reply_id.id_cpu})
	(assign {kn_call_task_child} {msg->kn_msg_function})
	(f-call 'sys_mem 'copy {&name->string_data, &msg->kn_msg_child_pathname, name->string_length + 1})
	(f-call 'sys_mail 'send {msg})

	;wait for reply
	(f-call 'sys_mail 'read {&mailbox} {msg})
	(assign {msg->kn_msg_reply_id.id_mbox} {id.id_mbox})
	(assign {msg->kn_msg_reply_id.id_cpu} {id.id_cpu})
	(f-call 'sys_mem 'free {msg})

	;return ids array
	(f-exit 'sys_task 'open_remote {id.id_mbox, id.id_cpu})
	(pop-scope)
	(return)

(def-func-end)

;;;;;;;;;;;;;;;;;;;;;;;;
; multiple child process
;;;;;;;;;;;;;;;;;;;;;;;;

(def-func 'sys/task_open_farm)
	;inputs
	;r0 = name string object
	;r1 = number to spawn
	;outputs
	;r0 = array of mailbox id's
	;trashes
	;all

	(ptr 'name 'ids 'msg)
	(ulong 'length 'cpu 'index)
	(struct 'mailbox 'mailbox)

	;save task info
	(push-scope)
	(f-entry 'sys_task 'open_farm {name, length})

	;create output array
	(f-call 'array 'create {} {ids})
	(f-call 'array 'set_capacity {ids, length * 2})
	(f-call 'array 'set_length {ids, length * 2})

	;init temp mailbox
	(f-call 'sys_mail 'init_mailbox {&mailbox})

	;start all tasks in parallel
	(f-call 'kernel 'id {} {cpu})
	(assign {0} {index})
	(loop-while {index != length})
		(f-call 'sys_mail 'alloc {} {msg})
		(assign {name->string_length + 1 + kn_msg_child_size} {msg->msg_length})
		(assign {0} {msg->msg_dest.id_mbox})
		(assign {cpu} {msg->msg_dest.id_cpu})
		(assign {&mailbox} {msg->kn_msg_reply_id.id_mbox})
		(assign {cpu} {msg->kn_msg_reply_id.id_cpu})
		(assign {kn_call_task_child} {msg->kn_msg_function})
		(assign {index * 2} {msg->kn_msg_user})
		(f-call 'sys_mem 'copy {&name->string_data, &msg->kn_msg_child_pathname, name->string_length + 1})
		(f-call 'sys_mail 'send {msg})
		(assign {index + 1} {index})
	(loop-end)

	;wait for reply's
	(loop-while {index})
		(assign {index - 1} {index})
		(f-call 'sys_mail 'read {&mailbox} {msg})
		(d-call 'array 'set_element {ids, msg->kn_msg_reply_id.id_mbox, msg->kn_msg_user})
		(d-call 'array 'set_element {ids, msg->kn_msg_reply_id.id_cpu, msg->kn_msg_user + 1})
		(f-call 'sys_mem 'free {msg})
	(loop-end)

	;return ids array
	(f-exit 'sys_task 'open_farm {ids})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'sys/task_open_global)
	;inputs
	;r0 = name string object
	;r1 = number to spawn
	;outputs
	;r0 = array of mailbox id's
	;trashes
	;all

	(ptr 'name 'ids 'msg)
	(ulong 'length 'index)
	(struct 'mailbox 'mailbox)

	;save task info
	(push-scope)
	(f-entry 'sys_task 'open_global {name, length})

	;create output array
	(f-call 'array 'create {} {ids})
	(f-call 'array 'set_capacity {ids, length * 2})
	(f-call 'array 'set_length {ids, length * 2})

	;init temp mailbox
	(f-call 'sys_mail 'init_mailbox {&mailbox})

	;start all tasks in parallel
	(assign {0} {index})
	(loop-while {index != length})
		(f-call 'sys_mail 'alloc {} {msg})
		(assign {name->string_length + 1 + kn_msg_open_size} {msg->msg_length})
		(assign {0} {msg->msg_dest.id_mbox})
		(assign {index} {msg->msg_dest.id_cpu})
		(assign {&mailbox} {msg->kn_msg_reply_id.id_mbox})
		(f-call 'kernel 'id {} {msg->kn_msg_reply_id.id_cpu})
		(assign {kn_call_task_open} {msg->kn_msg_function})
		(assign {index * 2} {msg->kn_msg_user})
		(f-call 'sys_mem 'copy {&name->string_data, &msg->kn_msg_open_pathname, name->string_length + 1})
		(f-call 'sys_mail 'send {msg})
		(assign {index + 1} {index})
	(loop-end)

	;wait for reply's
	(loop-while {index})
		(assign {index - 1} {index})
		(f-call 'sys_mail 'read {&mailbox} {msg})
		(d-call 'array 'set_element {ids, msg->kn_msg_reply_id.id_mbox, msg->kn_msg_user})
		(d-call 'array 'set_element {ids, msg->kn_msg_reply_id.id_cpu, msg->kn_msg_user + 1})
		(f-call 'sys_mem 'free {msg})
	(loop-end)

	;return ids array
	(f-exit 'sys_task 'open_global {ids})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'sys/task_open_pipe)
	;inputs
	;r0 = vector of strings
	;outputs
	;r0 = array of mailbox id's
	;trashes
	;all

	(ptr 'tasks 'ids 'msg 'name)
	(ulong 'cpu 'index 'length)
	(struct 'mailbox 'mailbox)

	;save task info
	(push-scope)
	(f-entry 'sys_task 'open_pipe {tasks})

	;create output array
	(d-call 'vector 'get_length {tasks} {_, length})
	(f-call 'array 'create {} {ids})
	(f-call 'array 'set_capacity {ids, length * 2})
	(f-call 'array 'set_length {ids, length * 2})

	;init temp mailbox
	(f-call 'sys_mail 'init_mailbox {&mailbox})

	;start all tasks, starting on kernel of this chip
	(f-call 'kernel 'id {} {cpu})
	(assign {0} {index})
	(loop-while {index != length})
		(f-call 'sys_mail 'alloc {} {msg})
		(f-call 'vector 'get_element {tasks, index} {_, name})
		(assign {name->string_length + 1 + kn_msg_child_size} {msg->msg_length})
		(assign {0} {msg->msg_dest.id_mbox})
		(assign {cpu} {msg->msg_dest.id_cpu})
		(assign {&mailbox} {msg->kn_msg_reply_id.id_mbox})
		(f-call 'kernel 'id {} {msg->kn_msg_reply_id.id_cpu})
		(assign {kn_call_task_child} {msg->kn_msg_function})
		(f-call 'sys_mem 'copy {&name->string_data, &msg->kn_msg_child_pathname, name->string_length + 1})

		;send mail to kernel, wait for reply
		(f-call 'sys_mail 'send {msg})
		(f-call 'sys_mail 'read {&mailbox} {msg})

		;save reply mailbox ID
		(assign {msg->kn_msg_reply_id.id_cpu} {cpu})
		(d-call 'array 'set_element {ids, msg->kn_msg_reply_id.id_mbox, index * 2})
		(d-call 'array 'set_element {ids, cpu, index * 2 + 1})
		(f-call 'sys_mem 'free {msg})

		;next pipe worker
		(assign {index + 1} {index})
	(loop-end)

	;return ids array
	(f-exit 'sys_task 'open_pipe {ids})
	(pop-scope)
	(return)

(def-func-end)
