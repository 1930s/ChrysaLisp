(import 'sys/func.inc)
(import 'sys/link/link.inc)
(import 'sys/load/load.inc)
(import 'gui/sdl2.inc)
(import 'sys/kernel/kernel.inc)
(import 'sys/string/string.inc)
(import 'class/array/array.inc)

;;;;;;;;;;;;;
; kernel task
;;;;;;;;;;;;;

(def-func 'sys/kernel/kernel)
	;loader is already initialized when we get here !
	;inputs
	;r0 = argv pointer
	;r1 = SDL func table

	(ptr 'argv 'sdl 'tcb 'mbox 'task_statics 'link_statics 'func 'old_stack)
	(ptr 'msg 'data 'new_msg)
	(pptr 'iter_begin 'iter_end)
	(struct 'routes 'lk_table)
	(uint 'id 'num 'best_cnt 'best_id 'route_index 'hops 'new_hops 'via)

	;align stack
	(vp-cpy-rr rsp r2)
	(push-scope)
	(vp-and-cr -16 rsp)
	(l-entry {argv, sdl, old_stack})

	;init gui
	(f-call 'gui_gui 'init {sdl})

	;init allocator
	(f-call 'sys_mem 'init)

	;init tasks
	(f-call 'sys_task 'init)

	;init links
	(f-call 'sys_link 'init)

	;start kernel task
	(f-call 'sys_task 'start {$func_entry} {tcb, mbox, _})
	(assign (cat {@} (f-path 'sys_task 'statics)) {task_statics})
	(assign (cat {@} (f-path 'sys_link 'statics)) {link_statics})
	(assign {tcb} {task_statics->tk_statics_kernel_tcb})

	;init mailer
	(f-call 'sys_mail 'init {mbox})

	;process command options
	(f-call 'kernel 'opts {argv})

	;fill in num cpu's with at least mine + 1
	(f-call 'kernel 'id {} {id})
	(assign {id + 1} {task_statics->tk_statics_cpu_total})

	;allocate for kernel routing table
	(assign {0, 0} {routes.lk_table_array, routes.lk_table_array_size})

;;;;;;;;;;;;;;;;;;;;;;;
; main kernel task loop
;;;;;;;;;;;;;;;;;;;;;;;

	;loop till no other tasks running
	(loop-start)
		;allow all other tasks to run
		(f-call 'sys_task 'yield)

		;service all kernel mail
		(loop-start)
			;check if any mail
			(f-call 'sys_mail 'try_read {mbox} {msg})
			(breakifnot {msg})
			(assign {msg->msg_parcel_data} {data})

			;(switch) on kernel call number
			(assign {data->kn_msg_function} {num})
			(switch)
			(case {num == kn_call_open})
			(vp-label 'run_here)
				;fill in reply ID, user field is left alone !
				(assign {data->kn_msg_reply_id.id_mbox} {msg->msg_dest.id_mbox})
				(assign {data->kn_msg_reply_id.id_cpu} {msg->msg_dest.id_cpu})

				;open single task and return mailbox ID
				(f-call 'sys_load 'bind {&data->kn_msg_open_pathname} {func})
				(vpif {func})
					;start this function as task
					(f-call 'sys_task 'start {func} {_, data->kn_msg_reply_id.id_mbox, data->kn_msg_reply_id.id_cpu})
				(else)
					;error
					(assign {0, 0} {data->kn_msg_reply_id.id_mbox, data->kn_msg_reply_id.id_cpu})
				(endif)
				(f-call 'sys_mail 'send {msg})
				(break)
			(case {num == kn_call_child})
				;find best cpu to run task
				(assign {task_statics->tk_statics_task_count, id} {best_cnt, best_id})
				(f-call 'array 'get_iters {link_statics->lk_statics_links_array} {_, iter_begin, iter_end})
				(loop-while {iter_begin != iter_end})
					(vpif {(*iter_begin)->lk_node_task_count < best_cnt})
						(assign {(*iter_begin)->lk_node_task_count} {best_cnt})
						(assign {(*iter_begin)->lk_node_cpu_id} {best_id})
					(endif)
					(assign {iter_begin + ptr_size} {iter_begin})
				(loop-end)
				(gotoif {best_id == id} 'run_here)

				;send to better kernel
				(assign {best_id} {msg->msg_dest.id_cpu})
				(f-call 'sys_mail 'send {msg})
				(break)
			(case {num == kn_call_route})
				;increase size of network ?
				(vpif {data->kn_msg_link_route_origin >= task_statics->tk_statics_cpu_total})
					(assign {data->kn_msg_link_route_origin + 1} {task_statics->tk_statics_cpu_total})
				(endif)

				;new kernel routing table ?
				(assign {data->kn_msg_link_route_origin * lk_route_size} {route_index})
				(vpif {route_index + lk_route_size > routes.lk_table_array_size})
					(f-call 'sys_mem 'recalloc {routes.lk_table_array, routes.lk_table_array_size, route_index + lk_route_size}
						{routes.lk_table_array, routes.lk_table_array_size})
				(endif)

				;compare hop counts
				(assign {(routes.lk_table_array)[route_index].lk_route_hops} {hops})
				(assign {data->kn_msg_link_route_hops} {new_hops})
				(switch)
				(casenot {hops})
					;never seen, so better route
					(vp-jmp 'better_route)
				(case {new_hops < hops})
				(vp-label 'better_route)
					;new hops is less, so better route
					(assign {new_hops} {(routes.lk_table_array)[route_index].lk_route_hops})

					;fill in via route and remove other routes
					(f-call 'array 'get_iters {link_statics->lk_statics_links_array} {_, iter_begin, iter_end})
					(loop-while {iter_begin != iter_end})
						;new link route table ?
						(vpif {route_index + lk_route_size > (*iter_begin)->lk_node_table.lk_table_array_size})
							(f-call 'sys_mem 'recalloc {(*iter_begin)->lk_node_table.lk_table_array, (*iter_begin)->lk_node_table.lk_table_array_size, route_index + lk_route_size}
								{(*iter_begin)->lk_node_table.lk_table_array, (*iter_begin)->lk_node_table.lk_table_array_size})
						(endif)
						(vpif {(*iter_begin)->lk_node_cpu_id == data->kn_msg_link_route_via})
							;via route
							(assign {new_hops} {((*iter_begin)->lk_node_table.lk_table_array)[route_index].lk_route_hops})
						(else)
							;none via route
							(assign {0} {((*iter_begin)->lk_node_table.lk_table_array)[route_index].lk_route_hops})
						(endif)
						(assign {iter_begin + ptr_size} {iter_begin})
					(loop-end)
					(break)
				(case {new_hops == hops})
					;new hops is equal, so additional route
					(f-call 'array 'get_iters {link_statics->lk_statics_links_array} {_, iter_begin, iter_end})
					(loop-while {iter_begin != iter_end})
						;new link route table ?
						(vpif {route_index + lk_route_size > (*iter_begin)->lk_node_table.lk_table_array_size})
							(f-call 'sys_mem 'recalloc {(*iter_begin)->lk_node_table.lk_table_array, (*iter_begin)->lk_node_table.lk_table_array_size, route_index + lk_route_size}
								{(*iter_begin)->lk_node_table.lk_table_array, (*iter_begin)->lk_node_table.lk_table_array_size})
						(endif)
						(vpif {(*iter_begin)->lk_node_cpu_id == data->kn_msg_link_route_via})
							;via route
							(assign {new_hops} {((*iter_begin)->lk_node_table.lk_table_array)[route_index].lk_route_hops})
						(endif)
						(assign {iter_begin + ptr_size} {iter_begin})
					(loop-end)
					;drop through to discard message !
				(default)
					;new hops is greater, so worse route
					(vp-jmp 'drop_msg)
				(endswitch)

				;increment hop count
				(assign {data->kn_msg_link_route_hops + 1} {data->kn_msg_link_route_hops})

				;get current via, set via to my cpu id
				(assign {data->kn_msg_link_route_via} {via})
				(assign {id} {data->kn_msg_link_route_via})

				;copy and send to all neighbors apart from old via
				(f-call 'array 'get_iters {link_statics->lk_statics_links_array} {_, iter_begin, iter_end})
				(loop-while {iter_begin != iter_end})
					(vpif {(*iter_begin)->lk_node_cpu_id != via})
						(f-call 'sys_mail 'alloc {msg->msg_length} {new_msg})
						(f-call 'sys_mem 'copy {msg, new_msg, msg->msg_length})
						(assign {(*iter_begin)->lk_node_cpu_id} {new_msg->msg_dest.id_cpu})
						(f-call 'sys_mail 'send {new_msg})
					(endif)
					(assign {iter_begin + ptr_size} {iter_begin})
				(loop-end)
			(vp-label 'drop_msg)
				(f-call 'sys_mem 'free {msg})
				(break)
			(case {num == kn_call_callback})
				;call callback with this thread/stack
				(assign {data->kn_msg_user, data->kn_msg_callback_addr} '(r0 r1))
				(vp-call-r r1)

				;reply to originator
				(assign {data->kn_msg_reply_id.id_mbox} {msg->msg_dest.id_mbox})
				(assign {data->kn_msg_reply_id.id_cpu} {msg->msg_dest.id_cpu})
				(f-call 'sys_mail 'send {msg})
			(endswitch)
		(loop-end)

		;start any tasks ready to restart
		(f-call 'pii 'time '() '(r0))
		(f-bind 'sys_task 'statics r3)
		(vp-cpy-ir r3 tk_statics_current_tcb r14)
		(loop-list-forward r3 tk_statics_timer_list r1 r2)
			(vp-cpy-ir r1 tk_node_time r4)
			(breakif '(r4 > r0))

			;task ready, remove from timer list and place on ready list
			(vp-cpy-rr r1 r4)
			(ln-remove-node r4 r5)
			(ln-add-node-before r14 r1 r5)
		(loop-end)

		;next task if other ready tasks
		(ln-get-succ r14 0 r1)
		(continueif '(r14 != r1))

		;exit if no task waiting for timer
		(vp-cpy-ir r3 (add tk_statics_timer_list lh_list_head) r2)
		(ln-get-succ r2 0 r1)
		(breakif '(r1 == 0))

		;sleep till next wake time
		(vp-swp-rr r0 r2)
		(vp-cpy-ir r0 tk_node_time r0)
		(vp-sub-rr r2 r0)
		(vp-cpy-cr 1000 r3)
		(vp-xor-rr r2 r2)
		(vp-div-rrr r3 r2 r0)
		(vpif '(r0 < 1))
			(vp-cpy-cr 1 r0)
		(endif)
		(sdl-call 'sdl 'sdl_delay '(r0))
	(loop-end)

	;free any kernel routing table
	(f-call 'sys_mem 'free {routes.lk_table_array})

	;deinit allocator
	(f-call 'sys_mem 'deinit)

	;restore stack, exit back to main.c
	(assign {old_stack} '(rsp))
	(pop-scope-syms)
	(return)

(def-func-end)

(def-func 'sys/kernel/id)
	;outputs
	;r0 = cpu ID

	(f-bind 'sys_task 'statics r0)
	(f-exit 'kernel 'id '((r0 tk_statics_cpu_id ui)))
	(vp-ret)

(def-func-end)

(def-func 'sys/kernel/total)
	;outputs
	;r0 = cpu total

	(f-bind 'sys_task 'statics r0)
	(f-exit 'kernel 'total '((r0 tk_statics_cpu_total ui)))
	(vp-ret)

(def-func-end)

(def-func 'sys/kernel/opts)
	;process command options
	;inputs
	;r0 = argv array
	;trashes
	;all

	(pptr 'argv)
	(ptr 'arg)
	(plong 'table)
	(long 'offset)
	(int 'len)

	(push-scope)
	(f-entry 'kernel 'opts {argv})

	(loop-start)
		(assign {*argv} {arg})
		(breakifnot {arg})
		(assign {argv + ptr_size} {argv})
		(assign {$options_table} {table})
		(loop-start 'next_arg)
			(assign {*table} {offset})
			(breakifnot {offset})
			(assign {table + ptr_size} {table})
			(f-call 'sys_string 'compare {table, arg} {len})
			(vpifnot {len})
				(assign {argv, $options_table + offset} '(r0 r1))
				(vp-call-r r1)
				(assign '(r0) {argv})
				(break next_arg)
			(endif)
			(f-call 'sys_string 'length {table} {_, len})
			(assign {(table + len + ptr_size) & - ptr_size} {table})
		(loop-end)
	(loop-end)

	(pop-scope)
	(return)

(vp-label 'opt_cpu)
	;inputs
	;r0 = argv pointer
	;outputs
	;r0 = argv pointer updated

	(pptr 'argv)
	(ptr 'arg 'statics)
	(uint 'id)

	(push-scope)
	(l-entry {argv})

	;set cpu ID
	(assign {*argv} {arg})
	(vpif {arg})
		(f-call 'sys_string 'to_long {arg, 10} {id})
		(assign (cat {@} (f-path 'sys_task 'statics)) {statics})
		(assign {id} {statics->tk_statics_cpu_id})
	(endif)

	(l-exit {argv})
	(pop-scope)
	(return)

(vp-label 'opt_run)
	;inputs
	;r0 = argv pointer
	;outputs
	;r0 = argv pointer updated

	(pptr 'argv)
	(ptr 'arg)

	(push-scope)
	(l-entry {argv})

	;load and run task
	(assign {*argv} {arg})
	(vpif {arg})
		(f-call 'sys_load 'bind {arg} {arg})
		(vpif {arg})
			(f-call 'sys_task 'start {arg})
		(endif)
	(endif)

	(l-exit {argv})
	(pop-scope)
	(return)

(vp-label 'opt_link)
	;inputs
	;r0 = argv pointer
	;outputs
	;r0 = argv pointer updated

	(pptr 'argv)
	(ptr 'arg 'msg 'data)
	(struct 'mbox 'id)

	(push-scope)
	(l-entry {argv})

	;start link task
	(assign {*argv} {arg})
	(vpif {arg})
		;start link
		(f-call 'sys_task 'start (cat {@} (f-path 'sys_link 'link)) {_, mbox.id_mbox, mbox.id_cpu})

		;params message
		(f-call 'sys_mail 'alloc1 {mail_data_size} {msg, data})
		(assign {mbox.id_mbox} {msg->msg_dest.id_mbox})
		(assign {mbox.id_cpu} {msg->msg_dest.id_cpu})
		(f-call 'sys_string 'copy {$link_path, data} {_, data})
		(f-call 'sys_string 'copy {*argv, data - 1} {_, data})
		(assign {data - msg} {msg->msg_length})

		;send to link task
		(f-call 'sys_mail 'send {msg})
	(endif)

	(l-exit {argv})
	(pop-scope)
	(return)

(vp-label 'link_path)
	(vp-string "/tmp/") (vp-byte 0)

	(vp-align ptr_size)
(vp-label 'options_table)
	(vp-long (list 'sub (label-sym 'opt_cpu) (label-sym 'options_table)))
		(vp-string "-cpu") (vp-byte 0)
		(vp-align ptr_size)
	(vp-long (list 'sub (label-sym 'opt_run) (label-sym 'options_table)))
		(vp-string "-run") (vp-byte 0)
		(vp-align ptr_size)
	(vp-long (list 'sub (label-sym 'opt_link) (label-sym 'options_table)))
		(vp-string "-l") (vp-byte 0)
		(vp-align ptr_size)
	(vp-long 0)

(def-func-end)
