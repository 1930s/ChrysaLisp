(import 'sys/func.inc)
(import 'sys/mail.inc)
(import 'sys/task.inc)
(import 'sys/link.inc)
(import 'sys/load.inc)
(import 'gui/font.inc)
(import 'gui/sdl2.inc)

;;;;;;;;;;;;;
; kernel task
;;;;;;;;;;;;;

(def-func 'sys/kernel)
	;loader is already initialized when we get here !
	;inputs
	;r0 = argv pointer
	;r1 = SDL func table

	;save argv on stack
	(vp-push r0)

	;init gui
	(f-call 'gui_gui 'init '(r1))

	;init allocator
	(f-call 'sys_mem 'init)

	;init tasks
	(f-call 'sys_task 'init)

	;init linker
	(f-call 'sys_link 'init)

	;init font
	(f-call 'gui_font 'init)

	;start kernel task
	(f-call 'sys_task 'start '(($ _func_entry)) '(r0 r1 _))
	(f-bind 'sys_task 'statics r2)
	(vp-cpy-ri r0 r2 tk_statics_current_tcb)
	(vp-cpy-ri r0 r2 tk_statics_kernel_tcb)

	;init mailer, r1 = kernel mailbox !
	(f-call 'sys_mail 'init '(r1))

	;process command options
	(f-call 'sys_cpu 'opts '((rsp 0)))

	;fill in num cpu's with at least mine + 1
	(f-call 'sys_cpu 'id '() '(r0))
	(vp-add-cr 1 r0)
	(f-bind 'sys_task 'statics r1)
	(vp-cpy-ri r0 r1 tk_statics_cpu_total)

	;allocate for kernel routing table
	(vp-alloc lk_table_size)
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 rsp lk_table_array)
	(vp-cpy-ri r1 rsp lk_table_array_size)

;;;;;;;;;;;;;;;;;;;;;;;
; main kernel task loop
;;;;;;;;;;;;;;;;;;;;;;;

	;loop till no other tasks running
	(loop-start)
		;allow all other tasks to run
		(f-call 'sys_task 'yield)

		;service all kernel mail
		(loop-start)
			;check if any mail
			(f-call 'sys_task 'mailbox '() '(r0 r1))
			(f-call 'sys_mail 'try_read '(r0) '(r0))
			(breakif '(r0 == 0))
			(vp-cpy-rr r0 r14)

			;(switch) on kernel call number
			(vp-cpy-ir r14 kn_msg_function r1)
			(switch)
			(case '(r1 == kn_call_task_open))
			(vp-label 'run_here)
				;fill in reply ID, user field is left alone !
				(vp-cpy-ir r14 (add kn_msg_reply_id id_mbox) r1)
				(vp-cpy-ir r14 (add kn_msg_reply_id id_cpu) r2)
				(vp-cpy-ri r1 r14 (add msg_dest id_mbox))
				(vp-cpy-ri r2 r14 (add msg_dest id_cpu))

				;open single task and return mailbox ID
				(f-call 'sys_load 'bind '((& r14 kn_msg_open_pathname)) '(r0))
				(vpif '(r0 == 0))
					;error
					(vp-cpy-rr r0 r1)
				(else)
					;start this function as task
					(f-call 'sys_task 'start '(r0) '(_ r1 r0))
				(endif)
				(vp-cpy-ri r1 r14 (add kn_msg_reply_id id_mbox))
				(vp-cpy-ri r0 r14 (add kn_msg_reply_id id_cpu))
				(vp-cpy-cr kn_msg_reply_size r0)
				(vp-cpy-ri r0 r14 msg_length)
				(f-call 'sys_mail 'send '(r14))
				(break)
			(case '(r1 == kn_call_task_child))
				;find best cpu to run task
				(f-call 'sys_cpu 'id '() '(r4))
				(f-bind 'sys_task 'statics r1)
				(vp-cpy-ir r1 tk_statics_task_count r1)
				(f-bind 'sys_link 'statics r2)
				(loop-list-forward r2 lk_statics_links_list r3 r2)
					(vp-cpy-ir r3 lk_node_task_count r13)
					(vpif '(r1 > r13))
						(vp-cpy-ir r3 lk_node_cpu_id r0)
						(vp-cpy-ir r3 lk_node_task_count r1)
					(endif)
				(loop-end)
				(gotoif '(r0 == r4) 'run_here)

				;send to better kernel
				(vp-cpy-ri r0 r14 (add msg_dest id_cpu))
				(f-call 'sys_mail 'send '(r14))
				(break)
			(case '(r1 == kn_call_task_route))
				;increase size of network ?
				(f-bind 'sys_task 'statics r0)
				(vp-cpy-ir r14 kn_msg_link_route_origin r1)
				(vp-add-cr 1 r1)
				(vp-cpy-ir r0 tk_statics_cpu_total r13)
				(vpif '(r1 > r13))
					(vp-cpy-ri r1 r0 tk_statics_cpu_total)
				(endif)

				;new kernel routing table ?
				(vp-cpy-ir r14 kn_msg_link_route_origin r10)
				(vp-mul-cr lk_route_size r10)
				(f-call 'sys_mem 'recalloc '((rsp lk_table_array) (rsp lk_table_array_size) (& r10 lk_route_size)) '((rsp lk_table_array) (rsp lk_table_array_size)))

				;compare hop counts
				(vp-add-cr lk_route_hops r0)
				(vp-cpy-ir r14 kn_msg_link_route_hops r2)
				(vp-cpy-dr r0 r10 r3)
				(switch)
				(case '(r3 == 0))
					;never seen, so better route
					(vp-jmp 'better_route)
				(case '(r2 < r3))
				(vp-label 'better_route)
					;new hops is less, so better route
					(vp-cpy-rd r2 r0 r10)

					;fill in via route and remove other routes
					(vp-cpy-ir r14 kn_msg_link_route_via r12)
					(f-bind 'sys_link 'statics r13)
					(loop-list-forward r13 lk_statics_links_list r11 r13)
						;new link route table ?
						(f-call 'sys_mem 'recalloc '((r11 (add lk_node_table lk_table_array)) (r11 (add lk_node_table lk_table_array_size)) (& r10 lk_route_size)) '((r11 (add lk_node_table lk_table_array)) (r11 (add lk_node_table lk_table_array_size))))

						(vp-add-cr lk_route_hops r0)
						(vp-cpy-ir r11 lk_node_cpu_id r9)
						(vpif '(r12 == r9))
							;via route
							(vp-cpy-ir r14 kn_msg_link_route_hops r2)
							(vp-cpy-rd r2 r0 r10)
						(else)
							;none via route
							(vp-xor-rr r1 r1)
							(vp-cpy-rd r1 r0 r10)
						(endif)
					(loop-end)
					(break)
				(case '(r2 == r3))
					;new hops is equal, so additional route
					(vp-cpy-ir r14 kn_msg_link_route_via r12)
					(f-bind 'sys_link 'statics r13)
					(loop-list-forward r13 lk_statics_links_list r11 r13)
						;new link route table ?
						(f-call 'sys_mem 'recalloc '((r11 (add lk_node_table lk_table_array)) (r11 (add lk_node_table lk_table_array_size)) (& r10 lk_route_size)) '((r11 (add lk_node_table lk_table_array)) (r11 (add lk_node_table lk_table_array_size))))
						(vp-cpy-ir r11 lk_node_cpu_id r9)
						(vpif '(r12 == r9))
							;via route
							(vp-cpy-ir r14 kn_msg_link_route_hops r2)
							(vp-add-cr lk_route_hops r0)
							(vp-cpy-rd r2 r0 r10)
						(endif)
					(loop-end)
					;drop through to discard message !
				(default)
					;new hops is greater, so worse route
					(vp-jmp 'drop_msg)
				(endswitch)

				;increment hop count
				(vp-cpy-ir r14 kn_msg_link_route_hops r1)
				(vp-add-cr 1 r1)
				(vp-cpy-ri r1 r14 kn_msg_link_route_hops)

				;get current via, set via to my cpu id
				(vp-cpy-ir r14 kn_msg_link_route_via r13)
				(f-call 'sys_cpu 'id '() '((r14 kn_msg_link_route_via)))

				;copy and send to all neighbors apart from old via
				(f-bind 'sys_link 'statics r12)
				(loop-list-forward r12 lk_statics_links_list r11 r12)
					(vp-cpy-ir r11 lk_node_cpu_id r10)
					(continueif '(r10 == r13))
					(f-call 'sys_mail 'alloc '() '(r0))
					(vp-cpy-rr r0 r4)
					(vp-cpy-rr r0 r1)
					(vp-cpy-rr r14 r0)
					(vp-cpy-ir r14 msg_length r2)
					(vp-add-cr (dec ptr_size) r2)
					(vp-and-cr (neg ptr_size) r2)
					(f-call 'sys_mem 'copy '(r0 r1 r2))
					(vp-cpy-ri r10 r4 (add msg_dest id_cpu))
					(f-call 'sys_mail 'send '(r4))
				(loop-end)
			(vp-label 'drop_msg)
				(f-call 'sys_mem 'free '(r14))
				(break)
			(case '(r1 == kn_call_callback))
				;call callback with this thread/stack
				(vp-push r14)
				(vp-cpy-ir r14 kn_msg_user r0)
				(vp-call-i r14 kn_msg_callback_addr)

				;reply to originator
				(vp-pop r0)
				(vp-cpy-ir r0 (add kn_msg_reply_id id_mbox) r1)
				(vp-cpy-ir r0 (add kn_msg_reply_id id_cpu) r2)
				(vp-cpy-ri r1 r0 (add msg_dest id_mbox))
				(vp-cpy-ri r2 r0 (add msg_dest id_cpu))
				(f-call 'sys_mail 'send '(r0))
			(endswitch)
		(loop-end)

		;get time
		(f-call 'sys_cpu 'time '() '(r0))

		;start any tasks ready to restart
		(f-bind 'sys_task 'statics r3)
		(vp-cpy-ir r3 tk_statics_current_tcb r14)
		(vp-cpy-ir r3 (add tk_statics_timer_list lh_list_head) r2)
		(ln-get-succ r2 0 r2)
		(vpif '(r2 != 0))
			(loop-list-forward r3 tk_statics_timer_list r1 r2)
				(vp-cpy-ir r1 tk_node_time r4)
				(breakif '(r4 > r0))

				;task ready, remove from timer list and place on ready list
				(vp-cpy-rr r1 r4)
				(ln-remove-node r4 r5)
				(ln-add-node-before r14 r1 r5)
			(loop-end)
		(endif)

		;next task if other ready tasks
		(vp-cpy-ir r3 (add tk_statics_task_list lh_list_head) r2)
		(vp-cpy-ir r3 (add tk_statics_task_list lh_list_tailpred) r1)
		(continueif '(r2 != r1))

		;exit if no task waiting for timer
		(vp-cpy-ir r3 (add tk_statics_timer_list lh_list_head) r2)
		(ln-get-succ r2 0 r1)
		(breakif '(r1 == 0))

		;sleep till next wake time
		(vp-xchg-rr r0 r2)
		(vp-cpy-ir r0 tk_node_time r0)
		(vp-sub-rr r2 r0)
		(vp-cpy-cr 1000 r3)
		(vp-xor-rr r2 r2)
		(vp-div-rrr r3 r2 r0)
		(vpif '(r0 < 1))
			(vp-cpy-cr 1 r0)
		(endif)
		(sdl-delay '(r0))
	(loop-end)

	;free any kernel routing table
	(f-call 'sys_mem 'free '((rsp lk_table_array)))
	(vp-free lk_table_size)

	;deinit font
	(f-call 'gui_font 'deinit)

	;deinit mailer
	(f-call 'sys_mail 'deinit)

	;deinit tasks
	(f-call 'sys_task 'deinit)

	;deinit allocator
	(f-call 'sys_mem 'deinit)

	;deinit loader
	(f-call 'sys_load 'deinit)

	;pop argv and exit !
	(vp-free ptr_size)
	(sys-exit '(0))

(def-func-end)
