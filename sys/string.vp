(import 'sys/func.inc)
(import 'sys/string.inc)

(def-func 'sys/string_compare)
	;inputs
	;r0 = string1
	;r1 = string2
	;outputs
	;r0 = 0 if same, else -, +
	;trashes
	;r0-r3

	(f-entry 'sys_string 'compare '(r0 r1))
	(loop-start)
		(vp-cpy-ir-ub r0 0 r3)
		(vp-cpy-ir-ub r1 0 r2)
		(vp-sub-rr r3 r2)
		(breakif '(r2 != 0))
		(breakif '(r3 == 0))
		(vp-add-cr byte_size r0)
		(vp-add-cr byte_size r1)
	(loop-end)
	(f-exit 'sys_string 'compare '(r2))
	(vp-ret)

(def-func-end)

(def-func 'sys/string_copy)
	;inputs
	;r0 = string
	;r1 = string copy
	;outputs
	;r0 = string end
	;r1 = string copy end
	;trashes
	;r2

	(f-entry 'sys_string 'copy '(r0 r1))
	(loop-start)
		(vp-cpy-ir-ub r0 0 r2)
		(vp-cpy-ri-b r2 r1 0)
		(vp-add-cr byte_size r0)
		(vp-add-cr byte_size r1)
	(loop-until '(r2 == 0))
	(f-exit 'sys_string 'copy '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'sys/string_from_long)
	;inputs
	;r0 = number
	;r1 = string buffer
	;r2 = base
	;trashes
	;r0-r3, r5

	(f-entry 'sys_string 'from_long '(r0 r1 r2))
	(vp-cpy-rr r2 r3)	;base
	(vp-cpy-rr r1 r5)	;buffer start
	(loop-start)
		(vp-xor-rr r2 r2)
		(vp-div-rrr-u r3 r2 r0)
		(vp-add-cr (code "0") r2)
		(vpif '(r2 > (code "9")))
			(vp-add-cr (sub (code "A") (code ":")) r2)
		(endif)
		(vp-cpy-ri-b r2 r5 0)
		(vp-add-cr byte_size r5)
	(loop-until '(r0 == 0))
	(vp-cpy-ri-b r0 r5 0)
	(loop-start)
		(vp-sub-cr byte_size r5)
		(breakif '(r5 == r1))
		(vp-cpy-ir-ub r1 0 r2)
		(vp-cpy-ir-ub r5 0 r3)
		(vp-cpy-ri-b r3 r1 0)
		(vp-cpy-ri-b r2 r5 0)
		(vp-add-cr byte_size r1)
	(loop-until '(r1 == r5))
	(vp-ret)

(def-func-end)

(def-func 'sys/string_hash)
	;inputs
	;r0 = string
	;outputs
	;r1 = string hash
	;trashes
	;r0, r2

	(f-entry 'sys_string 'hash '(r0))
	(vp-cpy-cr 5381 r1)
	(loop-start)
		(vp-cpy-ir-ub r0 0 r2)
		(breakif '(r2 == 0))
		(vp-add-cr byte_size r0)
		(vp-mul-cr 33 r1)
		(vp-add-rr r2 r1)
	(loop-end)
	(f-exit 'sys_string 'hash '(r1))
	(vp-ret)

(def-func-end)

(def-func 'sys/string_length)
	;inputs
	;r0 = string
	;outputs
	;r0 = string
	;r1 = string len
	;trashes
	;r2

	(f-entry 'sys_string 'length '(r0))
	(vp-cpy-rr r0 r1)
	(loop-start)
		(vp-cpy-ir-ub r1 0 r2)
		(breakif '(r2 == 0))
		(vp-add-cr byte_size r1)
	(loop-end)
	(vp-sub-rr r0 r1)
	(f-exit 'sys_string 'length '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'sys/string_to_long)
	;inputs
	;r0 = string
	;r1 = base
	;outputs
	;r0 = number
	;trashes
	;r2-r3, r5

	(f-entry 'sys_string 'to_long '(r2 r1))

	(vp-xor-rr r0 r0)
	(vp-xor-rr r5 r5)
	(loop-start)
		(vp-cpy-ir-ub r2 0 r3)
		(breakif '(r3 == 0))
		(vpif '(r3 == (code ".")))
			(vp-cpy-cr 1 r5)
		(else)
			(vpif '(r3 >= (code "a")))
				(vp-sub-cr (sub (code "a") (code "A")) r3)
			(endif)
			(vpif '(r3 >= (code "A")))
				(vp-sub-cr (sub (code "A") (code "9") 1) r3)
			(endif)
			(vp-sub-cr (code "0") r3)
			(vp-mul-rr r1 r0)
			(vp-mul-rr r1 r5)
			(vp-add-rr r3 r0)
		(endif)
		(vp-add-cr byte_size r2)
	(loop-end)
	(vpif '(r5 != 0))
		(vp-shl-cr 16 r0)
		(vp-ext-rr r0 r2)
		(vp-cpy-rr r5 r1)
		(vp-div-rrr r1 r2 r0)
	(endif)

	(f-exit 'sys_string 'to_long '(r0))
	(vp-ret)

(def-func-end)
