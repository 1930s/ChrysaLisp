(import 'sys/func.inc)
(import 'sys/load.inc)
(import 'class/string/string.inc)

(defcvar 'list_loaded nil)

(def-func 'sys/load_statics)
	(times ld_statics_size (vp-byte 0))
(def-func-end)

(def-func 'sys/load_init)
	;inputs
	;r0 = system argv
	;r1 = SDL function table

	;save inputs
	(vp-push r0 r1)

	;allocate relloc/stat/name buffer
	(sys-mmap '(0 ld_reloc_buf_size (bit-or prot_read prot_write) (bit-or map_private map_anon) -1 0) '(r3))

	;set prebound functions as read/write/executable
	(vp-lea-p '_func_start r0)
	(vp-cpy-rr r0 r1)
	(loop-start)
	 	(vp-cpy-ir-ui r1 fn_header_length r2)
		(breakif '(r2 == 0))
		(vp-add-rr r2 r1)
	(loop-end)
	(vp-and-cr (neg ld_page_size) r0)
	(vp-sub-rr r0 r1)
	(sys-push-trashed)
	(sys-mprotect '(r0 r1 (bit-or prot_read prot_write prot_exec)) '(_))
	(sys-pop-trashed)

	;get loader statics and bind function !
	(vp-lea-p '_func_start r6)
	(vp-cpy-ir-ui r6 fn_header_length r0)
	(vp-add-rr r0 r6)
	(vp-cpy-rr r6 r5)
	(vp-cpy-ir-ui r6 fn_header_length r0)
	(vp-add-rr r0 r6)
	(vp-cpy-ir-ui r6 fn_header_entry r0)
	(vp-add-rr r0 r6)
	(vp-cpy-ir-ui r5 fn_header_entry r0)
	(vp-add-rr r0 r5)

	;init reloc buffer address etc
	(vp-cpy-ri r3 r6 ld_statics_reloc_stack)
	(vp-cpy-ri r3 r6 ld_statics_reloc_buffer)
	(vp-add-cr ld_reloc_size r3)
	(vp-cpy-ri r3 r6 ld_statics_stat_buffer)
	(vp-add-cr stat_size r3)
	(vp-cpy-ri r3 r6 ld_statics_name_buffer)

	;add all prebound functions to function list
	(vp-lea-p '_func_start r1)
	(loop-start)
	 	(vp-cpy-ir-ui r1 fn_header_length r2)
		(breakif '(r2 == 0))
		(vp-cpy-ir r6 ld_statics_function_flist r0)
		(vp-cpy-ri r0 r1 0)
		(vp-cpy-ri r1 r6 ld_statics_function_flist)
		(vp-add-rr r2 r1)
	(loop-end)

	;bind all prebound function intra references
	(vp-lea-p '_func_start r2)
	(loop-start)
		(vp-cpy-ir-ui r2 fn_header_length r1)
		(breakif '(r1 == 0))
		(vp-cpy-ir-ui r2 fn_header_links r0)
		(vp-add-rr r2 r0)
		(vp-add-rr r1 r2)
		(loop-start)
			(vp-cpy-ir r0 0 r1)
			(breakif '(r1 == 0))
			(vp-push r0 r2 r5)
			(vp-add-rr r1 r0)
			(vp-call-r r5)		;sys/load_bind
			(vpif '(r0 == 0))
				;no such function
				(vp-lea-p 'bind_error r0)
				(sys-write-string `(2 r0 (sub ,(label-sym 'bind_error_end) ,(label-sym 'bind_error))) '(_))
				(vp-cpy-ir rsp (mul ptr_size 2) r0)
				(vp-cpy-ir r0 0 r2)
				(vp-add-rr r2 r0)
				(vp-call 'string_skip)
				(vp-lea-i r0 -1 r1)
				(vp-cpy-ir rsp (mul ptr_size 2) r0)
				(vp-cpy-ir r0 0 r2)
				(vp-add-rr r2 r0)
				(vp-sub-rr r0 r1)
				(sys-write-string '(2 r0 r1) '(_))
				(vp-cpy-cr char_lf r1)
				(sys-write-char '(2 r1) '(_))
				(sys-exit '(1))
			(endif)
			(vp-cpy-rr r0 r1)
			(vp-pop r0 r2 r5)
			(vp-cpy-ri r1 r0 0)
			(vp-add-cr ptr_size r0)
		(loop-end)
	(loop-end)

	;kernel inputs
	(vp-pop r0 r1)
	(f-jmp 'sys_sys 'kernel '(r0 r1))

(vp-label 'string_skip)
	(loop-start)
		(vp-cpy-ir-ub r0 0 r1)
		(vp-add-cr byte_size r0)
	(loop-until '(r1 == 0))
	(vp-ret)

(vp-label 'bind_error)
	(vp-string "Prebind error: ")
(vp-label 'bind_error_end)

(def-func-end)

(def-func 'sys/load_deinit)
	;free relloc buffer
	(f-bind 'sys_load 'statics r0)
	(sys-munmap '((r0 ld_statics_reloc_buffer) ld_reloc_buf_size) '(_))

	;free all function blocks
	(f-bind 'sys_load 'statics r0)
	(loop-flist r0 ld_statics_block_flist r1 r2)
		(vp-cpy-rr r1 r0)
		(ln-remove-fnode r1 r2)
		(sys-push-trashed)
		(sys-munmap '(r0 ld_block_size) '(_))
		(sys-pop-trashed)
	(loop-end)
	(vp-ret)

(def-func-end)

(def-func 'sys/load_bind)
	;input
	;r0 = function path name
	;output
	;r0 = 0 else, function entry pointer
	;trashes
	;r1-r3, r5-r8

(vp-label 'ld_load_function)
	;save pathname
	(vp-cpy-rr r0 r7)

	;get loader statics !
	(vp-lea-p '_func_start r8)
	(vp-cpy-ir-ui r8 fn_header_length r0)
	(vp-add-rr r0 r8)
	(vp-cpy-ir-ui r8 fn_header_entry r0)
	(vp-add-rr r0 r8)

	;check if function already present !
	(loop-flist r8 ld_statics_function_flist r6 r6)
		(vp-cpy-rr r7 r0)
		(vp-lea-i r6 fn_header_pathname r1)
		(vp-call 'string_compare)
	(loop-until '(r0 == 0))
	(vpif '(r6 != 0))
		;found function already loaded
		(vp-cpy-ir-ui r6 fn_header_entry r0)
		(vp-add-rr r6 r0)
		(vp-ret)
	(endif)

	;create filename
	(fn-string "obj/" r0)
	(vp-cpy-ir r8 ld_statics_name_buffer r1)
	(vp-call 'string_copy)
	(vp-cpy-rr r7 r0)
	(vp-sub-cr 1 r1)
	(vp-call 'string_copy)
	(vp-cpy-ir r8 ld_statics_name_buffer r7)

	;get length of function on disk
	(vp-cpy-ir r8 ld_statics_stat_buffer r0)
	(sys-push-trashed)
	(sys-stat '(r7 r0) '(r0))
	(sys-pop-trashed)
	(vpif '(r0 != 0))
	(vp-label 'exit)
		(vp-xor-rr r0 r0)
		(vp-ret)
	(endif)

	;test for regular file only
	(vp-cpy-ir r8 ld_statics_stat_buffer r0)
	(vp-cpy-ir-us r0 stat_mode r0)
	(vp-and-cr s_ifmt r0)
	(gotoif '(r0 != s_ifreg) 'exit)

	;ensure space for new function
	(vp-cpy-ir r8 ld_statics_block_start r1)
	(vp-cpy-ir r8 ld_statics_block_end r2)
	(vp-cpy-ir r8 ld_statics_stat_buffer r0)
	(vp-sub-rr r1 r2)
	(vp-cpy-ir r0 stat_fsize r0)
	(vpif '(r2 < r0))
		;not enough so allocate new function buffer
		(sys-push-trashed)
		(sys-mmap '(0 ld_block_size (bit-or prot_read prot_write prot_exec) (bit-or map_private map_anon) -1 0) '(r0))
		(sys-pop-trashed)
		(assert '(r0 != 0))

		;add to block list for freeing
		(ln-add-fnode r8 ld_statics_block_flist r0 r1)

		;set block pointers for loading
		(vp-add-cr ptr_size r0)
		(vp-cpy-ri r0 r8 ld_statics_block_start)
		(vp-add-cr (sub ld_block_size ptr_size) r0)
		(vp-cpy-ri r0 r8 ld_statics_block_end)
	(endif)

(when list_loaded
	;print loaded function name
	(vp-cpy-rr r7 r0)
	(vp-call 'string_skip)
	(vp-lea-i r0 -1 r1)
	(vp-sub-rr r7 r1)
	(sys-push-trashed)
	(sys-write-string '(2 r7 r1) '(_))
	(sys-write-char '(2 char_lf) '(_))
	(sys-pop-trashed))

	;open function file
	(sys-push-trashed)
	(sys-open '(r7 o_rdonly 0) '(r0))
	(sys-pop-trashed)
	(vp-cpy-rr r0 r7)

	;read into buffer
	(vp-cpy-ir r8 ld_statics_block_start r3)
	(vp-cpy-ir r8 ld_statics_stat_buffer r2)
	(sys-push-trashed)
	(sys-read '(r7 r3 (r2 stat_fsize)) '(_))
	(sys-pop-trashed)

	;close function file
	(sys-push-trashed)
	(sys-close '(r7) '(_))
	(sys-pop-trashed)

	;check loaded length equals file size
	(vp-cpy-ir-ui r3 fn_header_length r0)
	(vp-cpy-ir r2 stat_fsize r1)
	(vpif '(r0 != r1))
		(vp-lea-p 'size_error r0)
		(sys-write-string `(2 r0 (sub ,(label-sym 'size_error_end) ,(label-sym 'size_error))) '(_))
		(sys-exit '(1))
	(endif)

	;add to function list
	(ln-add-fnode r8 ld_statics_function_flist r3 r0)

	;relocate vtable so we can discard paths
	(vp-cpy-ir r8 ld_statics_reloc_stack r1)
	(vp-cpy-rr r1 r6)

	;copy paths to reloc buffer
	(vp-cpy-ir-ui r3 fn_header_paths r0)
	(vp-cpy-ir-ui r3 fn_header_length r2)
	(vp-add-rr r3 r0)
	(vp-add-rr r3 r2)
	(loop-while '(r0 < r2))
	 	(vp-cpy-ir r0 0 r5)
		(vp-cpy-ri r5 r1 0)
		(vp-add-cr ptr_size r0)
		(vp-add-cr ptr_size r1)
	(loop-end)

	;push reloc buffer entry
	(vp-add-cr ptr_size r1)
	(vp-cpy-ri r6 r1 (neg ptr_size))
	(vp-cpy-ri r1 r8 ld_statics_reloc_stack)

	;overflow check
	(vp-cpy-ir r8 ld_statics_reloc_buffer r2)
	(vp-add-cr ld_reloc_size r2)
	(vpif '(r1 > r2))
		(vp-lea-p 'reloc_error r0)
		(sys-write-string `(2 r0 (sub ,(label-sym 'reloc_error_end) ,(label-sym 'reloc_error))) '(_))
		(sys-exit '(1))
	(endif)

	;bind links to paths in reloc buffer
	(vp-cpy-ir-ui r3 fn_header_links r0)
	(vp-cpy-ir-ui r3 fn_header_paths r2)
	(vp-add-rr r3 r0)
	(vp-add-rr r3 r2)
	(vp-sub-rr r2 r6)
	(loop-start)
	 	(vp-cpy-ir r0 0 r2)
		(breakif '(r2 == 0))
		(vp-add-rr r0 r2)
		(vp-add-rr r6 r2)
		(vp-cpy-ri r2 r0 0)
		(vp-add-cr ptr_size r0)
	(loop-end)

	;adjust block start
	(vp-add-cr ptr_size r0)
	(vp-cpy-ri r0 r8 ld_statics_block_start)

	;load and link function references
	;now actual addresses of strings in the reloc buffer
	(vp-cpy-ir-ui r3 fn_header_links r0)
	(vp-add-rr r3 r0)
	(vp-push r3)
	(loop-start)
		(vp-cpy-ir r0 0 r1)
		(breakif '(r1 == 0))
		(vp-push r0)
		(vp-cpy-rr r1 r0)
		(vp-call 'ld_load_function)
		(vpif '(r0 == 0))
			;no such file
			(vp-lea-p 'bind_error r0)
			(sys-write-string `(2 r0 (sub ,(label-sym 'bind_error_end) ,(label-sym 'bind_error))) '(_))
			(vp-cpy-ir rsp 0 r0)
			(vp-cpy-ir r0 0 r0)
			(vp-call 'string_skip)
			(vp-lea-i r0 -1 r1)
			(vp-cpy-ir rsp 0 r0)
			(vp-cpy-ir r0 0 r0)
			(vp-sub-rr r0 r1)
			(sys-write-string '(2 r0 r1) '(_))
			(vp-cpy-cr char_lf r1)
			(sys-write-char '(2 r1) '(_))
			(sys-exit '(1))
		(endif)
		(vp-cpy-rr r0 r1)
		(vp-pop r0)
		(vp-cpy-ri r1 r0 0)
		(vp-add-cr ptr_size r0)
	(loop-end)
	(vp-pop r3)

	;get loader statics !
	(vp-lea-p '_func_start r8)
	(vp-cpy-ir-ui r8 fn_header_length r0)
	(vp-add-rr r0 r8)
	(vp-cpy-ir-ui r8 fn_header_entry r0)
	(vp-add-rr r0 r8)

	;pop reloc buffer
	(vp-cpy-ir r8 ld_statics_reloc_stack r0)
	(vp-cpy-ir r0 (neg ptr_size) r0)
	(vp-cpy-ri r0 r8 ld_statics_reloc_stack)

	;return function address
	(vp-cpy-ir-ui r3 fn_header_entry r0)
	(vp-add-rr r3 r0)
	(vp-ret)

(vp-label 'string_compare)
	(loop-start)
		(vp-cpy-ir-ub r0 0 r2)
		(vp-cpy-ir-ub r1 0 r3)
		(vp-sub-rr r3 r2)
		(breakif '(r2 != 0))
		(breakif '(r3 == 0))
		(vp-add-cr byte_size r0)
		(vp-add-cr byte_size r1)
	(loop-end)
	(vp-cpy-rr r2 r0)
	(vp-ret)

(vp-label 'string_copy)
	(loop-start)
		(vp-cpy-ir-ub r0 0 r2)
		(vp-cpy-ri-b r2 r1 0)
		(vp-add-cr byte_size r0)
		(vp-add-cr byte_size r1)
	(loop-until '(r2 == 0))
	(vp-ret)

(vp-label 'string_skip)
	(loop-start)
		(vp-cpy-ir-ub r0 0 r1)
		(vp-add-cr byte_size r0)
	(loop-until '(r1 == 0))
	(vp-ret)

(vp-label 'bind_error)
	(vp-string "Bind error: ")
(vp-label 'bind_error_end)

(vp-label 'reloc_error)
	(vp-string "Reloc buffer overflow !") (vp-byte char_lf)
(vp-label 'reloc_error_end)

(vp-label 'size_error)
	(vp-string "Length field error !") (vp-byte char_lf)
(vp-label 'size_error_end)

(def-func-end)
