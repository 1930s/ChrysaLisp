(import 'inc/func.inc)
(import 'inc/syscall.inc)
(import 'inc/string.inc)
(import 'inc/load.inc)

(def-func 'sys/io_open)
	;inputs
	;r0 = filename
	;r1 = mode
	;r2 = flags
	;outputs
	;r0 = fd

	(sys-open r0 r1 r2)
	(vp-ret)

(def-func-end)

(def-func 'sys/io_close)
	;inputs
	;r0 = fd

	(sys-close r0)
	(vp-ret)

(def-func-end)

(def-func 'sys/io_read_line)
	;inputs
	;r0 = buffer address
	;r1 = buffer size
	;r2 = fd
	;outputs
	;r0 = chars read
	;trashes
	;r0-r3, r5

	(vp-cpy-rr r0 r3)
	(vp-cpy-rr r0 r5)
	(vp-add-rr r0 r1)
	(loop-while '(r5 != r1))
		(sys-read-char r2)
		(vp-cpy-ri-b r0 r5 0)
		(vp-inc r5)
	(loop-until '(r0 == 10))
	(vp-cpy-rr r5 r0)
	(vp-sub-rr r3 r0)
	(vp-ret)

(def-func-end)

(def-func 'sys/io_write_char)
	;inputs
	;r0 = char
	;r1 = fd

	(sys-write-char r1 r0)
	(vp-ret)

(def-func-end)

(def-func 'sys/io_write_str)
	;inputs
	;r0 = string
	;r1 = fd
	;trashes
	;r1-r3

	(vp-cpy-rr r1 r3)
	(f-call 'sys_string 'length '(r0) '(r1))
	(sys-write-string r3 r0 r1)
	(vp-ret)

(def-func-end)

(def-func 'sys/io_write_num)
	;inputs
	;r0 = number
	;r1 = fd
	;r2 = base
	;trashes
	;r0, r2-r3, r5

	(vp-cpy-rr r2 r3)	;base
	(vp-cpy-rr r4 r5)	;stack location
	(loop-start)
		(vp-xor-rr r2 r2)
		(vp-div-rrr r3 r2 r0)
		(vp-push r2)
	(loop-until '(r0 == 0))
	(loop-start)
		(vp-pop r0)
		(vp-add-cr (code "0") r0)
		(vpif '(r0 > (code "9")))
			(vp-add-cr (sub (code "A") (code ":")) r0)
		(endif)
		(sys-write-char r1 r0)
	(loop-until '(r5 == r4))
	(vp-ret)

(def-func-end)

(def-func 'sys/io_debug_long)
	;inputs
	;r0 = function name
	;r1 = line number
	;r2 = debug string
	;r3 = debug int
	;trashes
	;r0-r3, r5

	(def-struct 'local)
		(long 'local_name)
		(long 'local_line)
		(long 'local_string)
		(long 'local_long)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r1 r2 r3) '((r4 local_name) (r4 local_line) (r4 local_string) (r4 local_long)))

	(f-call 'sys_io 'string '((r4 local_name) 2))
	(f-call 'sys_io 'string '("< " 2))
	(f-call 'sys_io 'number '((r4 local_line) 2 10))
	(f-call 'sys_io 'string '(" >: " r1))
	(f-call 'sys_io 'string '((r4 local_string) 2))
	(f-call 'sys_io 'string '(" :-> 0x" 2))
	(f-call 'sys_io 'number '((r4 local_long) 2 16))
	(f-call 'sys_io 'char '(10 2))

	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'sys/io_debug_str)
	;inputs
	;r0 = function name
	;r1 = line number
	;r2 = debug string
	;r3 = debug string
	;trashes
	;r0-r3, r5

	(def-struct 'local)
		(long 'local_name)
		(long 'local_line)
		(long 'local_string)
		(long 'local_str)
	(def-struct-end)

	;save inputs
	(vp-sub-cr local_size r4)
	(assign '(r0 r1 r2 r3) '((r4 local_name) (r4 local_line) (r4 local_string) (r4 local_str)))

	(f-call 'sys_io 'string '((r4 local_name) 2))
	(f-call 'sys_io 'string '("< " 2))
	(f-call 'sys_io 'number '((r4 local_line) 2 10))
	(f-call 'sys_io 'string '(" >: " r1))
	(f-call 'sys_io 'string '((r4 local_string) 2))
	(f-call 'sys_io 'string '(" :-> " 2))
	(f-call 'sys_io 'string '((r4 local_str) 2))
	(f-call 'sys_io 'char '(10 2))

	(vp-add-cr local_size r4)
	(vp-ret)

(def-func-end)

(def-func 'sys/io_date)
	;inputs
	;r0 = function name
	;outputs
	;r0 = 0 if error, else modified date
	;trashes
	;r0-r2

	;save filename
	(vp-cpy-rr r0 r2)

	;get length of function on disk
	(f-bind 'sys_load 'statics r1)
	(vp-lea-i r1 ld_statics_stat_buffer r0)
	(sys-stat r2 r0)
	(vpif '(r0 != 0))
	(vp-label 'exit)
		(vp-xor-rr r0 r0)
		(vp-ret)
	(endif)

	;get file modified date
	(vp-cpy-ir-us r1 (add ld_statics_stat_buffer stat_mtime) r0)
	(vp-ret)

(def-func-end)
