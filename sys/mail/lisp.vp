(import 'sys/func.inc)
(import 'sys/mail/class.inc)
(import 'class/string/class.inc)
(import 'class/array/class.inc)
(import 'class/integer/class.inc)
(import 'class/lisp/class.inc)

(def-method 'sys_mail 'lisp_mymail)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
(errorcases
	(uint 'length))

	(push-scope)
	(entry 'sys_mail 'lisp_mymail {this, args})

(errorcases
	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length} 'error1))

	(call 'sys_mail 'mymail nil {value, _})
	(call 'sys_mail 'free_obj {value} {value, _, _})

(vp-label 'funcexit)
	(exit 'sys_mail 'lisp_mymail {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(mail-mymail)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_mail 'lisp_trymail)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
(errorcases
	(uint 'length))

	(push-scope)
	(entry 'sys_mail 'lisp_trymail {this, args})

(errorcases
	(d-call 'vector 'get_length {args} {_, length})
	(errorif {length} 'error1))

	(call 'sys_mail 'trymail nil {value, _})
	(vpif {value})
		(call 'sys_mail 'free_obj {value} {value, _, _})
	(else)
		(call 'obj 'ref {this->lisp_sym_nil} {value})
	(endif)

(vp-label 'funcexit)
	(exit 'sys_mail 'lisp_trymail {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(mail-trymail)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit))

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_mail 'lisp_send)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2)

	(push-scope)
	(entry 'sys_mail 'lisp_send {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2} {value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'obj 'inst_of (cat {arg0, @} (f-path 'string 'vtable)) {_, value})
	(vpif {value})
		(call 'sys_mail 'alloc_obj {arg0, &arg0->string_data, arg0->string_length} {arg2})
		(goto 'sendit)
	(endif)
	(call 'obj 'inst_of (cat {arg0, @} (f-path 'vector 'vtable)) {_, value})
	(vpif {value})
		(call 'sys_mail 'alloc_obj {arg0, arg0->array_array, arg0->array_length * long_size} {arg2})
		(goto 'sendit)
	(endif)
	(call 'obj 'inst_of (cat {arg0, @} (f-path 'array 'vtable)) {_, value})
	(errorifnot {value} 'error1)
	(call 'string 'create_from_buffer {arg0->array_array, arg0->array_length * long_size} {value})
	(call 'sys_mail 'alloc_obj {value, &value->string_data, value->string_length} {arg2})
	(call 'obj 'deref {value})
(vp-label 'sendit)
	(assign {arg1} {arg2->msg_dest.id_id})
	(call 'sys_mail 'send {arg2})
	(call 'obj 'ref {arg0} {value})

(vp-label 'funcexit)
	(exit 'sys_mail 'lisp_send {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(mail-send obj mbox)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'obj 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_mail 'lisp_declare)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1)

	(push-scope)
	(entry 'sys_mail 'lisp_declare {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 2} {value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'sys_mail 'declare {&arg0->string_data, arg1})
	(call 'obj 'ref {arg0} {value})

(vp-label 'funcexit)
	(exit 'sys_mail 'lisp_declare {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(mail-declare name mbox)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'string 'integer))

	(pop-scope-syms)

(def-func-end)

(def-method 'sys_mail 'lisp_enquire)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args)
	(ulong 'value 'arg0)

	(push-scope)
	(entry 'sys_mail 'lisp_enquire {this, args})

(errorcases
	(call 'lisp 'env_args_type {args, $sig, 1} {value})
	(errorifnot {value} 'error1))

	(call 'lisp 'env_args_set {args, &arg0, 0})
	(call 'sys_mail 'enquire {&arg0->string_data} {value})
	(vpif {value})
		(call 'integer 'create {value} {value})
	(else)
		(call 'obj 'ref {this->lisp_sym_nil} {value})
	(endif)

(vp-label 'funcexit)
	(exit 'sys_mail 'lisp_enquire {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(call 'lisp 'repl_error {this, "(mail-enquire name)", error_msg_wrong_types, args} {_, value})
	(goto 'funcexit)
	(signature 'sig 'string))

	(pop-scope-syms)

(def-func-end)
