(import 'sys/func.inc)
(import 'sys/mail/mail.inc)
(import 'class/string/string.inc)
(import 'class/array/array.inc)
(import 'class/lisp/lisp.inc)

(def-func 'sys/mail/lisp_mymail)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
(errorcases
	(uint 'length))

	(push-scope)
	(f-entry 'sys_mail 'lisp_mymail {this, args})

(errorcases
	(v-call 'vector 'get_length {args} {_, length})
	(errorif {length} 'error1))

	(f-call 'sys_mail 'mymail nil {value, _})
	(f-call 'sys_mail 'free_obj {value} {value, _, _})

(vp-label 'exit)
	(f-exit 'sys_mail 'lisp_mymail {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(mail-mymail)", error_msg_wrong_types, args} {_, value})
	(goto 'exit))

	(pop-scope-syms)

(def-func-end)

(def-func 'sys/mail/lisp_send)
	;inputs
	;r0 = lisp object (ptr)
	;r1 = args vector object (ptr)
	;outputs
	;r0 = lisp object (ptr)
	;r1 = return value object (ptr)

	(ptr 'this 'args 'value)
	(ulong 'arg0 'arg1 'arg2)

	(push-scope)
	(f-entry 'sys_mail 'lisp_send {this, args})

(errorcases
	(f-call 'lisp 'env_args_type {this, args, $sig, 2} {_, value})
	(errorifnot {value} 'error1))

	(f-call 'lisp 'env_args_set {this, args, &arg0, 0})
	(f-call 'obj 'inst_of (cat {arg0, @} (f-path 'class 'string)) {_, value})
	(vpif {value})
		(f-call 'sys_mail 'alloc_obj {arg0, &arg0->string_data, arg0->string_length} {arg2})
		(goto 'sendit)
	(endif)
	(f-call 'obj 'inst_of (cat {arg0, @} (f-path 'class 'array)) {_, value})
	(errorifnot {value} 'error1)
	(f-call 'sys_mail 'alloc_obj {arg0, arg0->array_array, arg0->array_length * long_size} {arg2})
(vp-label 'sendit)
	(assign {arg1} {arg2->msg_dest.id_id})
	(f-call 'sys_mail 'send {arg2})
	(f-call 'obj 'ref {arg0} {value})

(vp-label 'exit)
	(f-exit 'sys_mail 'lisp_send {this, value})
	(return)

(errorcases
(vp-label 'error1)
	(f-call 'lisp 'repl_error {this, "(mail-send obj mbox)", error_msg_wrong_types, args} {_, value})
	(goto 'exit)
	(signature 'sig 'obj 'integer))

	(pop-scope-syms)

(def-func-end)
