(import 'sys/func.inc)
(import 'sys/link/class.inc)
(import 'sys/kernel/class.inc)
(import 'class/array/class.inc)
(import 'class/symbol/class.inc)
(import 'class/hash_map/class.inc)
(import 'class/integer/class.inc)

(def-method 'sys_mail 'statics)
	;info
	;mail static data
	(times ml_statics_size (vp-byte 0))
(def-func-end)

(def-method 'sys_mail 'init)
	;info
	;init the mbox array and mbox free array

	(ptr 'mail_statics)

	(push-scope)

	(assign (cat {@} (f-path 'sys_mail 'statics)) {mail_statics})
	(f-call 'array 'create nil {mail_statics->ml_statics_mbox_array})
	(f-call 'array 'set_capacity {mail_statics->ml_statics_mbox_array, 32})
	(f-call 'array 'create nil {mail_statics->ml_statics_mbox_free_array})
	(f-call 'sys_heap 'init {&mail_statics->ml_statics_mbox_heap, mbox_size, mbox_size * 32})

	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail 'init1)
	;info
	;init the mail system

	(ptr 'mail_statics)
	(uint 'mbox_id)

	(push-scope)

	;init off chip list
	(assign (cat {@} (f-path 'sys_mail 'statics)) {mail_statics})
	(vp-def (lst tmp))
	(assign {&mail_statics->ml_statics_offchip_list} (list lst))
	(lh-init lst tmp)

	;init out postmen task
	(assign {0} {mail_statics->ml_statics_parcel_id})
	(f-call 'sys_task 'start (cat {@} (f-path 'sys_mail 'out)) {_, mbox_id})
	(f-call 'sys_mail 'mbox_addr {mbox_id} {mail_statics->ml_statics_out_mbox_addr})

	;create link array
	(f-call 'array 'create nil {mail_statics->ml_statics_links_array})

	;init header heap
	(f-call 'sys_heap 'init {&mail_statics->ml_statics_msg_heap, msg_size, msg_size * 64})

	;create declare map
	(f-call 'hash_map 'create {0, 1} {mail_statics->ml_statics_declare_map})

	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail 'alloc_mbox)
	;outputs
	;r0 = mailbox id (uint)
	;trashes
	;all

	(ptr 'mail_statics 'mbox)
	(uint 'id 'length)

	(push-scope)

	(assign (cat {@} (f-path 'sys_mail 'statics)) {mail_statics})
	(d-call 'array 'get_length {mail_statics->ml_statics_mbox_free_array} {_, length})
	(vpif {length})
		(f-call 'array 'get_back {mail_statics->ml_statics_mbox_free_array} {_, id})
		(d-call 'array 'pop_back {mail_statics->ml_statics_mbox_free_array})
	(else)
		(f-call 'sys_heap 'alloc {mail_statics->ml_statics_mbox_heap} {_, mbox})
		(vp-def (mbox tmp1 tmp2))
		(assign {mbox} (list mbox))
		(ml-init mbox tmp1 tmp2)
		(f-call 'array 'push_back {mail_statics->ml_statics_mbox_array, mbox})
		(d-call 'array 'get_length {mail_statics->ml_statics_mbox_array} {_, id})
		(assign {id - 1} {id})
	(endif)

	(f-exit 'sys_mail 'alloc_mbox {id})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail 'free_mbox)
	;inputs
	;r0 = mailbox id (uint)
	;trashes
	;all

	(ptr 'mail_statics)
	(uint 'id)

	(push-scope)
	(f-entry 'sys_mail 'free_mbox {id})

	(assign (cat {@} (f-path 'sys_mail 'statics)) {mail_statics})
	(f-call 'array 'push_back {mail_statics->ml_statics_mbox_free_array, id})

	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail 'mbox_addr)
	;inputs
	;r0 = mailbox id (uint)
	;outputs
	;r0 = mail address (ptr)
	;trashes
	;r0-r2

	(f-entry 'sys_mail 'mbox_addr '(r1))

	(vp-cpy-cr 0xffffffff r0)
	(vp-and-rr r0 r1)
	(f-bind 'sys_mail 'statics r0)
	(f-call 'array 'get_element '((r0 ml_statics_mbox_array) r1) '(_ r0))

	(f-exit 'sys_mail 'mbox_addr '(r0))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail 'mymail)
	;outputs
	;r0 = mail address (ptr)
	;r1 = string data (pubyte)
	;trashes
	;r2

	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_current_tcb r0)
	(f-jmp 'sys_mail 'read '((r0 tk_node_mbox_addr)))

(def-func-end)

(def-method 'sys_mail 'trymail)
	;outputs
	;r0 = 0, else mail address (ptr)
	;r1 = string data (pubyte)
	;trashes
	;r2

	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir r0 tk_statics_current_tcb r0)
	(f-jmp 'sys_mail 'try_read '((r0 tk_node_mbox_addr)))

(def-func-end)

(def-method 'sys_mail 'alloc)
	;inputs
	;r0 = mail size (bytes)
	;outputs
	;r0 = mail message (ptr)
	;r1 = string data (pubyte)
	;trashes
	;all

	(ptr 'msg)
	(uint 'total)

	(push-scope)
	(f-entry 'sys_mail 'alloc {total})

	(f-call 'sys_heap 'alloc (cat {&@} (f-path 'sys_mail 'statics) {.ml_statics_msg_heap}) {_, msg})
	(f-call 'string 'create_from_buffer {0, total} {msg->msg_parcel_obj})
	(assign {0} {msg->msg_parcel_length})
	(assign {total} {msg->msg_length})
	(assign {&msg->msg_parcel_obj->string_data} {msg->msg_parcel_data})

	(f-exit 'sys_mail 'alloc {msg, msg->msg_parcel_data})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail 'alloc_obj)
	;inputs
	;r0 = object (ptr)
	;r1 = data (pubyte)
	;r2 = data length (bytes)
	;outputs
	;r0 = mail message (ptr)
	;trashes
	;all

	(ptr 'msg 'ob 'data)
	(uint 'length)

	(push-scope)
	(f-entry 'sys_mail 'alloc_obj {ob, data, length})

	(f-call 'sys_heap 'alloc (cat {&@} (f-path 'sys_mail 'statics) {.ml_statics_msg_heap}) {_, msg})
	(f-call 'obj 'ref {ob} {msg->msg_parcel_obj})
	(assign {0} {msg->msg_parcel_length})
	(assign {length} {msg->msg_length})
	(assign {data} {msg->msg_parcel_data})

	(f-exit 'sys_mail 'alloc_obj {msg})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail 'free)
	;inputs
	;r0 = mail message (ptr)
	;trashes
	;all

	(ptr 'msg)

	(push-scope)
	(f-entry 'sys_mail 'free {msg})

	(vpif {msg})
		(f-call 'string 'deref {msg->msg_parcel_obj})
		(f-call 'sys_heap 'free (cat {&@} (f-path 'sys_mail 'statics) {.ml_statics_msg_heap, msg}))
	(endif)

	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail 'free_obj)
	;inputs
	;r0 = mail message (ptr)
	;outputs
	;r0 = 0 if msg was 0, else object (ptr)
	;r1 = data (pubyte)
	;r2 = data length (bytes)
	;trashes
	;all

	(ptr 'msg 'ob 'data)
	(uint 'length)

	(push-scope)
	(f-entry 'sys_mail 'free_obj {msg})

	(vpif {msg})
		(assign {msg->msg_parcel_obj} {ob})
		(assign {msg->msg_parcel_data} {data})
		(assign {msg->msg_length} {length})
		(f-call 'sys_heap 'free (cat {&@} (f-path 'sys_mail 'statics) {.ml_statics_msg_heap, msg}))
	(else)
		(assign {0} {ob})
	(endif)

	(f-exit 'sys_mail 'free_obj {ob, data, length})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail 'read)
	;inputs
	;r0 = mailbox address (ptr)
	;outputs
	;r0 = mail address (ptr)
	;r1 = string data (pubyte)
	;trashes
	;r2

	(f-entry 'sys_mail 'read '(r0))
	(lh-is-empty r0 0 r2)
	(vpif '(r2 == 0))
		(f-bind 'sys_task 'statics r1)
		(vp-cpy-ir r1 tk_statics_current_tcb r1)
		(vp-cpy-ri r1 r0 mbox_tcb)
		(f-call 'sys_task 'suspend)
	(endif)
	(lh-get-head r0 0 r0)
	(vp-cpy-rr r0 r1)
	(ln-remove-node r1 r2)
	(f-exit 'sys_mail 'read '(r0 (r0 msg_parcel_data)))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail 'try_read)
	;inputs
	;r0 = mailbox address (ptr)
	;outputs
	;r0 = 0, else mail address (ptr)
	;r1 = string data (pubyte)
	;trashes
	;r2

	(f-entry 'sys_mail 'try_read '(r0))
	(lh-get-head r0 0 r0)
	(vp-cpy-rr r0 r1)
	(ln-get-succ r0 0 r0)
	(vpif '(r0 != 0))
		(vp-cpy-rr r1 r0)
		(ln-remove-node r1 r2)
		(vp-cpy-ir r0 msg_parcel_data r1)
	(endif)
	(f-exit 'sys_mail 'try_read '(r0 r1))
	(vp-ret)

(def-func-end)

(def-method 'sys_mail 'send)
	;inputs
	;r0 = mail message (ptr)
	;trashes
	;r0-r2

	;on or off chip ?
	(f-entry 'sys_mail 'send '(r2))

	(f-call 'sys_kernel 'id '() '(r0))
	(vp-cpy-ir-ui r2 (add msg_dest id_cpu) r1)
	(vpif '(r0 == r1))
		;on this chip
		(f-bind 'sys_mail 'statics r0)
		(vp-cpy-ir-ui r2 (add msg_dest id_mbox) r1)
		(vp-cpy-ir r0 ml_statics_mbox_array r0)
		(vp-shl-cr (log2 ptr_size) r1)
		(vp-cpy-ir r0 array_array r0)
		(vp-cpy-dr r0 r1 r1)
	(vp-label 'post_it)
		(lh-add-at-tail r1 r2 r0)
		(vp-cpy-ir r1 mbox_tcb r0)
		(vpif '(r0 != 0))
			(vp-xor-rr r2 r2)
			(vp-cpy-ri r2 r1 mbox_tcb)
			(f-call 'sys_task 'resume '(r0))
		(endif)
	(else)
		;going off chip
		(f-bind 'sys_mail 'statics r1)
		(vp-cpy-ir-ui r2 msg_length r0)
		(vpif '(r0 > lk_data_size))
			;must use postman task
			(vp-cpy-ir r1 ml_statics_out_mbox_addr r1)
			(vp-jmp 'post_it)
		(else)
			;queue it on the outgoing packet list
			(vp-lea-i r1 ml_statics_offchip_list r1)
			(lh-add-at-tail r1 r2 r0)
		(endif)
	(endif)
	(vp-ret)

(def-func-end)

(def-method 'sys_mail 'select)
	;inputs
	;r0 = mailbox address array (pptr)
	;r1 = mailbox count (uint)
	;outputs
	;r0 = mailbox index (uint)
	;trashes
	;r1-r4

	(f-entry 'sys_mail 'select '(r0 r1))
	(vp-cpy-rr r0 r3)
	(vp-shl-cr (log2 ptr_size) r1)
	(vp-lea-d r0 r1 r1)
	(loop-start)
		;check if any have mail
		(vp-cpy-rr r3 r0)
		(loop-start)
			(vp-cpy-ir r0 0 r2)
			(vpif '(r2 != 0))
				(lh-is-empty r2 0 r2)
				(vpif '(r2 != 0))
					;return first mailbox not empty
					(vp-sub-rr r3 r0)
					(vp-shr-cr (log2 ptr_size) r0)
					(f-exit 'sys_mail 'select '(r0))
					(vp-ret)
				(endif)
			(endif)
			(vp-add-cr ptr_size r0)
		(loop-until '(r0 == r1))

		;fill in all tcb's and suspend
		(f-bind 'sys_task 'statics r4)
		(vp-cpy-ir r4 tk_statics_current_tcb r4)
		(vp-cpy-rr r3 r0)
		(loop-start)
			(vp-cpy-ir r0 0 r2)
			(vpif '(r2 != 0))
				(vp-cpy-ri r4 r2 mbox_tcb)
			(endif)
			(vp-add-cr ptr_size r0)
		(loop-until '(r0 == r1))

		(f-call 'sys_task 'suspend)

		;clear all tcb's
		(vp-xor-rr r4 r4)
		(vp-cpy-rr r3 r0)
		(loop-start)
			(vp-cpy-ir r0 0 r2)
			(vpif '(r2 != 0))
				(vp-cpy-ri r4 r2 mbox_tcb)
			(endif)
			(vp-add-cr ptr_size r0)
		(loop-until '(r0 == r1))
	(loop-end)

(def-func-end)

(def-method 'sys_mail 'declare)
	;inputs
	;r0 = mailbox name c string (pubyte)
	;r1 = mailbox id (ulong)
	;trashes
	;all

	(ptr 'mail_statics 'name)
	(ulong 'id)

	(push-scope)
	(f-entry 'sys_mail 'declare {name, id})

	(assign (cat {@} (f-path 'sys_mail 'statics)) {mail_statics})
	(f-call 'symbol 'intern_cstr {name} {name})
	(f-call 'integer 'create {id} {id})
	(f-call 'hash_map 'insert {mail_statics->ml_statics_declare_map, name, id})
	(f-call 'symbol 'deref {name})
	(f-call 'integer 'deref {id})

	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail 'enquire)
	;inputs
	;r0 = mailbox name c string (pubyte)
	;outputs
	;r0 = 0 if error, else mailbox id (ulong)
	;trashes
	;all

	(ptr 'mail_statics 'name)
	(union
		'(pptr 'iter)
		'(ulong 'id))

	(push-scope)
	(f-entry 'sys_mail 'enquire {name})

	(assign (cat {@} (f-path 'sys_mail 'statics)) {mail_statics})
	(f-call 'symbol 'intern_cstr {name} {name})
	(f-call 'hash_map 'find {mail_statics->ml_statics_declare_map, name} {_, iter, _})
	(vpif {iter})
		(f-call 'integer 'get_value {*iter} {_, id})
	(endif)
	(f-call 'symbol 'deref {name})

	(f-exit 'sys_mail 'enquire {id})
	(pop-scope)
	(return)

(def-func-end)

(def-method 'sys_mail 'forget)
	;inputs
	;r0 = mailbox name c string (pubyte)
	;trashes
	;all

	(ptr 'mail_statics 'name 'bucket)
	(pptr 'iter)

	(push-scope)
	(f-entry 'sys_mail 'forget {name})

	(assign (cat {@} (f-path 'sys_mail 'statics)) {mail_statics})
	(f-call 'symbol 'intern_cstr {name} {name})
	(f-call 'hash_map 'find {mail_statics->ml_statics_declare_map, name} {_, iter, bucket})
	(vpif {iter})
		(f-call 'hash_map 'erase {mail_statics->ml_statics_declare_map,  iter, bucket})
	(endif)
	(f-call 'symbol 'deref {name})

	(pop-scope)
	(return)

(def-func-end)
