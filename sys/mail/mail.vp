(import 'sys/func.inc)
(import 'sys/link/link.inc)
(import 'sys/kernel/kernel.inc)
(import 'class/array/array.inc)

(def-func 'sys/mail/statics)
	(times ml_statics_size (vp-byte 0))
(def-func-end)

(def-func 'sys/mail/init)
	;inputs
	;r1 = kernel mailbox

	;save kernel mailbox
	(f-entry 'sys_mail 'init '(r1))
	(f-bind 'sys_mail 'statics r6)
	(vp-cpy-ri r1 r6 ml_statics_kernel_mailbox)

	;init off chip list
	(vp-lea-i r6 ml_statics_offchip_list r0)
	(lh-init r0 r1)

	;init out postmen task
	(f-call 'sys_task 'start `((@ ,(f-path 'sys_mail 'out))) '(r0 (r6 ml_statics_out_mailbox) _))
	(vp-xor-rr r1 r1)
	(vp-cpy-ri-i r1 r6 ml_statics_parcel_id)

	;create link array
	(f-call 'array 'create '() '(r0))
	(vp-cpy-ri r0 r6 ml_statics_links_array)

	;init header heap
	(f-jmp 'sys_heap 'init '((& r6 ml_statics_msg_heap) msg_size (mul msg_size 64)))

(def-func-end)

(def-func 'sys/mail/init_mailbox)
	;outputs
	;r0 = mailbox address
	;trashes
	;r1-r2

	(f-entry 'sys_mail 'init_mailbox '(r0))
	(ml-init r0 r1 r2)
	(f-exit 'sys_mail 'init_mailbox '(r0))
	(vp-ret)

(def-func-end)

(def-func 'sys/mail/mymail)
	;outputs
	;r0 = mail address
	;r1 = string data
	;trashes
	;r2

	(f-call 'sys_task 'mailbox '() '(r0 _))
	(f-jmp 'sys_mail 'read '(r0))

(def-func-end)

(def-func 'sys/mail/alloc)
	;inputs
	;r0 = mail size
	;outputs
	;r0 = mail message
	;r1 = string data
	;trashes
	;all

	(ptr 'msg)
	(uint 'total)

	(push-scope)
	(f-entry 'sys_mail 'alloc {total})

	(f-call 'sys_heap 'alloc (cat {&@} (f-path 'sys_mail 'statics) {.ml_statics_msg_heap}) {_, msg})
	(f-call 'string 'create_from_buffer {0, total} {msg->msg_parcel_obj})
	(assign {0} {msg->msg_parcel_length})
	(assign {total} {msg->msg_length})
	(assign {&msg->msg_parcel_obj->string_data} {msg->msg_parcel_data})

	(f-exit 'sys_mail 'alloc {msg, msg->msg_parcel_data})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'sys/mail/alloc_obj)
	;inputs
	;r0 = object pointer
	;r1 = data pointer
	;r2 = data length
	;outputs
	;r0 = mail message
	;trashes
	;all

	(ptr 'msg 'ob 'data)
	(uint 'length)

	(push-scope)
	(f-entry 'sys_mail 'alloc_obj {ob, data, length})

	(f-call 'sys_heap 'alloc (cat {&@} (f-path 'sys_mail 'statics) {.ml_statics_msg_heap}) {_, msg})
	(f-call 'obj 'ref {ob} {msg->msg_parcel_obj})
	(assign {0} {msg->msg_parcel_length})
	(assign {length} {msg->msg_length})
	(assign {data} {msg->msg_parcel_data})

	(f-exit 'sys_mail 'alloc_obj {msg})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'sys/mail/free)
	;inputs
	;r0 = mail message
	;trashes
	;all

	(ptr 'msg)

	(push-scope)
	(f-entry 'sys_mail 'free {msg})

	(vpif {msg})
		(f-call 'string 'deref {msg->msg_parcel_obj})
		(f-call 'sys_heap 'free (cat {&@} (f-path 'sys_mail 'statics) {.ml_statics_msg_heap, msg}))
	(endif)

	(pop-scope)
	(return)

(def-func-end)

(def-func 'sys/mail/free_obj)
	;inputs
	;r0 = mail message
	;outputs
	;r0 = 0 if msg was 0, else object pointer
	;r1 = data pointer
	;r2 = data length
	;trashes
	;all

	(ptr 'msg 'ob 'data)
	(uint 'length)

	(push-scope)
	(f-entry 'sys_mail 'free_obj {msg})

	(vpif {msg})
		(assign {msg->msg_parcel_obj} {ob})
		(assign {msg->msg_parcel_data} {data})
		(assign {msg->msg_length} {length})
		(f-call 'sys_heap 'free (cat {&@} (f-path 'sys_mail 'statics) {.ml_statics_msg_heap, msg}))
	(else)
		(assign {0} {ob})
	(endif)

	(f-exit 'sys_mail 'free_obj {ob, data, length})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'sys/mail/read)
	;inputs
	;r0 = mailbox address
	;outputs
	;r0 = mail address
	;r1 = string data
	;trashes
	;r2

	(f-entry 'sys_mail 'read '(r0))
	(lh-is-empty r0 0 r2)
	(vpif '(r2 == 0))
		(f-bind 'sys_task 'statics r1)
		(vp-cpy-ir r1 tk_statics_current_tcb r1)
		(vp-cpy-ri r1 r0 mailbox_tcb)
		(f-call 'sys_task 'suspend)
	(endif)
	(lh-get-head r0 0 r0)
	(vp-cpy-rr r0 r1)
	(ln-remove-node r1 r2)
	(f-exit 'sys_mail 'read '(r0 (r0 msg_parcel_data)))
	(vp-ret)

(def-func-end)

(def-func 'sys/mail/try_read)
	;inputs
	;r0 = mailbox address
	;outputs
	;r0 = 0, else mail address
	;r1 = string data
	;trashes
	;r2

	(f-entry 'sys_mail 'try_read '(r0))
	(lh-get-head r0 0 r0)
	(vp-cpy-rr r0 r1)
	(ln-get-succ r0 0 r0)
	(vpif '(r0 != 0))
		(vp-cpy-rr r1 r0)
		(ln-remove-node r1 r2)
		(vp-cpy-ir r0 msg_parcel_data r1)
	(endif)
	(f-exit 'sys_mail 'try_read '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'sys/mail/send)
	;inputs
	;r0 = mail message
	;trashes
	;r0-r2

	;on or off chip ?
	(f-entry 'sys_mail 'send '(r2))

	(f-call 'kernel 'id '() '(r0))
	(vp-cpy-ir r2 (add msg_dest id_cpu) r1)
	(vpif '(r0 == r1))
		;on this chip
		(vp-cpy-ir r2 (add msg_dest id_mbox) r1)
		(vpif '(r1 == 0))
			;mail for kernel !
			(f-bind 'sys_mail 'statics r1)
			(vp-cpy-ir r1 ml_statics_kernel_mailbox r1)
		(endif)
	(vp-label 'post_it)
		(lh-add-at-tail r1 r2 r0)
		(vp-cpy-ir r1 mailbox_tcb r0)
		(vpif '(r0 != 0))
			(vp-xor-rr r2 r2)
			(vp-cpy-ri r2 r1 mailbox_tcb)
			(f-call 'sys_task 'resume '(r0))
		(endif)
	(else)
		;going off chip
		(f-bind 'sys_mail 'statics r1)
		(vp-cpy-ir-ui r2 msg_length r0)
		(vpif '(r0 > lk_data_size))
			;must use postman task
			(vp-cpy-ir r1 ml_statics_out_mailbox r1)
			(vp-jmp 'post_it)
		(else)
			;queue it on the outgoing packet list
			(vp-lea-i r1 ml_statics_offchip_list r1)
			(lh-add-at-tail r1 r2 r0)
		(endif)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'sys/mail/select)
	;inputs
	;r0 = mailbox address array
	;r1 = mailbox count
	;outputs
	;r0 = mailbox address
	;trashes
	;r1-r4

	(f-entry 'sys_mail 'select '(r0 r1))
	(vp-cpy-rr r0 r3)
	(vp-shl-cr (log2 ptr_size) r1)
	(vp-lea-d r0 r1 r1)
	(loop-start)
		;check if any have mail
		(vp-cpy-rr r3 r0)
		(loop-start)
			(vp-cpy-ir r0 0 r2)
			(vpif '(r2 != 0))
				(lh-is-empty r2 0 r2)
				(vpif '(r2 != 0))
					;return first mailbox not empty
					(f-exit 'sys_mail 'select '((r0 0)))
					(vp-ret)
				(endif)
			(endif)
			(vp-add-cr ptr_size r0)
		(loop-until '(r0 == r1))

		;fill in all tcb's and suspend
		(f-bind 'sys_task 'statics r4)
		(vp-cpy-ir r4 tk_statics_current_tcb r4)
		(vp-cpy-rr r3 r0)
		(loop-start)
			(vp-cpy-ir r0 0 r2)
			(vpif '(r2 != 0))
				(vp-cpy-ri r4 r2 mailbox_tcb)
			(endif)
			(vp-add-cr ptr_size r0)
		(loop-until '(r0 == r1))

		(f-call 'sys_task 'suspend)

		;clear all tcb's
		(vp-xor-rr r4 r4)
		(vp-cpy-rr r3 r0)
		(loop-start)
			(vp-cpy-ir r0 0 r2)
			(vpif '(r2 != 0))
				(vp-cpy-ri r4 r2 mailbox_tcb)
			(endif)
			(vp-add-cr ptr_size r0)
		(loop-until '(r0 == r1))
	(loop-end)

(def-func-end)
