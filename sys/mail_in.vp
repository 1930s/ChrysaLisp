(import 'inc/func.inc)
(import 'inc/mail.inc)

(def-func 'sys/mail_in)
	;parcel fragments arriving on chip task

	(loop-start)
		;read parcel fragment
		f_call sys_mail, mymail, {}, {r15}

		;look up parcel in mailbox
		(vp-cpy-ir r15 msg_parcel_id + id_mbox r6)
		(vp-cpy-ir r15 msg_parcel_id + id_cpu r7)
		(vp-cpy-ir r15 msg_dest + id_mbox r13)
		(loop-list-forward r13 + mailbox_parcel_list, r0, r1)
			continueif r6, !=, [r0 + msg_parcel_id + id_mbox]
		loop_until r7, ==, [r0 + msg_parcel_id + id_cpu]
		if r1, ==, 0
			;new parcel
			(vp-cpy-ir r15 msg_parcel_size r12)
			(vp-cpy-ir r15 msg_dest + id_cpu r14)
			f_call sys_mem, alloc, {r12}, {r0, _}
			assert r0, !=, 0
			(vp-cpy-ri r12 r0 msg_length)
			(vp-cpy-ri r13 r0 msg_dest + id_mbox)
			(vp-cpy-ri r14 r0 msg_dest + id_cpu)
			(vp-cpy-ri r6 r0 msg_parcel_id + id_mbox)
			(vp-cpy-ri r7 r0 msg_parcel_id + id_cpu)
			vp_cpy_cl msg_data, [r0 + msg_parcel_total]
			vp_cpy_cl 0, [r0 + msg_parcel_size]
			(vp-add-cr mailbox_parcel_list r13)
			lh_add_at_tail r13, r0, r1
		endif
		(vp-cpy-rr r0 r14)

		;destination address
		(vp-cpy-rr r14 r1)
		(vp-add-ir r15 msg_parcel_frag r1)

		;source address
		(vp-lea r15 msg_data r0)

		;fragment size
		(vp-cpy-ir r15 msg_length r2)
		(vp-sub-cr msg_data r2)

		;total so far
		(vp-cpy-ir r14 msg_parcel_total r13)
		(vp-add-rr r2 r13)

		;copy fragment data, round up for speed
		(vp-add-cr ptr_size - 1 r2)
		(vp-and-cr (sub 0 ptr_size) r2)
		f_call sys_mem, copy, {r0, r1, r2}, {_, _}

		;got all needed ?
		if r13, ==, [r14 + msg_length]
			;yes, remove parcel and post it
			(vp-cpy-rr r14 r1)
			(ln-remove-node r1 r2)
			f_call sys_mail, send, {r14}
		else
			;no, update total so far
			(vp-cpy-ri r13 r14 msg_parcel_total)
		endif

		;free fragment
		f_call sys_mem, free, {r15}
	(loop-end)
	(vp-ret)

(def-func-end)
