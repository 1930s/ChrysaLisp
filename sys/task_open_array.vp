(import 'inc/func.inc)
(import 'inc/mail.inc)
(import 'class/class_vector.inc)
(import 'class/class_string.inc)

(def-func 'sys/task_open_array)
	;inputs
	;r0 = vector of strings
	;outputs
	;r0 = array of mailbox id's
	;trashes
	;all but r4

	(ptr 'tasks 'ids 'msg 'name)
	(ulong 'cpu 'index 'length)
	(struct 'mailbox 'mailbox)

	;save task info
	(push-scope)
	(retire '(r0) {tasks})

	;create output array
	(devirt-call 'vector 'get_length {tasks} {length})
	(func-call 'sys_mem 'alloc {length * id_size} {ids, _})

	;init temp mailbox
	(func-call 'sys_mail 'init_mailbox {& mailbox})

	;start all tasks in parallel
	(func-call 'sys_cpu 'id {} {cpu})
	(assign {0} {index})
	(loop-while {index != length})
		(func-call 'sys_mail 'alloc {} {msg})
		(assign {(tasks->vector_array)[index * ptr_size]} {name})
		(assign {name->string_length + 1 + kn_msg_child_size} {msg->msg_length})
		(assign {0} {msg->msg_dest.id_mbox})
		(assign {cpu} {msg->msg_dest.id_cpu})
		(assign {& mailbox} {msg->kn_msg_reply_id.id_mbox})
		(assign {cpu} {msg->kn_msg_reply_id.id_cpu})
		(assign {kn_call_task_child} {msg->kn_msg_function})
		(assign {& ids[index * id_size]} {msg->kn_msg_user})
		(func-call 'sys_mem 'copy {& name->string_data, & msg->kn_msg_child_pathname, name->string_length + 1} {_, _})
		(func-call 'sys_mail 'send {msg})
		(assign {index + 1} {index})
	(loop-end)

	;wait for replys
	(loop-while {index != 0})
		(assign {index - 1} {index})
		(func-call 'sys_mail 'read {& mailbox} {msg})
		(assign {msg->kn_msg_reply_id.id_mbox} {msg->kn_msg_user->id_mbox})
		(assign {msg->kn_msg_reply_id.id_cpu} {msg->kn_msg_user->id_cpu})
		(func-call 'sys_mem 'free {msg})
	(loop-end)

	;return ids array
	(expr {ids} '(r0))
	(pop-scope)
	(vp-ret)

(def-func-end)
