(import 'inc/func.inc)
(import 'inc/mail.inc)

(def-func 'sys/task_callback)
	;inputs
	;r0 = callback address
	;r1 = user data address
	;trashes
	;all but r4

	;test if we are the kernel task
	(f-bind 'sys_task 'statics r3)
	(vp-cpy-ir r3 tk_statics_current_tcb r2)
	(vpif '(r2 == [r3 + tk_statics_kernel_tcb]))
		;yes we can just do local call
		(vp-xchg-rr r0 r1)
		(vp-jmp-r r1)
	(endif)

	;save task info
	(vp-cpy-rr r0 r5)
	(vp-cpy-rr r1 r6)

	;create temp mailbox
	ml_temp_create r0, r1

	;allocate mail message
	(f-call 'sys_mail 'alloc '() '(r3))
	(assert '(r0, !=, 0))

	;fill in destination, reply and function
	(f-call 'sys_cpu 'id '() '(r0))
	(vp-cpy-ri r4 r3 kn_msg_reply_id)
	(vp-cpy-ri r0 r3 (add kn_msg_reply_id 8))
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 r3 (add msg_dest id_mbox))
	(vp-cpy-ri r0 r3 (add msg_dest id_cpu))
	(vp-cpy-cr kn_call_callback r1)
	(vp-cpy-ri r1 r3 kn_msg_function)
	(vp-cpy-ri r5 r3 kn_msg_callback_addr)
	(vp-cpy-ri r6 r3 kn_msg_user)
	(vp-cpy-cr kn_msg_callback_size r1)
	(vp-cpy-ri r1 r3 msg_length)

	;send mail to kernel then wait for reply
	(f-call 'sys_mail 'send '(r3))
	(f-call 'sys_mail 'read '(r4) '(r0))

	;free reply mail and temp mailbox
	ml_temp_destroy
	(f-jmp 'sys_mem 'free '(r0))

(def-func-end)
