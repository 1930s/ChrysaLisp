(import 'sys/func.inc)
(import 'sys/heap.inc)

(def-func 'sys/mem_statics)

	(vp-long 0) ;used memory count
	(let ((s mem_block_min_size))
		(while (le s mem_block_max_size)
			(times hp_heap_size (vp-byte 0))
			(setq s (mul s 2))))

(def-func-end)

(def-func 'sys/mem_used)
	;outputs
	;r0 = amount in bytes

	(f-bind 'sys_mem 'statics r0)
	(f-exit 'sys_mem 'used '((r0 0)))
	(vp-ret)

(def-func-end)

(def-func 'sys/mem_init)
	;get statics
	(f-bind 'sys_mem 'statics r0)
	(vp-add-cr long_size r0)

	;mem_slots heaps
	(vp-cpy-cr mem_block_min_size r1)	;start object size
	(vp-cpy-cr mem_block_blk_size r3)	;start block size
	(loop-start)
		(f-call 'sys_heap 'init '(r0 r1 r3))
		(vp-add-cr hp_heap_size r0)
		(vp-add-rr r1 r1)				;double object size
		(vpif '(r3 < r1))
			(vp-cpy-rr r1 r3)			;at least 1 object per block !
		(endif)
	(loop-until '(r1 > mem_block_max_size))
	(vp-ret)

(def-func-end)

(def-func 'sys/mem_deinit)
	;get statics
	(f-bind 'sys_mem 'statics r0)
	(vp-cpy-rr r0 r4)

	;free memory heaps
	(vp-cpy-cr mem_block_min_size r5)	;start object size
	(loop-start)
		(f-call 'sys_heap 'deinit '(r4))
		(vp-add-cr hp_heap_size r4)
		(vp-add-rr r5 r5)
	(loop-until '(r5 > mem_block_max_size))
	(vp-ret)

(def-func-end)

(def-func 'sys/mem_alloc)
	;inputs
	;r0 = minimum amount in bytes
	;outputs
	;r0 = 0 if failed, else address
	;r1 = 0 if failed, else size given
	;trashes
	;r2-r3

	(f-entry 'sys_mem 'alloc '(r0))
	(errorif '(r0 > (sub mem_block_max_size ptr_size)) 'error)

	;extra bytes for heap pointer
	(vp-lea-i r0 ptr_size r1)

	;find object heap
	(f-bind 'sys_mem 'statics r0)
	(vp-add-cr long_size r0)
	(loop-start)
		(vp-cpy-ir-ui r0 hp_heap_cellsize r2)
		(breakif '(r1 <= r2))
		(vp-add-cr hp_heap_size r0)
	(loop-end)

	;allocate object from this heap
	(f-call 'sys_heap 'alloc '(r0) '(r0 r1))
	(vp-cpy-ri r0 r1 0)
	(vp-xchg-rr r0 r1)
	(vp-cpy-ir-ui r1 hp_heap_cellsize r1)
	(vp-add-cr ptr_size r0)
	(vp-sub-cr ptr_size r1)
	(f-exit 'sys_mem 'alloc '(r0 r1))
	(vp-ret)

(errorcases
(vp-label 'error)
	(debug-str "Malloc fail !!!")
	(f-exit 'sys_mem 'alloc '(0 0))
	(vp-ret))

(def-func-end)

(def-func 'sys/mem_free)
	;inputs
	;r0 = address
	;trashes
	;r0-r2

	(f-entry 'sys_mem 'free '(r0))
	(vpif '(r0 != 0))
		(vp-cpy-ir r0 (neg ptr_size) r1)
		(vp-sub-cr ptr_size r0)
		(hp-freecell r1 r0 r2)
	(endif)
	(vp-ret)

(def-func-end)

(def-func 'sys/mem_realloc)
	;inputs
	;r0 = array
	;r1 = array size
	;r2 = new array size
	;outputs
	;r0 = new array
	;r1 = new array size
	;trashes
	;r2-r3, r4-r7

	(f-entry 'sys_mem 'realloc '(r0 r1 r2))
	(vp-cpy-rr r0 r4)
	(vp-cpy-rr r1 r5)
	(vpif '(r2 > r1))
		;alloc new table
		(f-call 'sys_mem 'alloc '(r2) '(r0 _))
		(vp-cpy-rr r0 r6)
		(vp-cpy-rr r1 r7)
		(vpif '(r5 != 0))
			;copy over old data
			(f-call 'sys_mem 'copy '(r4 r6 r5))

			;free existing
			(f-call 'sys_mem 'free '(r4))
		(endif)

		;save new table
		(vp-cpy-rr r6 r0)
		(vp-cpy-rr r7 r1)
	(endif)
	(f-exit 'sys_mem 'realloc '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'sys/mem_recalloc)
	;inputs
	;r0 = array
	;r1 = array size
	;r2 = new array size
	;outputs
	;r0 = new array
	;r1 = new array size
	;trashes
	;r2-r3, r4-r7

	(f-entry 'sys_mem 'recalloc '(r0 r1 r2))
	(vp-cpy-rr r0 r4)
	(vp-cpy-rr r1 r5)
	(vpif '(r2 > r1))
		;alloc new table
		(f-call 'sys_mem 'alloc '(r2) '(r0 _))
		(vp-cpy-rr r0 r6)
		(vp-cpy-rr r1 r7)

		;clear it to empty
		(f-call 'sys_mem 'clear '(r0 r1))

		(vpif '(r5 != 0))
			;copy over old data
			(f-call 'sys_mem 'copy '(r4 r6 r5))

			;free existing
			(f-call 'sys_mem 'free '(r4))
		(endif)

		;save new table
		(vp-cpy-rr r6 r0)
		(vp-cpy-rr r7 r1)
	(endif)
	(f-exit 'sys_mem 'recalloc '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'sys/mem_clear)
	;inputs
	;r0 = address
	;r1 = length in bytes
	;outputs
	;r0 = address end
	;trashes
	;r1-r2

	(f-entry 'sys_mem 'clear '(r0 r1))
	(vpif '(r1 != 0))
		;not zero length
		(vp-cpy-rr r0 r2)
		(vp-and-cr (dec ptr_size) r2)
		(vpif '(r2 == 0))
			(vp-cpy-rr r1 r2)
			(vp-and-cr (dec ptr_size) r2)
			(vpif '(r2 == 0))
				;all aligned on 8 byte boundary
				(vp-add-rr r0 r1)
				(loop-start)
					(vp-cpy-ri r2 r0 0)
					(vp-add-cr ptr_size r0)
				(loop-until '(r0 == r1))
				(vp-ret)
			(endif)
		(endif)
		;something not aligned
		(vp-add-rr r0 r1)
		(vp-xor-rr r2 r2)
		(loop-start)
			(vp-cpy-ri-b r2 r0 0)
			(vp-add-cr byte_size r0)
		(loop-until '(r0 == r1))
	(endif)
	(f-exit 'sys_mem 'clear '(r0))
	(vp-ret)

(def-func-end)

(def-func 'sys/mem_copy)
	;inputs
	;r0 = source address
	;r1 = destination address
	;r2 = length in bytes
	;outputs
	;r0 = source address end
	;r1 = destination address end
	;trashes
	;r2-r3

	(f-entry 'sys_mem 'copy '(r0 r1 r2))
	(vpif '(r2 != 0))
		;not zero length
		(vp-cpy-rr r0 r3)
		(vp-and-cr (dec ptr_size) r3)
		(vpif '(r3 == 0))
			(vp-cpy-rr r1 r3)
			(vp-and-cr (dec ptr_size) r3)
			(vpif '(r3 == 0))
				(vp-cpy-rr r2 r3)
				(vp-and-cr (dec ptr_size) r3)
				(vpif '(r3 == 0))
					;all aligned on 8 byte boundary
					(vp-add-rr r0 r2)
					(loop-start)
						(vp-cpy-ir r0 0 r3)
						(vp-cpy-ri r3 r1 0)
						(vp-add-cr ptr_size r0)
						(vp-add-cr ptr_size r1)
					(loop-until '(r0 == r2))
					(vp-ret)
				(endif)
			(endif)
		(endif)
		;something not aligned so byte copy
		(vp-add-rr r0 r2)
		(loop-start)
			(vp-cpy-ir-ub r0 0 r3)
			(vp-cpy-ri-b r3 r1 0)
			(vp-add-cr byte_size r0)
			(vp-add-cr byte_size r1)
		(loop-until '(r0 == r2))
	(endif)
	(f-exit 'sys_mem 'copy '(r0 r1))
	(vp-ret)

(def-func-end)

(def-func 'sys/mem_fill)
	;inputs
	;r0 = address
	;r1 = length in bytes
	;r2 = fill byte
	;outputs
	;r0 = address end
	;trashes
	;r1-r3

	(f-entry 'sys_mem 'fill '(r0 r1 r2))
	(vpif '(r1 != 0))
		;not zero length
		(vp-cpy-rr r0 r3)
		(vp-and-cr (dec ptr_size) r3)
		(vpif '(r3 == 0))
			(vp-cpy-rr r1 r3)
			(vp-and-cr (dec ptr_size) r3)
			(vpif '(r3 == 0))
				;all aligned on 8 byte boundary
				(vp-and-cr 0xff r2)
				(vp-cpy-rr r2 r3)
				(vp-shl-cr 8 r3)
				(vp-add-rr r3 r2)
				(vp-cpy-rr r2 r3)
				(vp-shl-cr 16 r3)
				(vp-add-rr r3 r2)
				(vp-cpy-rr r2 r3)
				(vp-shl-cr 32 r3)
				(vp-add-rr r3 r2)
				(vp-add-rr r0 r1)
				(loop-start)
					(vp-cpy-ri r2 r0 0)
					(vp-add-cr ptr_size r0)
				(loop-until '(r0 == r1))
				(vp-ret)
			(endif)
		(endif)
		;something not aligned
		(vp-add-rr r0 r1)
		(loop-start)
			(vp-cpy-ri-b r2 r0 0)
			(vp-add-cr byte_size r0)
		(loop-until '(r0 == r1))
	(endif)
	(f-exit 'sys_mem 'fill '(r0))
	(vp-ret)

(def-func-end)

(def-func 'sys/mem_xor)
	;inputs
	;r0 = source address
	;r1 = destination address
	;r2 = length in bytes
	;outputs
	;r0 = source address end
	;r1 = destination address end
	;trashes
	;r2-r3, r4

	(f-entry 'sys_mem 'xor '(r0 r1 r2))
	(vpif '(r2 != 0))
		;not zero length
		(vp-cpy-rr r0 r3)
		(vp-and-cr (dec ptr_size) r3)
		(vpif '(r3 == 0))
			(vp-cpy-rr r1 r3)
			(vp-and-cr (dec ptr_size) r3)
			(vpif '(r3 == 0))
				(vp-cpy-rr r2 r3)
				(vp-and-cr (dec ptr_size) r3)
				(vpif '(r3 == 0))
					;all aligned on 8 byte boundary
					(vp-add-rr r0 r2)
					(loop-start)
						(vp-cpy-ir r0 0 r3)
						(vp-cpy-ir r1 0 r4)
						(vp-xor-rr r4 r3)
						(vp-cpy-ri r3 r1 0)
						(vp-add-cr ptr_size r0)
						(vp-add-cr ptr_size r1)
					(loop-until '(r0 == r2))
					(vp-ret)
				(endif)
			(endif)
		(endif)
		;something not aligned so byte xor
		(vp-add-rr r0 r2)
		(loop-start)
			(vp-cpy-ir-ub r0 0 r3)
			(vp-cpy-ir-ub r1 0 r4)
			(vp-xor-rr r4 r3)
			(vp-cpy-ri-b r3 r1 0)
			(vp-add-cr byte_size r0)
			(vp-add-cr byte_size r1)
		(loop-until '(r0 == r2))
	(endif)
	(f-exit 'sys_mem 'xor '(r0 r1))
	(vp-ret)

(def-func-end)
