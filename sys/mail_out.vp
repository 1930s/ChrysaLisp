(import 'inc/func.inc)
(import 'inc/mail.inc)

(def-func 'sys/mail_out)
	;parcels going off chip task

	(loop-start)
		;read parcel
		(f-call 'sys_mail 'mymail '() '(r15))

		;create next parcel id
		(f-call 'sys_cpu 'id '() '(r6))
		(f-bind 'sys_mail 'statics r1)
		(vp-cpy-ir r1 ml_statics_parcel_id r7)
		(vp-inc r7)
		(vp-cpy-ri r7 r1 ml_statics_parcel_id)

		;header info for each fragment
		(vp-cpy-cr msg_data r10)
		(vp-cpy-ir r15 msg_length r11)
		(vp-cpy-ir r15 msg_dest + id_mbox r12)
		(vp-cpy-ir r15 msg_dest + id_cpu r13)
		(loop-start)
			;create fragment
			(f-call 'sys_mail 'alloc '() '(r14))
			assert r0, !=, 0

			;fill in fragment header
			(vp-cpy-ri r12 r14 msg_dest + id_mbox)
			(vp-cpy-ri r13 r14 msg_dest + id_cpu)
			(vp-cpy-ri r10 r14 msg_parcel_frag)
			(vp-cpy-ri r11 r14 msg_parcel_size)
			(vp-cpy-ri r6 r14 msg_parcel_id + id_mbox)
			(vp-cpy-ri r7 r14 msg_parcel_id + id_cpu)

			;data source and destination
			(vp-lea-ir r15 r10 r0)
			(vp-lea-ir r14 msg_data r1)

			;length of fragment data
			(vp-cpy-cr (sub msg_size msg_data) r2)
			(vp-add-rr r2 r10)
			if r10, >, r11
				(vp-sub-rr r11 r10)
				(vp-sub-rr r10 r2)
				(vp-cpy-rr r11 r10)
			endif
			(vp-lea-ir r2 msg_data r3)
			(vp-cpy-ri r3 r14 msg_length)

			;copy data block, round up for speed
			(vp-add-cr ptr_size - 1 r2)
			(vp-and-cr (sub 0 ptr_size) r2)
			(f-call 'sys_mem 'copy '(r0, r1, r2) '(_, _))

			;queue it on the outgoing packet list
			(f-bind 'sys_mail 'statics r0)
			(vp-lea-ir r0 ml_statics_offchip_list r0)
			lh_add_at_tail r0, r14, r1

			;let links get at some packets
			f_call sys_task, yield
		loop_until r10, ==, r11

		;free parcel
		f_call sys_mem, free, {r15}
	(loop-end)
	(vp-ret)

(def-func-end)
