(import 'sys/func.inc)
(import 'sys/link/link.inc)
(import 'sys/kernel/kernel.inc)

(def-func 'sys/link/statics)
	(times lk_statics_size (vp-byte 0))
(def-func-end)

(def-func 'sys/link/init)
	;get statics
	(f-bind 'sys_link 'statics r0)

	(vp-lea-i r0 lk_statics_links_list r0)
	(lh-init r0 r1)
	(vp-ret)

(def-func-end)

(def-func 'sys/link/link)
	;started by kernel for each link

	;decrement task count
	;don't count links in load balancing
	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir-ui r0 tk_statics_task_count r1)
	(vp-sub-cr 1 r1)
	(vp-cpy-ri-i r1 r0 tk_statics_task_count)

	;allocate link node on stack and link to links list
	(vp-alloc lk_node_size)
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 rsp (add lk_node_table lk_table_array))
	(vp-cpy-ri r1 rsp (add lk_node_table lk_table_array_size))
	(f-bind 'sys_link 'statics r1)
	(vp-lea-i r1 lk_statics_links_list r1)
	(lh-add-at-head r1 rsp r2)

	;read params msg from kernel
	(f-call 'sys_mail 'mymail '() '(r13))
	(vp-cpy-ri r13 rsp lk_node_params)

	;init link node cpu id and task count
	(vp-cpy-ir-ub r13 (add msg_data 5) r0)
	(vp-cpy-ir-ub r13 (add msg_data 6) r1)
	(vp-cpy-ir-ub r13 (add msg_data 7) r2)
	(vp-sub-cr (code "0") r0)
	(vp-sub-cr (code "0") r1)
	(vp-sub-cr (code "0") r2)
	(vp-mul-cr 100 r0)
	(vp-mul-cr 10 r1)
	(vp-add-rr r0 r1)
	(vp-add-rr r2 r1)
	(vp-cpy-ir-ub r13 (add msg_data 9) r0)
	(vp-cpy-ir-ub r13 (add msg_data 10) r2)
	(vp-cpy-ir-ub r13 (add msg_data 11) r3)
	(vp-sub-cr (code "0") r0)
	(vp-sub-cr (code "0") r2)
	(vp-sub-cr (code "0") r3)
	(vp-mul-cr 100 r0)
	(vp-mul-cr 10 r2)
	(vp-add-rr r0 r2)
	(vp-add-rr r3 r2)
	(f-call 'kernel 'id '() '(r0))
	(vpif '(r1 == r0))
		(vp-cpy-rr r2 r1)
		(vp-cpy-cr lk_buffer_chan_1 r9)
		(vp-cpy-cr lk_buffer_chan_2 r10)
	(else)
		(vp-cpy-cr lk_buffer_chan_2 r9)
		(vp-cpy-cr lk_buffer_chan_1 r10)
	(endif)
	(vp-cpy-ri-i r1 rsp lk_node_cpu_id)
	(vp-xor-rr r7 r7)
	(vp-cpy-ri-i r7 rsp lk_node_task_count)

	;send link routing message to neighbor kernel
	(vp-cpy-rr r0 r7)
	(vp-cpy-rr r1 r8)
	(f-call 'sys_mail 'alloc '(kn_msg_link_route_size) '(r0))
	(vp-xor-rr r1 r1)
	(vp-cpy-ri r1 r0 (add msg_dest id_mbox))
	(vp-cpy-ri r8 r0 (add msg_dest id_cpu))
	(vp-cpy-ri r1 r0 kn_msg_user)
	(vp-cpy-ri r1 r0 (add kn_msg_reply_id id_mbox))
	(vp-cpy-ri r1 r0 (add kn_msg_reply_id id_cpu))
	(vp-cpy-cr kn_call_route r1)
	(vp-cpy-ri r1 r0 kn_msg_function)
	(vp-cpy-ri-i r7 r0 kn_msg_link_route_origin)
	(vp-cpy-ri-i r7 r0 kn_msg_link_route_via)
	(vp-cpy-cr 1 r1)
	(vp-cpy-ri-i r1 r0 kn_msg_link_route_hops)
	(f-call 'sys_mail 'send '(r0))

	;open shared memory file
	(f-call 'pii 'open '((& r13 msg_data) (bit-or o_creat o_rdwr) (bit-or s_irusr s_iwusr)) '(r0))
	(vp-cpy-rr r0 r12)
	(vp-cpy-ri r0 rsp lk_node_handle)

	;set size of region
	(f-call 'pii 'ftruncate '(r0 lk_buffer_size))

	;map shared object
	(f-call 'pii 'mmap '(0 lk_buffer_size (bit-or prot_read prot_write) map_shared r12 0) '(r0))
	(vp-cpy-rr r0 r11)
	(assert '(r0 != 0))

	;r9 is tx channel, r10 is rx channel
	;r12 is tx msg, r13 is rx msg
	(vp-add-rr r11 r9)
	(vp-add-rr r11 r10)
	(vp-lea-i r9 lk_chan_msg0 r12)
	(vp-lea-i r10 lk_chan_msg0 r13)

	;clear tx channel
	(f-call 'sys_mem 'clear '(r9 lk_chan_size))

	;read and write messages through the shared buffer in r11
	(vp-xor-rr r8 r8)
	(loop-start)
		;exchange task counts
		(f-bind 'sys_task 'statics r0)
		(vp-cpy-ir-ui r0 tk_statics_task_count r0)
		(vp-cpy-ri-i r0 r9 lk_chan_task_count)
		(vp-cpy-ir-ui r10 lk_chan_task_count r0)
		(vp-cpy-ri-i r0 rsp lk_node_task_count)

		;check if we need to grab a new message
		(vpif '(r8 == 0))
		(vp-label 'more_output)
			;no outgoing message so see if any off chip mail for me
			(vp-cpy-ir-ui rsp lk_node_cpu_id r0)
			(f-bind 'sys_mail 'statics r7)
			(loop-list-forward r7 ml_statics_offchip_list r6 r7)
				(vp-cpy-ir r6 (add msg_dest id_cpu) r2)
				(breakif '(r0 == r2))
				(vp-cpy-ir rsp (add lk_node_table lk_table_array) r1)
				(continueif '(r1 == 0))
				(vp-mul-cr lk_route_size r2)
				(vp-add-cr lk_route_hops r1)
				(vp-cpy-dr-ui r1 r2 r1)
			(loop-until '(r1 != 0))
			(vpif '(r7 != 0))
				(vp-cpy-rr r6 r8)
				(ln-remove-node r6 r1)
			(endif)
		(endif)

		;if we have a message to send then see if we can send it
		(vpif '(r8 != 0))
			(vp-cpy-ir-ui r12 lk_msg_status r0)
			(vpif '(r0 == lk_chan_status_ready))
				;copy message data
				;round up to next 8 byte boundary for speed
				(vp-cpy-ir-ui r8 msg_length r2)
				(vp-add-cr (sub (dec ptr_size) ln_node_size) r2)
				(vp-and-cr (neg ptr_size) r2)
				(f-call 'sys_mem 'copy '((& r8 ln_node_size) (& r12 lk_msg_buf) r2))

				;busy status
				(vp-cpy-cr lk_chan_status_busy r1)
				(vp-cpy-ri-i r1 r12 lk_msg_status)

				;free message
				(f-call 'sys_mem 'free '(r8))
				(vp-xor-rr r8 r8)

				;move on to next msg chan
				(vp-add-cr lk_msg_size r12)
				(vp-lea-i r9 lk_chan_size r14)
				(vpif '(r12 == r14))
					(vp-lea-i r9 lk_chan_msg0 r12)
				(endif)
				(vp-jmp 'more_output)
			(endif)
		(endif)

		;check for received message
		(vp-cpy-ir-ui r13 lk_msg_status r0)
		(vpif '(r0 == lk_chan_status_busy))
			;allocate msg, copy over data
			;round up to next 8 byte boundary for speed
			(vp-cpy-ir-ui r13 (add lk_msg_buf (sub msg_length ln_node_size)) r5)
			(f-call 'sys_mail 'alloc '(r5) '(r7))
			(vp-add-cr (sub (dec ptr_size) ln_node_size) r5)
			(vp-and-cr (neg ptr_size) r5)
			(f-call 'sys_mem 'copy '((& r13 lk_msg_buf) (& r7 ln_node_size) r5))

			;clear status
			(vp-cpy-cr lk_chan_status_ready r1)
			(vp-cpy-ri-i r1 r13 lk_msg_status)

			;send onwards
			(f-call 'sys_mail 'send '(r7))

			;move on to next msg chan
			(vp-add-cr lk_msg_size r13)
			(vp-lea-i r10 lk_chan_size r14)
			(vpif '(r13 == r14))
				(vp-lea-i r10 lk_chan_msg0 r13)
			(endif)
		(endif)

		;let other links run
		(f-call 'sys_task 'yield)

		;are we in a quiet period
		(vp-cpy-ir-ui r13 lk_msg_status r0)
		(continueif '(r0 == lk_chan_status_busy))
		(vp-xor-rr r1 r1)
		(vp-cpy-ir-ui r12 lk_msg_status r0)
		(vpif '(r0 == lk_chan_status_ready))
			(vpif '(r8 != 0))
				(vp-cpy-cr 1 r1)
			(endif)
		(endif)
		(continueif '(r1 != 0))

		;small sleep if so
		(f-call 'sys_task 'sleep '(1000))

		;exit if signaled by kernel
		(vp-cpy-ir-i rsp lk_node_cpu_id r0)
	(loop-until '(r0 == -1))

	;unmap object
	(f-call 'pii 'munmap '(r11 lk_buffer_size))

	;close it
	(f-call 'pii 'close '((rsp lk_node_handle)))

	;unlink shared object
	(vp-cpy-ir rsp lk_node_params r0)
	(f-call 'pii 'unlink '((& r0 msg_data)))

	;free params msg
	(f-call 'sys_mem 'free '((rsp lk_node_params)))

	;remove from links list and deallocate link node on stack
	(f-call 'sys_mem 'free '((rsp lk_node_table)))
	(vp-cpy-rr rsp r0)
	(ln-remove-node r0 r1)
	(vp-free lk_node_size)

	;restore task count
	(f-bind 'sys_task 'statics r0)
	(vp-cpy-ir-ui r0 tk_statics_task_count r1)
	(vp-add-cr 1 r1)
	(vp-cpy-ri-i r1 r0 tk_statics_task_count)
	(vp-ret)

(def-func-end)
