(import 'inc/func.inc)
(import 'inc/mail.inc)
(import 'inc/gui.inc)
(import 'class/class_window.inc)
(import 'class/class_flow.inc)
(import 'class/class_grid.inc)
(import 'class/class_button.inc)
(import 'class/class_progress.inc)
(import 'class/class_string.inc)

(def-struct 'sample_msg 'msg_header)
	(ulong 'sample_msg_index)
	(ulong 'sample_msg_task_count)
	(ulong 'sample_msg_mem_used)
	(offset 'sample_msg_reply_size)
	(ulong 'sample_msg_command)
	(struct 'sample_msg_reply_id 'id)
(def-struct-end)

(def-func 'apps/netmon/app)

	(def-struct 'sel)
		(ptr 'sel_select1)
		(ptr 'sel_select2)
	(def-struct-end)

	(struct 'select 'sel)
	(ptr 'window 'window_panel 'panel 'left_panel 'right_panel)
	(pptr 'task_progress)
	(ulong 'value 'max_tasks 'max_memory 'total_memory)
	(uint 'cpu_total 'cpu_count)

	(ptr 'msg)
	(ulong 'mailbox)
	(pulong 'task_mailboxes)
	(struct 'task_mailbox 'mailbox)

	(ptr 'string 'progress)
	(int 'width 'height)
	(ulong 'owner)

	;init app vars
	(push-scope)
	(assign {0} {max_tasks})

	;create my window
	(f-call 'window 'create {} {window})
	(f-call 'window 'get_panel {window} {window_panel})
	(f-call 'string 'create_from_cstr {"Network Monitor"} {string})
	(f-call 'window 'set_title {window, string})
	(f-call 'string 'create_from_cstr {"Status Text"} {string})
	(f-call 'window 'set_status {window, string})

	;add my panels
	(f-call 'grid 'create {} {panel})
	(f-call 'grid 'set_grid {panel, 2, 1})
	(f-call 'grid 'add_back {panel, window_panel})
	(f-call 'flow 'create {} {left_panel})
	(f-call 'flow 'set_flow_flags {left_panel, flow_flag_down | flow_flag_fillw})
	(f-call 'flow 'add_back {left_panel, panel})
	(f-call 'flow 'create {} {right_panel})
	(f-call 'flow 'set_flow_flags {right_panel, flow_flag_down | flow_flag_fillw})
	(f-call 'flow 'add_back {right_panel, panel})

	;allocate array for progress bars
	(f-call 'sys_cpu 'total {} {cpu_total})
	(f-call 'sys_mem 'alloc {cpu_total * ptr_size * 2} {task_progress, _})

	;add num cpus progress bars to my app panel
	(assign {0} {cpu_count})
	(loop-start)
		(f-call 'progress 'create {} {progress})
		(f-call 'progress 'set_max {progress, 1})
		(f-call 'progress 'set_color {progress, 0xff00ff00})
		(f-call 'progress 'add_back {progress, left_panel})
		(assign {progress} {task_progress[cpu_count * ptr_size * 2]})
		(f-call 'progress 'create {} {progress})
		(f-call 'progress 'set_max {progress, 1})
		(f-call 'progress 'set_color {progress, 0xffff0000})
		(f-call 'progress 'add_back {progress, right_panel})
		(assign {progress} {task_progress[cpu_count * ptr_size * 2 + ptr_size]})
		(assign {cpu_count + 1} {cpu_count})
	(loop-until {cpu_count == cpu_total})

	;set to pref size
	(v-call 'window 'pref_size {window} {width, height})
	(f-call 'window 'change {window, 32, 32, width, height})

	;set owner
	(f-call 'sys_task 'tcb {} {owner})
	(f-call 'window 'set_owner {window, owner})

	;add to screen and dirty
	(f-call 'gui_gui 'add {window})
	(f-call 'window 'dirty_all {window})

	;open global farm
	(f-call 'string 'create_from_cstr {"apps/netmon/child"} {string})
	(f-call 'sys_task 'open_global {string, cpu_total} {task_mailboxes})
	(f-call 'string 'deref {string})

	;init task mailbox
	(f-call 'sys_mail 'init_mailbox {& task_mailbox})

	;set up mailbox select array
	(f-call 'sys_task 'mailbox {} {select.sel_select1, _})
	(assign {& task_mailbox} {select.sel_select2})

	;app event loop
	(loop-start)
		;new round of samples ?
		(vpif {cpu_count == cpu_total})
			;set max_memory level
			(assign {(total_memory * 3) / (cpu_total * 2) + 1} {max_memory})
			(assign {0} {total_memory})

			;send out sample commands
			(loop-start)
				(assign {cpu_count - 1} {cpu_count})
				(f-call 'sys_mail 'alloc {} {msg})
				(assign {1} {msg->sample_msg_command})
				(assign {sample_msg_size} {msg->msg_length})
				(assign {cpu_count * ptr_size * 2} {msg->sample_msg_index})
				(assign {task_mailboxes[cpu_count * id_size].id_mbox} {msg->msg_dest.id_mbox})
				(assign {task_mailboxes[cpu_count * id_size].id_cpu} {msg->msg_dest.id_cpu})
				(assign {select.sel_select2} {msg->sample_msg_reply_id.id_mbox})
				(f-call 'sys_cpu 'id {} {msg->sample_msg_reply_id.id_cpu})
				(f-call 'sys_mail 'send {msg})
			(loop-untilnot {cpu_count})
		(endif)

		;select on multiple mailboxes
		(f-call 'sys_mail 'select {& select, sel_size >> 3} {mailbox})
		(f-call 'sys_mail 'read {mailbox} {msg})

		;which mailbox had mail ?
		(vpif {mailbox == select.sel_select1})
			;dispatch event to view
			(v-call 'view 'event {msg->ev_msg_view, msg})
		(else)
			;update progress bars
			(assign {msg->sample_msg_task_count} {value})
			(vpif {value > max_tasks})
				(assign {value} {max_tasks})
			(endif)
			(assign {task_progress[msg->sample_msg_index]} {progress})
			(f-call 'progress 'set_max {progress, max_tasks})
			(f-call 'progress 'set_val {progress, value})
			(f-call 'progress 'dirty {progress})

			(assign {msg->sample_msg_mem_used} {value})
			(assign {total_memory + value} {total_memory})
			(assign {task_progress[msg->sample_msg_index + ptr_size]} {progress})
			(f-call 'progress 'set_max {progress, max_memory})
			(f-call 'progress 'set_val {progress, value})
			(f-call 'progress 'dirty {progress})

			;count up replies
			(assign {cpu_count + 1} {cpu_count})
		(endif)

		;free event message
		(f-call 'sys_mem 'free {msg})

		;be friendly
		(f-call 'sys_task 'yield)
	(loop-end)

	;wait for outstanding replys
	(loop-while {cpu_count != cpu_total})
		(f-call 'sys_mail 'read {select.sel_select2} {msg})
		(f-call 'sys_mem 'free {msg})
		(assign {cpu_count + 1} {cpu_count})
	(loop-end)

	;send out exit commands
	(loop-start)
		(assign {cpu_count - 1} {cpu_count})
		(f-call 'sys_mail 'alloc {} {msg})
		(assign {0} {msg->sample_msg_command})
		(assign {sample_msg_size} {msg->msg_length})
		(assign {task_mailboxes[cpu_count * id_size].id_mbox} {msg->msg_dest.id_mbox})
		(assign {task_mailboxes[cpu_count * id_size].id_cpu} {msg->msg_dest.id_cpu})
		(f-call 'sys_mail 'send {msg})
	(loop-untilnot {cpu_count})

	;free arrays
	(f-call 'sys_mem 'free {task_mailboxes})
	(f-call 'sys_mem 'free {task_progress})

	;deref window
	(f-call 'window 'deref {window})

	(pop-scope)
	(return)

(def-func-end)

(def-func 'apps/netmon/child)
	;monitor task

	(ptr 'msg)

	(push-scope)
	(loop-start)
		;read mail command
		(f-call 'sys_mail 'mymail {} {msg})
		(breakifnot {msg->sample_msg_command})

		;sample command
		(f-call 'sys_task 'count {} {msg->sample_msg_task_count})
		(f-call 'sys_mem 'used {} {msg->sample_msg_mem_used})
		(assign {msg->sample_msg_reply_id.id_mbox} {msg->msg_dest.id_mbox})
		(assign {msg->sample_msg_reply_id.id_cpu} {msg->msg_dest.id_cpu})
		(assign {sample_msg_reply_size} {msg->msg_length})
		(f-call 'sys_mail 'send {msg})

		;be friendly
		(f-call 'sys_task 'yield)
	(loop-end)
	(f-call 'sys_mem 'free {msg})
	(pop-scope)
	(return)

(def-func-end)
