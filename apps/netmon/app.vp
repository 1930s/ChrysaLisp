(import 'sys/func.inc)
(import 'gui/gui.inc)
(import 'sys/kernel/kernel.inc)
(import 'class/window/window.inc)
(import 'class/flow/flow.inc)
(import 'class/grid/grid.inc)
(import 'class/button/button.inc)
(import 'class/progress/progress.inc)
(import 'class/string/string.inc)
(import 'class/array/array.inc)

(def-struct 'sample_msg 'msg_header)
	(ulong 'cpu)
	(ulong 'task_count)
	(ulong 'mem_used)
	(offset 'reply_size)
	(ulong 'command)
	(struct 'reply_id 'id)
(def-struct-end)

(def-func 'apps/netmon/app)

	(defcvar 'num_samples 256)

	(def-struct 'app 'obj)
		(uint 'closed)
	(def-struct-end)

	(def-struct 'sel)
		(ptr 'select1)
		(ptr 'select2)
	(def-struct-end)

	(struct 'myapp 'app)
	(struct 'select 'sel)
	(ptr 'window 'panel1 'panel2 'left_panel 'right_panel 'trip)
	(pptr 'task_progress)
	(puint 'durations)
	(ulong 'value 'max_tasks 'max_memory 'total_memory 'start_time 'time 'total)
	(uint 'cpu_total 'cpu_count 'index 'sample)

	(ptr 'msg)
	(ulong 'mailbox)
	(ptr 'ids)
	(struct 'task_mailbox 'mailbox)

	(ptr 'string 'progress 'label)
	(int 'width 'height)
	(ulong 'owner)

	;init app vars
	(push-scope)
	(f-call 'obj 'init (cat {&myapp, @} (f-path 'class 'obj)))
	(assign {0, 0} {max_tasks, myapp.app_closed})

	;create my window
	(f-call 'window 'create {window_flag_close} {window})
	(f-call 'string 'create_from_cstr {"Network Monitor"} {string})
	(f-call 'window 'set_title {window, string})

	;add my panels
	(f-call 'flow 'create {} {panel1})
	(f-call 'flow 'set_long_prop {panel1, prop_flow_flags, flow_flag_down | flow_flag_fillw})
	(v-call 'window 'add_child {window, panel1})
	(f-call 'grid 'create {} {panel2})
	(f-call 'grid 'set_long_prop {panel2, prop_grid_width, 2})
	(f-call 'grid 'set_long_prop {panel2, prop_grid_height, 1})
	(v-call 'flow 'add_child {panel1, panel2})
	(f-call 'flow 'create {} {left_panel})
	(f-call 'flow 'set_long_prop {left_panel, prop_flow_flags, flow_flag_down | flow_flag_fillw})
	(v-call 'grid 'add_child {panel2, left_panel})
	(f-call 'flow 'create {} {right_panel})
	(f-call 'flow 'set_long_prop {right_panel, prop_flow_flags, flow_flag_down | flow_flag_fillw})
	(v-call 'grid 'add_child {panel2, right_panel})

	;add my panel1 round trip bar
	(f-call 'progress 'create {} {trip})
	(f-call 'progress 'set_long_prop {trip, prop_progress_max, 100})
	(f-call 'progress 'set_long_prop {trip, prop_color, 0xff00ffff})
	(v-call 'flow 'add_child {panel1, trip})

	;add my panel2 headings
	(f-call 'label 'create {} {label})
	(f-call 'label 'set_long_prop {label, prop_color, 0xffffffff})
	(f-call 'string 'create_from_cstr {"Tasks"} {string})
	(f-call 'label 'set_text {label, string})
	(v-call 'flow 'add_child {left_panel, label})
	(f-call 'label 'create {} {label})
	(f-call 'label 'set_long_prop {label, prop_color, 0xffffffff})
	(f-call 'string 'create_from_cstr {"Memory"} {string})
	(f-call 'label 'set_text {label, string})
	(v-call 'flow 'add_child {right_panel, label})

	;allocate array for progress bars and trip times
	(f-call 'kernel 'total {} {cpu_total})
	(f-call 'sys_mem 'alloc {cpu_total * ptr_size * 2} {task_progress, _})
	(f-call 'sys_mem 'alloc {num_samples * int_size} {durations, _})
	(f-call 'sys_mem 'clear {durations, num_samples * int_size})

	;add num cpus progress bars to my app panel2
	(f-call 'flow 'set_long_prop {panel2, prop_progress_max, 1})
	(f-call 'flow 'set_long_prop {left_panel, prop_color, 0xff00ff00})
	(f-call 'flow 'set_long_prop {right_panel, prop_color, 0xffff0000})
	(assign {0} {cpu_count})
	(loop-start)
		(f-call 'progress 'create {} {progress})
		(v-call 'flow 'add_child {left_panel, progress})
		(assign {progress} {task_progress[cpu_count * ptr_size * 2]})
		(f-call 'progress 'create {} {progress})
		(v-call 'flow 'add_child {right_panel, progress})
		(assign {progress} {task_progress[cpu_count * ptr_size * 2 + ptr_size]})
		(assign {cpu_count + 1} {cpu_count})
	(loop-until {cpu_count == cpu_total})

	;set to pref size
	(v-call 'window 'pref_size {window} {_, width, height})
	(f-call 'window 'change {window, 32, 32, width, height})

	;set owner
	(f-call 'sys_task 'tcb {} {owner})
	(f-call 'window 'set_owner {window, owner})

	;set close action
	(f-call 'window 'connect_close {window, &myapp, $on_window_close})

	;add to screen
	(f-call 'gui_gui 'add {window})

	;open global farm
	(f-call 'string 'create_from_cstr {"apps/netmon/child"} {string})
	(f-call 'sys_task 'open_farm {string, cpu_total, kn_call_open} {ids})
	(f-call 'string 'deref {string})

	;init task mailbox
	(f-call 'sys_mail 'init_mailbox {&task_mailbox})

	;set up mailbox select array
	(f-call 'sys_task 'mailbox {} {select.sel_select1, _})
	(assign {&task_mailbox} {select.sel_select2})

	;app event loop
	(assign {0} {sample})
	(f-call 'pii 'time {} {start_time})
	(loop-start)
		;new round of samples ?
		(vpif {cpu_count == cpu_total})
			;get trip time and save start time
			(f-call 'pii 'time {} {time})
			(assign {time - start_time} {start_time})
			(assign {(sample + 1) % num_samples} {sample})
			(assign {start_time} {durations[sample * int_size]})
			(assign {0, 0} {index, total})
			(loop-start)
				(assign {durations[index * int_size] + total} {total})
				(assign {index + 1} {index})
			(loop-until {index == num_samples})
			(f-call 'progress 'set_long_prop {trip, prop_progress_val, total / (num_samples * 100)})
			(f-call 'progress 'dirty {trip})
			(assign {time} {start_time})

			;set max_memory level
			(assign {(total_memory * 3) / (cpu_total * 2) + 1} {max_memory})
			(assign {0} {total_memory})

			;send out sample commands
			(loop-start)
				(assign {cpu_count - 1} {cpu_count})
				(f-call 'sys_mail 'alloc {sample_msg_size} {msg})
				(assign {1} {msg->sample_msg_command})
				(f-call 'array 'get_element {ids, cpu_count * 2} {_, msg->msg_dest.id_mbox})
				(f-call 'array 'get_element {ids, cpu_count * 2 + 1} {_, msg->msg_dest.id_cpu})
				(assign {select.sel_select2} {msg->sample_msg_reply_id.id_mbox})
				(f-call 'kernel 'id {} {msg->sample_msg_reply_id.id_cpu})
				(f-call 'sys_mail 'send {msg})
			(loop-untilnot {cpu_count})
		(endif)

		;select on multiple mailboxes
		(f-call 'sys_mail 'select {&select, sel_size >> 3} {mailbox})
		(f-call 'sys_mail 'read {mailbox} {msg})

		;which mailbox had mail ?
		(vpif {mailbox == select.sel_select1})
			;dispatch event to view
			(v-call 'view 'event {msg->ev_msg_view, msg})
		(else)
			;update progress bars
			(assign {msg->sample_msg_task_count} {value})
			(vpif {value > max_tasks})
				(assign {value} {max_tasks})
			(endif)
			(assign {task_progress[msg->sample_msg_cpu * ptr_size * 2]} {progress})
			(f-call 'progress 'set_long_prop {progress, prop_progress_max, max_tasks})
			(f-call 'progress 'set_long_prop {progress, prop_progress_val, value})
			(f-call 'progress 'dirty {progress})

			(assign {msg->sample_msg_mem_used} {value})
			(assign {total_memory + value} {total_memory})
			(assign {task_progress[msg->sample_msg_cpu * ptr_size * 2 + ptr_size]} {progress})
			(f-call 'progress 'set_long_prop {progress, prop_progress_max, max_memory})
			(f-call 'progress 'set_long_prop {progress, prop_progress_val, value})
			(f-call 'progress 'dirty {progress})

			;count up replies
			(assign {cpu_count + 1} {cpu_count})
		(endif)

		;free event message
		(f-call 'sys_mem 'free {msg})

		;be friendly
		(f-call 'sys_task 'yield)
	(loop-until {myapp.app_closed})

	;wait for outstanding replies
	(loop-while {cpu_count != cpu_total})
		(f-call 'sys_mail 'read {select.sel_select2} {msg})
		(f-call 'sys_mem 'free {msg})
		(assign {cpu_count + 1} {cpu_count})
	(loop-end)

	;send out exit commands
	(loop-start)
		(assign {cpu_count - 1} {cpu_count})
		(f-call 'sys_mail 'alloc {sample_msg_size} {msg})
		(assign {0} {msg->sample_msg_command})
		(f-call 'array 'get_element {ids, cpu_count * 2} {_, msg->msg_dest.id_mbox})
		(f-call 'array 'get_element {ids, cpu_count * 2 + 1} {_, msg->msg_dest.id_cpu})
		(f-call 'sys_mail 'send {msg})
	(loop-untilnot {cpu_count})

	;free arrays
	(f-call 'array 'deref {ids})
	(f-call 'sys_mem 'free {durations})
	(f-call 'sys_mem 'free {task_progress})

	;deref window
	(f-call 'window 'deref {window})
	(v-call 'obj 'deinit {&myapp})

	(pop-scope)
	(return)

(vp-label 'on_window_close)
	;inputs
	;r0 = app local object
	;r1 = close object

	(ptr 'this 'src)

	(push-scope)
	(l-entry {this, src})
	(assign {1} {this->app_closed})
	(pop-scope)
	(return)

(def-func-end)

(def-func 'apps/netmon/child)
	;monitor task

	(ptr 'msg)

	(push-scope)
	(loop-start)
		;read mail command
		(f-call 'sys_mail 'mymail {} {msg})
		(breakifnot {msg->sample_msg_command})

		;sample command
		(f-call 'kernel 'id {} {msg->sample_msg_cpu})
		(f-call 'sys_task 'count {} {msg->sample_msg_task_count})
		(f-call 'sys_mem 'used {} {msg->sample_msg_mem_used})
		(assign {msg->sample_msg_reply_id.id_mbox} {msg->msg_dest.id_mbox})
		(assign {msg->sample_msg_reply_id.id_cpu} {msg->msg_dest.id_cpu})
		(assign {sample_msg_reply_size} {msg->msg_length})
		(f-call 'sys_mail 'send {msg})

		;be friendly
		(f-call 'sys_task 'yield)
	(loop-end)
	(f-call 'sys_mem 'free {msg})
	(pop-scope)
	(return)

(def-func-end)
