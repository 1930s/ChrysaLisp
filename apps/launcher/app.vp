(import 'inc/func.inc)
(import 'inc/mail.inc)
(import 'inc/gui.inc)
(import 'inc/string.inc)
(import 'class/class_window.inc)
(import 'class/class_flow.inc)
(import 'class/class_button.inc)
(import 'class/class_string.inc)

(def-func 'apps/launcher/app)

	(struct 'myapp 'obj)
	(ptr 'msg 'window 'window_panel 'panel 'button 'string 'pressed)
	(pubyte 'next)
	(ulong 'owner)
	(int 'width 'height)
	(ubyte 'length)

	;init app vars
	push_scope
	func_path class, obj
	func_call obj, init, {&myapp, @_function_}, {_}

	;create my window
	func_call window, create, {}, {window}
	func_call window, get_panel, {window}, {window_panel}
	func_call string, create_from_cstr, {"Launcher"}, {string}
	func_call window, set_title, {window, string}
	func_call string, create_from_cstr, {"Status Text"}, {string}
	func_call window, set_status, {window, string}

	;add my app panel
	func_call flow, create, {}, {panel}
	func_call flow, set_flow_flags, {panel, flow_flag_down | flow_flag_fillw}
	func_call flow, add_back, {panel, window_panel}

	;add launch buttons to my app panel
	assign {$launch_list}, {next}
	loop_while {*next}
		func_call button, create, {}, {button}
		func_call button, set_color, {button, 0xffffff00}
		func_call string, create_from_cstr, {next}, {string}
		func_call button, set_text, {button, string}
		func_call button, add_back, {button, panel}
		func_call button, sig_pressed, {button}, {pressed}
		func_call button, connect, {button, pressed, &myapp, $on_press}

		func_call sys_string, length, {next}, {length}
		assign {next + length + 1}, {next}
	loop_end

	;set to pref size
	virt_call window, pref_size, {window}, {width, height}
	func_call window, change, {window, 400, 256, width + 40, height}

	;set window owner
	func_call sys_task, tcb, {}, {owner}
	func_call window, set_owner, {window, owner}

	;add to screen and dirty
	func_call gui_gui, add, {window}
	func_call window, dirty_all, {window}

	;app event loop
	loop_start
		func_call sys_mail, mymail, {}, {msg}

		;dispatch event to view
		virt_call view, event, {msg->ev_msg_view, msg}

		;free event message
		func_call sys_mem, free, {msg}
	loop_end

	;deref window
	func_call window, deref, {window}
	virt_call obj, deinit, {&myapp}
	pop_scope
	return

on_press:
	;inputs
	;r0 = app local object
	;r1 = button object

	(ptr 'inst 'button 'string)

	push_scope
	retire {r0, r1}, {inst, button}
	func_call button, get_text, {button}, {string}
	func_call sys_task, open, {string}, {_, _}
	func_call string, deref, {string}
	pop_scope
	return

launch_list:
	(vp-string "apps/netmon/app") (vp-byte 0)
	(vp-string "apps/terminal/app") (vp-byte 0)
	(vp-string "apps/calculator/app") (vp-byte 0)
	(vp-string "tests/farm") (vp-byte 0)
	(vp-string "tests/array") (vp-byte 0)
	(vp-string "tests/pipe") (vp-byte 0)
	(vp-string "tests/global") (vp-byte 0)
	(vp-byte 0)

(def-func-end)
