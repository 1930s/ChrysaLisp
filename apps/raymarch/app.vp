(import 'sys/func.inc)
(import 'sys/mail/mail.inc)
(import 'gui/gui.inc)
(import 'class/window/window.inc)
(import 'class/symbol/symbol.inc)
(import 'class/canvas/canvas.inc)
(import 'class/stream/stream.inc)
(import 'class/stream_str/stream_str.inc)
(import 'class/hash_map/hash_map.inc)
(import 'class/boxed_long/boxed_long.inc)
(import 'class/lisp/lisp.inc)

(def-struct 'raymarch_msg)
	(ptr 'arg0)
	(long 'arg1)
	(long 'arg2)
	(long 'arg3)
(def-struct-end)

(def-func 'apps/raymarch/app)

	(defcvar 'app_width 500 'app_height 500 'app_scale 1.0)

	(ptr 'msg 'data 'window 'canvas)
	(int 'width 'height)

	(push-scope)

	;create my window
	(f-call 'window 'create {window_flag_close} {window})
	(f-call 'window 'set_title {window, "Raymarch - Interpreted Lisp 16.16 fixed point !"})

	;add my app canvas
	(f-call 'canvas 'create {app_width, app_height, app_scale} {canvas})
	(v-call 'window 'add_child {window, canvas})

	;set to pref size
	(v-call 'window 'pref_size {window} {_, width, height})
	(f-call 'window 'change {window, 512, 256, width, height})

	;set close action
	(f-call 'window 'connect_close {window, 0})

	;add to screen
	(f-call 'gui_gui 'add {window})

	;clear canvas
	(f-call 'canvas 'fill {canvas, 0xff000000})
	(f-call 'canvas 'swap {canvas})

	;start lisp task and send it args
	(f-call 'sys_mail 'alloc {raymarch_msg_size} {msg, data})
	(f-call 'sys_task 'start {@apps/raymarch/lisp} {_, msg->msg_dest.id_mbox, msg->msg_dest.id_cpu})
	(assign {canvas, app_width * 1.0, app_height * 1.0, app_scale}
			{data->raymarch_msg_arg0, data->raymarch_msg_arg1, data->raymarch_msg_arg2, data->raymarch_msg_arg3})
	(f-call 'canvas 'ref {canvas})
	(f-call 'sys_mail 'send {msg})

	;app event loop
	(loop-start)
		(f-call 'sys_mail 'mymail {} {msg, data})

		;dispatch event to target
		(breakifnot {data->ev_msg_target_id})
		(v-call 'view 'event {window, data})

		;free event message
		(f-call 'sys_mail 'free {msg})
	(loop-end)
	(f-call 'sys_mail 'free {msg})

	;deref window
	(f-call 'window 'deref {window})

	(pop-scope)
	(return)

(def-func-end)

(def-func 'apps/raymarch/lisp 8192)

	(ptr 'lisp 'stream 'file 'args 'value 'msg 'data 'script)

	;init app vars
	(push-scope)

	;string output stream
	(f-call 'string 'create_from_buffer {0, string_gap} {value})
	(f-call 'stream_str 'create {value} {stream})

	;create lisp class
	(f-call 'lisp 'create {stream, stream, stream} {lisp})
	(f-call 'ref 'deref {stream})

	;read canvas msg create argv
	(f-call 'sys_mail 'mymail {} {msg, data})
	(f-call 'vector 'create {} {args})
	(f-call 'vector 'push_back {args, data->raymarch_msg_arg0})
	(f-call 'boxed_long 'create {data->raymarch_msg_arg1} {value})
	(f-call 'vector 'push_back {args, value})
	(f-call 'boxed_long 'create {data->raymarch_msg_arg2} {value})
	(f-call 'vector 'push_back {args, value})
	(f-call 'boxed_long 'create {data->raymarch_msg_arg3} {value})
	(f-call 'vector 'push_back {args, value})
	(f-call 'sys_mail 'free {msg})
	(f-call 'symbol 'intern_cstr {"argv"} {value})
	(f-call 'hash_map 'insert {lisp->lisp_environment, value, args})
	(f-call 'ref 'deref {value})
	(f-call 'ref 'deref {args})

	;run any app.lisp
	(f-call 'string 'create_from_cstr {"apps/raymarch/app.lisp"} {script})
	(f-call 'string 'create_from_file {&script->string_data} {file})
	(vpif {file})
		;REPL from file stream
		(f-call 'vector 'create {} {args})
		(f-call 'stream_str 'create {file} {stream})
		(f-call 'string 'ref {script})
		(f-call 'vector 'push_back {args, stream})
		(f-call 'vector 'push_back {args, script})
		(f-call 'lisp 'func_repl {lisp, args} {_, value})
		(vpif (cat {value->obj_vtable == @} (f-path 'class 'error)))
			(f-call 'lisp 'repl_print {lisp, lisp->lisp_stderr, value})
			(f-call 'stream 'write_char {lisp->lisp_stderr, char_lf})
		(endif)
		(v-call 'stream 'write_flush {lisp->lisp_stderr})
		(f-call 'ref 'deref {value})
		(f-call 'vector 'deref {args})
	(endif)
	(f-call 'string 'deref {script})

	;clean up
	(f-call 'lisp 'deref {lisp})

	(pop-scope)
	(return)

(def-func-end)
