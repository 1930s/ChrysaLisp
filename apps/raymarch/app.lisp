;import canvas class method slots
(defq slot_set_fbox nil slot_fill nil slot_swap nil)
(within-compile-env (lambda ()
	(import 'class/canvas/canvas.inc)
	(setq slot_set_fbox (method-slot 'canvas 'set_fbox)
		slot_fill (method-slot 'canvas 'fill)
		slot_swap (method-slot 'canvas 'swap))))

(bind '(canvas canvas_width canvas_height canvas_scale) argv)

(defun read-farm (i s)
	(while (lt (length (elem i data)) s)
		(elem-set i data (cat (elem i data) (pipe-read (elem i farm)))))
	(defq _ (slice 0 s (elem i data)))
	(elem-set i data (slice s -1 (elem i data))) _)

(defun read-byte (o f)
	(code (elem o f)))
(defun read-short (o f)
	(add (read-byte o f) (bit-shl (read-byte (inc o) f) 8)))
(defun read-int (o f)
	(add (read-short o f) (bit-shl (read-short (add o 2) f) 16)))

(defun screen (w h s)
	(defq y 0
		w (div (fmul w s) 1.0)
		h (div (fmul h s) 1.0)
		data (list) farm (list)
		line_length (mul w 4))
	(each (lambda (_)
		(push data "")
		(push farm (pipe "lisp apps/raymarch/child.lisp"))
		(pipe-write (elem -2 farm) (cat "(screen " (str w) " " (str h) ") "))) (range 0 8))
	(while (lt y h)
		(pipe-write (elem (mod y (length farm)) farm) (cat "(line " (str y) ") "))
		(setq y (inc y)))
	(each (lambda (_)
		(read-farm _ 2)) (range 0 8))
	(setq y 0)
	(while (lt y h)
		(defq _ (read-farm (mod y (length farm)) line_length) x 0)
		(read-farm (mod y (length farm)) 3)
		(while (lt x w)
			(call slot_set_fbox canvas (read-int (mul x 4) _) x y 1 1)
			(setq x (inc x)))
		(call slot_swap canvas)
		(setq y (inc y))))

(screen canvas_width canvas_height canvas_scale)
