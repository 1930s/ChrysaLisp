(import 'inc/func.inc)
(import 'inc/mail.inc)
(import 'inc/gui.inc)
(import 'inc/string.inc)
(import 'class/window/window.inc)
(import 'class/flow/flow.inc)
(import 'class/grid/grid.inc)
(import 'class/button/button.inc)
(import 'class/string/string.inc)

(def-func 'apps/calculator/app)

	(def-struct 'shared 'obj)
		(ptr 'shared_display)
		(long 'shared_accum)
		(long 'shared_value)
		(struct 'shared_buffer 32)
		(ubyte 'shared_last_op)
		(ubyte 'shared_last_flag)
		(ubyte 'shared_closed)
	(def-struct-end)

	(struct 'myapp 'shared)
	(ptr 'msg 'window 'flow_panel 'grid_panel 'button 'pressed 'string)
	(pubyte 'next)
	(ulong 'owner)
	(int 'width 'height)
	(ubyte 'length)

	;init app vars
	(push-scope)
	(f-call 'sys_mem 'clear {&myapp, shared_size} {_})
	(f-call 'obj 'init (cat {&myapp, @} (f-path 'class 'obj)) {_})

	;create my window
	(f-call 'window 'create {window_flag_close} {window})
	(f-call 'string 'create_from_cstr {"Calculator"} {string})
	(f-call 'window 'set_title {window, string})

	;add my app flow panel
	(f-call 'flow 'create {} {flow_panel})
	(f-call 'flow 'set_flow_flags {flow_panel, flow_flag_down | flow_flag_fillw | flow_flag_lasth})
	(v-call 'window 'add_child {window, flow_panel})

	;add my display label
	(f-call 'label 'create {} {myapp.shared_display})
	(f-call 'label 'set_color {myapp.shared_display, 0xffffffff})
	(f-call 'label 'set_flow_flags {myapp.shared_display, flow_flag_align_hright | flow_flag_align_vcenter})
	(f-call 'label 'set_font {myapp.shared_display, "fonts/OpenSans-Regular.ttf", 24})
	(f-call 'string 'create_from_cstr {"0"} {string})
	(f-call 'label 'set_text {myapp.shared_display, string})
	(v-call 'flow 'add_child {flow_panel, myapp.shared_display})

	;add my app grid panel
	(f-call 'grid 'create {} {grid_panel})
	(f-call 'grid 'set_grid {grid_panel, 4, 4})
	(v-call 'flow 'add_child {flow_panel, grid_panel})

	;add buttons to my grid panel
	(assign {$button_list} {next})
	(loop-while {*next})
		(f-call 'button 'create {} {button})
		(f-call 'button 'set_color {button, 0xffffff00})
		(f-call 'string 'create_from_cstr {next} {string})
		(f-call 'button 'set_font {button, "fonts/OpenSans-Regular.ttf", 42})
		(f-call 'button 'set_text {button, string})
		(f-call 'button 'set_flow_flags {button, flow_flag_align_hcenter | flow_flag_align_vcenter})
		(v-call 'grid 'add_child {grid_panel, button})
		(f-call 'button 'sig_pressed {button} {pressed})
		(f-call 'button 'connect {button, pressed, &myapp, $on_press})

		(f-call 'sys_string 'length {next} {length})
		(assign {next + length + byte_size} {next})
	(loop-end)

	;set to pref size
	(v-call 'window 'pref_size {window} {width, height})
	(f-call 'window 'change {window, 920, 48, width, height})

	;set window owner
	(f-call 'sys_task 'tcb {} {owner})
	(f-call 'window 'set_owner {window, owner})

	;set close action
	(f-call 'window 'connect_close {window, &myapp, $on_window_close})

	;add to screen and dirty
	(f-call 'gui_gui 'add {window})
	(f-call 'window 'dirty_all {window})

	;app event loop
	(loop-start)
		(f-call 'sys_mail 'mymail {} {msg})

		;dispatch event to view
		(v-call 'view 'event {msg->ev_msg_view, msg})

		;free event message
		(f-call 'sys_mem 'free {msg})
	(loop-until {myapp.shared_closed})

	;deref window
	(f-call 'window 'deref {window})
	(v-call 'obj 'deinit {&myapp})

	(pop-scope)
	(return)

(vp-label 'on_press)
	;inputs
	;r0 = app local object
	;r1 = button object

	(ptr 'inst 'button 'button_string 'display_string 'string 'string1 'string2)
	(ubyte 'char)

	;save inputs
	(push-scope)
	(assign '(r0 r1) {inst, button})
	(f-call 'button 'ref_text {button} {button_string})
	(vpif {button_string->string_length == 2})
		;AC
		(f-call 'string 'create_from_cstr {"0"} {string})
		(f-call 'label 'set_text {inst->shared_display, string})
		(assign {0} {inst->shared_accum})
		(assign {0} {inst->shared_value})
		(assign {0} {inst->shared_last_op})
		(assign {0} {inst->shared_last_flag})
	(else)
		(f-call 'label 'get_text {inst->shared_display} {display_string})
		(assign {ubyte (button_string->string_data)} {char})
		(vpif {char >= char_0 && char <= char_9})
			;numeral
			(assign {ubyte (display_string->string_data)} {char})
			(vpif {char == char_0 || inst->shared_last_flag == 0})
				;clear it
				(f-call 'string 'deref {display_string})
				(f-call 'string 'create_from_cstr {""} {display_string})
				(assign {1} {inst->shared_last_flag})
			(endif)
			;append numeral
			(f-call 'string 'append {display_string, button_string} {string})
			(f-call 'sys_string 'to_long {&string->string_data, 10} {inst->shared_value})
		(else)
			;operator
			(vpif {inst->shared_last_op == char_plus})
				;+
				(assign {inst->shared_accum + inst->shared_value} {inst->shared_accum})
			(elseif {inst->shared_last_op == char_minus})
				;-
				(assign {inst->shared_accum - inst->shared_value} {inst->shared_accum})
			(elseif {inst->shared_last_op == char_multiply})
				;*
				(assign {inst->shared_accum * inst->shared_value} {inst->shared_accum})
			(elseif {inst->shared_last_op == char_divide && inst->shared_value != 0})
				;/
				(assign {inst->shared_accum // inst->shared_value} {inst->shared_accum})
			(else)
				;equals
				(assign {inst->shared_value} {inst->shared_accum})
			(endif)
			(vpif {char != char_equal})
				(assign {char} {inst->shared_last_op})
			(endif)
			(assign {0} {inst->shared_last_flag})
			(vpif {inst->shared_accum < 0})
				;negative accum
				(f-call 'sys_string 'from_long {- inst->shared_accum, &inst->shared_buffer, 10})
				(f-call 'string 'create_from_cstr {"-"} {string1})
				(f-call 'string 'create_from_cstr {&inst->shared_buffer} {string2})
				(f-call 'string 'append {string1, string2} {string})
				(f-call 'string 'deref {string1})
				(f-call 'string 'deref {string2})
			(else)
				;positive accum
				(f-call 'sys_string 'from_long {inst->shared_accum, &inst->shared_buffer, 10})
				(f-call 'string 'create_from_cstr {&inst->shared_buffer} {string})
			(endif)
		(endif)
		(f-call 'label 'set_text {inst->shared_display, string})
	(endif)
	(f-call 'string 'deref {button_string})
	(f-call 'label 'dirty {inst->shared_display})
	(pop-scope)
	(return)

(vp-label 'on_window_close)
	;inputs
	;r0 = app local object
	;r1 = close object

	(ptr 'inst)

	(push-scope)
	(assign '(r0) {inst})
	(assign {1} {inst->shared_closed})
	(pop-scope)
	(return)

(vp-label 'button_list)
	(vp-string "7") (vp-byte 0)
	(vp-string "8") (vp-byte 0)
	(vp-string "9") (vp-byte 0)
	(vp-string "/") (vp-byte 0)
	(vp-string "4") (vp-byte 0)
	(vp-string "5") (vp-byte 0)
	(vp-string "6") (vp-byte 0)
	(vp-string "*") (vp-byte 0)
	(vp-string "1") (vp-byte 0)
	(vp-string "2") (vp-byte 0)
	(vp-string "3") (vp-byte 0)
	(vp-string "-") (vp-byte 0)
	(vp-string "0") (vp-byte 0)
	(vp-string "=") (vp-byte 0)
	(vp-string "AC") (vp-byte 0)
	(vp-string "+") (vp-byte 0)
	(vp-byte 0)

(def-func-end)
