(import 'sys/func.inc)
(import 'sys/mail/mail.inc)
(import 'gui/gui.inc)
(import 'sys/string/string.inc)
(import 'class/window/window.inc)
(import 'class/flow/flow.inc)
(import 'class/grid/grid.inc)
(import 'class/button/button.inc)
(import 'class/string/string.inc)

(def-func 'apps/calculator/app)

	(ptr 'msg 'data 'window 'flow_panel 'grid_panel 'button 'display)
	(long 'accum 'value)
	(pubyte 'next)
	(int 'width 'height 'last_op 'last_flag)
	(uint 'length)
	(struct 'buffer 32)

	;init app vars
	(push-scope)

	;create my window
	(f-call 'window 'create {window_flag_close} {window})
	(f-call 'window 'set_title {window, "Calculator"})

	;add my app flow panel
	(f-call 'flow 'create {} {flow_panel})
	(f-call 'flow 'set_long_prop {flow_panel, prop_flow_flags, flow_flag_down | flow_flag_fillw | flow_flag_lasth})
	(v-call 'window 'add_child {window, flow_panel})

	;add my display label
	(f-call 'label 'create {} {display})
	(f-call 'label 'set_long_prop {display, prop_color, 0xffffffff})
	(f-call 'label 'set_long_prop {display, prop_flow_flags, flow_flag_align_hright | flow_flag_align_vcenter})
	(f-call 'label 'set_font_prop {display, prop_font, "fonts/OpenSans-Regular.ttf", 24})
	(f-call 'label 'set_string_prop {display, prop_text, "0"})
	(v-call 'flow 'add_child {flow_panel, display})

	;add my app grid panel
	(f-call 'grid 'create {} {grid_panel})
	(f-call 'grid 'set_long_prop {grid_panel, prop_grid_width, 4})
	(f-call 'grid 'set_long_prop {grid_panel, prop_grid_height, 4})
	(f-call 'grid 'set_font_prop {grid_panel, prop_font, "fonts/OpenSans-Regular.ttf", 42})
	(v-call 'flow 'add_child {flow_panel, grid_panel})

	;add buttons to my grid panel
	(assign {$button_list} {next})
	(loop-while {*next})
		(f-call 'button 'create {} {button})
		(f-call 'button 'set_long_prop {button, prop_color, 0xffffff00})
		(f-call 'button 'set_string_prop {button, prop_text, next})
		(f-call 'button 'set_long_prop {button, prop_flow_flags, flow_flag_align_hcenter | flow_flag_align_vcenter})
		(f-call 'button 'connect_click {button, 1})
		(v-call 'grid 'add_child {grid_panel, button})
		(f-call 'sys_string 'length {next} {_, length})
		(assign {next + length + byte_size} {next})
	(loop-end)

	;set to pref size
	(v-call 'window 'pref_size {window} {_, width, height})
	(f-call 'window 'change {window, 920, 48, width, height})

	;set close action
	(f-call 'window 'connect_close {window, 0})

	;add to screen
	(f-call 'gui_gui 'add {window})

	;app event loop
	(loop-start 'exit)
		(f-call 'sys_mail 'mymail {} {msg, data})

		;dispatch event to target
		(vpif {data->ev_msg_target_id >= 0})
			(breakifnot {data->ev_msg_target_id} exit)

			(ptr 'button_string 'display_string 'string 'string1 'string2)
			(uint 'char)
			(push-scope)

			(f-call 'window 'find_id {window, data->ev_msg_action_source_id} {_, button})
			(f-call 'button 'get_prop {button, prop_text} {_, button_string})
			(vpif {button_string->string_length == 2})
				;AC
				(f-call 'label 'set_string_prop {display, prop_text, "0"})
				(assign {0} {accum})
				(assign {0} {value})
				(assign {0} {last_op})
				(assign {0} {last_flag})
			(else)
				(assign {ubyte (button_string->string_data)} {char})
				(vpif {char >= char_0 && char <= char_9})
					;numeral
					(f-call 'label 'ref_prop {display, prop_text} {_, display_string})
					(assign {ubyte (display_string->string_data)} {char})
					(vpif {char == char_0 || last_flag == 0})
						;clear it
						(f-call 'string 'deref {display_string})
						(f-call 'string 'create_from_cstr {""} {display_string})
						(assign {1} {last_flag})
					(endif)
					;append numeral
					(f-call 'string 'append {display_string, button_string} {string})
					(f-call 'sys_string 'to_long {&string->string_data, 10} {value})
					(f-call 'string 'deref {display_string})
				(else)
					;operator
					(vpif {last_op == char_plus})
						;+
						(assign {accum + value} {accum})
					(elseif {last_op == char_minus})
						;-
						(assign {accum - value} {accum})
					(elseif {last_op == char_multiply})
						;*
						(assign {accum * value} {accum})
					(elseif {last_op == char_divide && value})
						;/
						(assign {accum // value} {accum})
					(else)
						;equals
						(assign {value} {accum})
					(endif)
					(vpif {char != char_equal})
						(assign {char} {last_op})
					(endif)
					(assign {0} {last_flag})
					(vpif {accum < 0})
						;negative accum
						(f-call 'sys_string 'from_long {- accum, &buffer, 10})
						(f-call 'string 'create_from_cstr {"-"} {string1})
						(f-call 'string 'create_from_cstr {&buffer} {string2})
						(f-call 'string 'append {string1, string2} {string})
						(f-call 'string 'deref {string1})
						(f-call 'string 'deref {string2})
					(else)
						;positive accum
						(f-call 'sys_string 'from_long {accum, &buffer, 10})
						(f-call 'string 'create_from_cstr {&buffer} {string})
					(endif)
				(endif)
				(f-call 'label 'set_string_prop {display, prop_text, &string->string_data})
				(f-call 'string 'deref {string})
			(endif)
			(v-call 'label 'layout {display})
			(f-call 'label 'dirty {display})
			(pop-scope)
		(else)
			(v-call 'view 'event {window, data})
		(endif)

		;free event message
		(f-call 'sys_mail 'free {msg})
	(loop-end)
	(f-call 'sys_mail 'free {msg})

	;deref window
	(f-call 'window 'deref {window})

	(pop-scope)
	(return)

(vp-label 'button_list)
	(vp-string "7") (vp-byte 0)
	(vp-string "8") (vp-byte 0)
	(vp-string "9") (vp-byte 0)
	(vp-string "/") (vp-byte 0)
	(vp-string "4") (vp-byte 0)
	(vp-string "5") (vp-byte 0)
	(vp-string "6") (vp-byte 0)
	(vp-string "*") (vp-byte 0)
	(vp-string "1") (vp-byte 0)
	(vp-string "2") (vp-byte 0)
	(vp-string "3") (vp-byte 0)
	(vp-string "-") (vp-byte 0)
	(vp-string "0") (vp-byte 0)
	(vp-string "=") (vp-byte 0)
	(vp-string "AC") (vp-byte 0)
	(vp-string "+") (vp-byte 0)
	(vp-byte 0)

(def-func-end)
