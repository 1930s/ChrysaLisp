(import 'inc/func.inc)
(import 'class/class_string.inc)
(import 'class/class_vector.inc)
(import 'class/class_stream_msg_out.inc)
(import 'class/class_master.inc)

(def-struct 'tui_msg 'msg_header)
	(struct 'tui_msg_reply_id 'id)
(def-struct-end)

(def-struct 'stdin_msg 'msg_header)
	(ulong 'stdin_msg_char)
(def-struct-end)

(def-func 'apps/terminal/tui)

	(defcvar 'buffer_size 120)

	(def-struct 'shared)
		(ptr 'shared_master 'shared_history)
		(ulong 'shared_history_index)
		(pubyte 'shared_bufp)
		(struct 'shared_buffer 'buffer)
	(def-struct-end)

	(struct 'shared 'shared)
	(struct 'stdin_id 'id)
	(struct 'tui_id 'id)
	(ptr 'msg 'mailbox 'stream)
	(long 'state)

	;init app vars
	(push-scope)
	(f-call 'master 'create {} {shared.shared_master})
	(f-call 'vector 'create {} {shared.shared_history})
	(assign {0} {shared.shared_history_index})
	(assign {&shared.shared_buffer} {shared.shared_bufp})
	(f-call 'sys_task 'mailbox {} {tui_id.id_mbox, tui_id.id_cpu})

	;start stdin polling task and send it tui mailbox id
	(debug-str "tui 1")
	(f-call 'sys_task 'start {@apps/terminal/tui_child} {stdin_id.id_mbox, stdin_id.id_cpu})
	(debug-str "tui 2")
;	(f-call 'sys_mail 'alloc {} {msg})
;	(assign {stdin_id.id_mbox} {msg->msg_dest.id_mbox})
;	(assign {stdin_id.id_cpu} {msg->msg_dest.id_cpu})
;	(assign {tui_id.id_mbox} {msg->tui_msg_reply_id.id_mbox})
;	(assign {tui_id.id_cpu} {msg->tui_msg_reply_id.id_cpu})
;	(assign {tui_msg_size} {msg->msg->msg_length})
;	(f-call 'sys_mail 'send {msg})

	;app event loop
	(loop-start)
		;select on multiple mailboxes
		(f-call 'master 'select {shared.shared_master, tui_id.id_mbox} {mailbox})

		;which mailbox has mail ?
		(vpif {mailbox == tui_id.id_mbox})
			;dispatch event to terminal
			(f-call 'sys_mail 'read {mailbox} {msg})
			(l-call 'terminal_input {&shared, msg->stdin_msg_char} '(r0 r1))
			(f-call 'sys_mem 'free {msg})
		(else)
			;output from a pipe element
			(f-call 'master 'get_stream {shared.shared_master, mailbox} {stream})
			(l-call 'pipe_output {&shared, stream} '(r0 r1) '(r0) {state})
			(vpif {state == -1})
				;EOF
				(f-call 'master 'stop {shared.shared_master})
			(endif)
		(endif)
		(f-call 'sys_task 'yield)
	(loop-end)

	;clean up
	(f-call 'vector 'deref {shared.shared_history})
	(f-call 'master 'deref {shared.shared_master})
	(pop-scope)
	(return)

(vp-label 'pipe_output)
	;inputs
	;r0 = shared
	;r1 = stream
	;outputs
	;r0 = -1 if EOF

	(ptr 'shared 'stream)
	(long 'char)
	(ulong 'ready)

	(push-scope)
	(assign '(r0 r1) {shared, stream})

	(loop-start)
		(f-call 'stream 'read_char {stream} {char})
		(breakif {char == -1})
		(l-call 'terminal_output {shared, char} '(r0 r1))
		(v-call 'stream 'read_ready {stream} {ready})
	(loop-untilnot {ready})

	(assign {char} '(r0))
	(pop-scope)
	(return)

(vp-label 'terminal_input)
	;inputs
	;r0 = shared
	;r1 = char input

	(ptr 'shared 'string 'last 'stream)
	(ulong 'length 'notsame)
	(ubyte 'char 'state)

	(push-scope)
	(assign '(r0 r1) {shared, char})

	;echo char to terminal
	(l-call 'terminal_output {shared, char} '(r0 r1))

	;buffer char
	(assign {char} {*shared->shared_bufp})
	(assign {shared->shared_bufp - &shared->shared_buffer} {length})

	;send line ?
	(vpif {char == 10 || char == 13})
		;what state ?
		(f-call 'master 'get_state {shared->shared_master} {state})
		(vpif {state == stream_mail_state_stopped})
			;push new history entry if not same as last entry
			(breakifnot {length})
			(f-call 'string 'create_from_buffer {&shared->shared_buffer, length} {string})
			(d-call 'vector 'get_length {shared->shared_history} {shared->shared_history_index})
			(vpifnot {shared -> shared_history_index})
			(vp-label 'new_entry)
				(f-call 'vector 'push_back {shared->shared_history, string})
				(assign {shared->shared_history_index + 1} {shared->shared_history_index})
			(else)
				(f-call 'vector 'ref_back {shared->shared_history} {last})
				(f-call 'string 'compare {string, last} {notsame})
				(f-call 'string 'deref {last})
				(gotoif {notsame} 'new_entry)
				(f-call 'string 'deref {string})
			(endif)

			;start new pipe
			(f-call 'master 'start {shared->shared_master, &shared->shared_buffer, length})
		(else)
			;feed active pipe
			(f-call 'master 'get_input {shared->shared_master} {stream})
			(f-call 'stream 'write {stream, &shared->shared_buffer, length})
			(f-call 'stream 'write_char {stream, 10})
			(v-call 'stream 'write_flush {stream})
		(endif)
		(assign {&shared->shared_buffer} {shared->shared_bufp})
	(elseif {char == 128})
		;backspace
		(vpif {length})
			(assign {shared->shared_bufp - 1} {shared->shared_bufp})
		(endif)
	(elseif {char == 129})
		;cursor up
		(d-call 'vector 'get_length {shared->shared_history} {length})
		(breakifnot {length})
		(vpif {shared->shared_history_index})
			(assign {shared->shared_history_index - 1} {shared->shared_history_index})
		(endif)
		(d-call 'vector 'ref_element {shared->shared_history, shared->shared_history_index} {string})
		(f-call 'sys_mem 'copy {&string->string_data, &shared->shared_buffer, string->string_length} {_, shared->shared_bufp})
		(f-call 'stream 'create {string, 0, &string->string_data, string->string_length} {stream})
		(l-call 'pipe_output {shared, stream} '(r0 r1))
	(elseif {char == 130})
		;cursor down
		(d-call 'vector 'get_length {shared->shared_history} {length})
		(assign {shared->shared_history_index + 1} {shared->shared_history_index})
		(vpif {shared->shared_history_index > length})
			(assign {length} {shared->shared_history_index})
		(endif)
		(vpif {shared->shared_history_index == length})
			(f-call 'string 'create_from_cstr {""} {string})
		(else)
			(d-call 'vector 'ref_element {shared->shared_history, shared->shared_history_index} {string})
		(endif)
		(f-call 'sys_mem 'copy {&string->string_data, &shared->shared_buffer, string->string_length} {_, shared->shared_bufp})
		(f-call 'stream 'create {string, 0, &string->string_data, string->string_length} {stream})
		(l-call 'pipe_output {shared, stream} '(r0 r1))
	(elseif {char == 27})
		;esc
		(f-call 'master 'get_state {shared->shared_master} {state})
		(vpif {state == stream_mail_state_started})
			;feed active pipe, then EOF
			(f-call 'master 'get_input {shared->shared_master} {stream})
			(f-call 'stream 'write {stream, &shared->shared_buffer, length})
			(v-call 'stream 'write_flush {stream})
			(assign {&shared->shared_buffer} {shared->shared_bufp})

			;send stopping
			(f-call 'stream_msg_out 'set_state {stream, stream_mail_state_stopping})
			(v-call 'stream 'write_next {stream})
			(v-call 'stream 'write_flush {stream})
		(endif)
	(elseif {char >= 32 && char < 127})
		;next char
		(assign {shared->shared_bufp + 1} {shared->shared_bufp})
	(endif)
	(pop-scope)
	(return)

(vp-label 'terminal_output)
	;inputs
	;r0 = shared
	;r1 = char output

	(ptr 'shared)
	(ulong 'char)

	(push-scope)
	(assign '(r0 r1) {shared, char})

	(f-call 'sys_io 'char {char, 1})

	(pop-scope)
	(return)

(def-func-end)

(def-func 'apps/terminal/tui_child)
	;stdin polling task

	(ptr 'msg)
	(struct 'tui_id 'id)
	(ulong 'char)

	(push-scope)

	(debug-str "tui_child 1")

	;read tui mailbox id
;	(f-call 'sys_mail 'mymail {} {msg})
;	(assign {msg->tui_msg_reply_id.id_mbox} {tui_id.id_mbox})
;	(assign {msg->tui_msg_reply_id.id_cpu} {tui_id.id_cpu})
;	(f-call 'sys_mem 'free {msg})

	;poll stdin and send char to tui
	(loop-start)
;		(sys-read-char 0)
;		(assign '(r0) {char})
;		(f-call 'sys_mail 'alloc {} {msg})
;		(assign {tui_id.id_mbox} {msg->msg_dest.id_mbox})
;		(assign {tui_id.id_cpu} {msg->msg_dest.id_cpu})
;		(f-call 'sys_mail 'send {msg})
		(f-call 'sys_task 'yield)
	(loop-end)

	(pop-scope)
	(return)

(def-func-end)
