(import 'sys/func.inc)
(import 'class/pipe/pipe.inc)
(import 'class/msg_in/msg_in.inc)
(import 'class/msg_out/msg_out.inc)
(import 'class/string/string.inc)

(def-struct 'tui_msg)
	(struct 'reply_id 'id)
(def-struct-end)

(def-struct 'stdin_msg)
	(ulong 'char)
(def-struct-end)

(def-func 'apps/terminal/tui)

	(defcvar 'buf_size 256)

	(def-struct 'local)
		(ptr 'pipe)
		(pubyte 'bufp)
		(struct 'buffer buf_size)
	(def-struct-end)

	(struct 'local 'local)
	(struct 'stdin_id 'id)
	(struct 'tui_id 'id)
	(ptr 'msg 'data 'mailbox)
	(long 'state)

	;init app vars
	(push-scope)
	(assign {&local.local_buffer} {local.local_bufp})
	(f-call 'sys_task 'mailbox {} {tui_id.id_mbox, tui_id.id_cpu})
	(assign {0} {local.local_pipe})

	;start stdin polling task and send it tui mailbox id
	(f-call 'sys_task 'start {@apps/terminal/tui_child} {_, stdin_id.id_mbox, stdin_id.id_cpu})
	(f-call 'sys_mail 'alloc {tui_msg_size} {msg, data})
	(assign {stdin_id.id_mbox} {msg->msg_dest.id_mbox})
	(assign {stdin_id.id_cpu} {msg->msg_dest.id_cpu})
	(assign {tui_id.id_mbox} {data->tui_msg_reply_id.id_mbox})
	(assign {tui_id.id_cpu} {data->tui_msg_reply_id.id_cpu})
	(f-call 'sys_mail 'send {msg})

	;sign on
	(l-call 'terminal_output_cstr {"ChrysaLisp Terminal 1.3"})
	(l-call 'terminal_output_char {char_lf})

	;app event loop
	(loop-start)
		(vpif {local.local_pipe})
			;select on multiple mailboxes
			(f-call 'pipe 'select {local.local_pipe, tui_id.id_mbox} {_, mailbox})

			;which mailbox has mail ?
			(gotoif {mailbox == tui_id.id_mbox} 'from_mymailbox)

			;output from a pipe element
			(l-call 'pipe_output {&local, mailbox - msg_in_mailbox} {state})
			(vpif {state == -1})
				;EOF
				(f-call 'pipe 'deref {local.local_pipe})
				(assign {0} {local.local_pipe})
			(endif)
		(else)
		(vp-label 'from_mymailbox)
			;dispatch event to terminal
			(f-call 'sys_mail 'read {tui_id.id_mbox} {msg, data})
			(l-call 'terminal_input {&local, data->stdin_msg_char})
			(f-call 'sys_mail 'free {msg})
		(endif)
		(f-call 'sys_task 'yield)
	(loop-end)

	;clean up
	(f-call 'pipe 'deref {local.local_pipe})
	(pop-scope)
	(return)

(vp-label 'pipe_output)
	;inputs
	;r0 = local
	;r1 = stream
	;outputs
	;r0 = -1 if EOF

	(ptr 'local 'stream)
	(int 'char 'ready)

	(push-scope)
	(l-entry {local, stream})

	(loop-start)
		(f-call 'stream 'read_char {stream} {_, char})
		(breakif {char == -1})
		(l-call 'terminal_output_char {char})
		(v-call 'stream 'read_ready {stream} {_, ready})
	(loop-untilnot {ready})

	(l-exit {char})
	(pop-scope)
	(return)

(vp-label 'terminal_input)
	;inputs
	;r0 = local
	;r1 = char input

	(ptr 'local 'stream)
	(ulong 'length)
	(int 'char)

	(push-scope)
	(l-entry {local, char})

	;echo char to terminal
;	(l-call 'terminal_output {local, char})

	;buffer char
	(assign {char} {*local->local_bufp})
	(assign {local->local_bufp - &local->local_buffer} {length})

	;send line ?
	(vpif {char == char_lf || char == char_cr})
		;what state ?
		(vpifnot {local->local_pipe})
			;start new pipe
			(breakifnot {length})
			(f-call 'pipe 'create {&local->local_buffer, length} {local->local_pipe})
		(else)
			;feed active pipe
			(f-call 'pipe 'get_input {local->local_pipe} {_, stream})
			(f-call 'stream 'write {stream, &local->local_buffer, length})
			(f-call 'stream 'write_char {stream, char_lf})
			(v-call 'stream 'write_flush {stream})
		(endif)
		(assign {&local->local_buffer} {local->local_bufp})
	(elseif {char == char_esc})
		;esc
		(vpif {local->local_pipe})
			;feed active pipe, then EOF
			(f-call 'pipe 'get_input {local->local_pipe} {_, stream})
			(f-call 'stream 'write {stream, &local->local_buffer, length})
			(v-call 'stream 'write_flush {stream})
			(assign {&local->local_buffer} {local->local_bufp})

			;stop pipe
			(f-call 'pipe 'deref {local->local_pipe})
			(assign {0} {local->local_pipe})
		(endif)
	(elseifnot {char < char_space || char >= 127 || length == buf_size})
		;next char
		(assign {local->local_bufp + 1} {local->local_bufp})
	(endif)
	(pop-scope)
	(return)

(vp-label 'terminal_output_char)
	;inputs
	;r0 = char output

	(int 'char)

	(push-scope)
	(l-entry {char})

	(vpif {char == char_tab})
		;tab
		(f-call 'pii 'write_char {1, char_space})
		(f-call 'pii 'write_char {1, char_space})
		(f-call 'pii 'write_char {1, char_space})
		(f-call 'pii 'write_char {1, char_space})
	(else)
		(f-call 'pii 'write_char {1, char})
	(endif)

	(pop-scope)
	(return)

(vp-label 'terminal_output_cstr)
	;inputs
	;r0 = c string pointer

	(pubyte 'charp)

	;save inputs
	(push-scope)
	(l-entry {charp})

	;print chars
	(loop-while {*charp})
		(l-call 'terminal_output_char {*charp})
		(assign {charp + 1} {charp})
	(loop-end)

	(pop-scope)
	(return)

(def-func-end)

(def-func 'apps/terminal/tui_child)
	;stdin polling task

	(ptr 'msg 'data)
	(struct 'tui_id 'id)
	(int 'char)

	(push-scope)

	;read tui mailbox id
	(f-call 'sys_mail 'mymail {} {msg, data})
	(assign {data->tui_msg_reply_id.id_mbox} {tui_id.id_mbox})
	(assign {data->tui_msg_reply_id.id_cpu} {tui_id.id_cpu})
	(f-call 'sys_mail 'free {msg})

	;non block on stdin
	(f-call 'pii 'fcntl {0, f_getfl, 0} {char})
	(f-call 'pii 'fcntl {0, f_setfl, char | o_nonblock})

	;poll stdin and send char to tui
	(loop-start)
	(vp-label 'nextchar)
		(f-call 'pii 'read_char {0} {char})
		(vpif {char})
			(f-call 'sys_mail 'alloc {stdin_msg_size} {msg, data})
			(assign {tui_id.id_mbox} {msg->msg_dest.id_mbox})
			(assign {tui_id.id_cpu} {msg->msg_dest.id_cpu})
			(assign {char} {data->stdin_msg_char})
			(f-call 'sys_mail 'send {msg})
			(goto 'nextchar)
		(endif)
		(f-call 'sys_task 'sleep {10000})
	(loop-end)

	(pop-scope)
	(return)

(def-func-end)
