(import 'inc/func.inc)
(import 'inc/gui.inc)
(import 'inc/string.inc)
(import 'class/window/window.inc)
(import 'class/button/button.inc)
(import 'class/string/string.inc)
(import 'class/vector/vector.inc)
(import 'class/stream_msg_out/stream_msg_out.inc)
(import 'class/master/master.inc)
(import 'class/vdu/vdu.inc)

(def-func 'apps/terminal/app)

	(def-struct 'local 'obj)
		(ptr 'master 'vdu 'history 'window)
		(ulong 'history_index)
		(pubyte 'bufp)
		(struct 'buffer 120)
		(uint 'closed)
	(def-struct-end)

	(struct 'myapp 'local)
	(ptr 'msg 'stream 'label 'string 'mymailbox 'mailbox)
	(ulong 'owner 'length)
	(long 'state)
	(int 'width 'height)

	;init app vars
	(push-scope)
	(f-call 'sys_mem 'clear {&myapp, local_size})
	(f-call 'obj 'init (cat {&myapp, @} (f-path 'class 'obj)))
	(f-call 'master 'create {} {myapp.local_master})
	(f-call 'vector 'create {} {myapp.local_history})

	;create my window
	(f-call 'window 'create {window_flag_status | window_flag_close} {myapp.local_window})
	(f-call 'string 'create_from_cstr {"Terminal"} {string})
	(f-call 'window 'set_title {myapp.local_window, string})
	(f-call 'string 'create_from_cstr {"Ready"} {string})
	(f-call 'window 'set_status {myapp.local_window, string})
	(f-call 'window 'set_color {myapp.local_window, 0xc0000000})

	;add my vdu
	(f-call 'vdu 'create {} {myapp.local_vdu})
	(f-call 'vdu 'set_text_color {myapp.local_vdu, 0xff00ff00})
	(f-call 'vdu 'set_font {myapp.local_vdu, "fonts/Hack-Regular.ttf", 16})
	(v-call 'window 'add_child {myapp.local_window, myapp.local_vdu})

	;set to pref size
	(v-call 'window 'pref_size {myapp.local_window} {_, width, height})
	(f-call 'window 'change {myapp.local_window, 0, 0, width, height})

	;set window owner
	(f-call 'sys_task 'tcb {} {owner})
	(f-call 'window 'set_owner {myapp.local_window, owner})

	;set close action
	(f-call 'window 'connect_close {myapp.local_window, &myapp, $on_window_close})

	;add to screen and dirty
	(f-call 'gui_gui 'add {myapp.local_window})
	(f-call 'window 'dirty_all {myapp.local_window})

	;set up term buffer
	(assign {&myapp.local_buffer} {myapp.local_bufp})

	;app event loop
	(f-call 'sys_task 'mailbox {} {mymailbox, _})
	(loop-start)
		;select on multiple mailboxes
		(f-call 'master 'select {myapp.local_master, mymailbox} {_, mailbox})

		;which mailbox has mail ?
		(vpif {mailbox == mymailbox})
			;dispatch event to view and terminal
			(f-call 'sys_mail 'read {mailbox} {msg})
			(v-call 'view 'event {msg->ev_msg_view, msg})
			(vpif {msg->ev_msg_type == ev_type_key && msg->ev_msg_keycode > 0})
				(l-call 'terminal_input {&myapp, msg->ev_msg_key} '(r0 r1))
			(endif)
			(f-call 'sys_mem 'free {msg})
		(else)
			;output from a pipe element
			(f-call 'master 'get_stream {myapp.local_master, mailbox} {_, stream})
			(l-call 'pipe_output {&myapp, stream} '(r0 r1) '(r0) {state})
			(vpif {state == -1})
				;EOF
				(f-call 'master 'stop {myapp.local_master})
				(f-call 'string 'create_from_cstr {"Ready"} {string})
				(f-call 'window 'set_status {myapp.local_window, string})
			(endif)
		(endif)
		(f-call 'sys_task 'yield)
	(loop-until {myapp.local_closed})

	;clean up
	(f-call 'vector 'deref {myapp.local_history})
	(f-call 'master 'deref {myapp.local_master})
	(f-call 'window 'deref {myapp.local_window})
	(v-call 'obj 'deinit {&myapp})
	(pop-scope)
	(return)

(vp-label 'on_window_close)
	;inputs
	;r0 = app local object
	;r1 = close object

	(ptr 'this)

	(push-scope)
	(assign '(r0) {this})
	(assign {1} {this->local_closed})
	(pop-scope)
	(return)

(vp-label 'pipe_output)
	;inputs
	;r0 = local
	;r1 = stream
	;outputs
	;r0 = -1 if EOF

	(ptr 'local 'stream)
	(long 'char)
	(ulong 'ready)

	(push-scope)
	(assign '(r0 r1) {local, stream})

	(loop-start)
		(f-call 'stream 'read_char {stream} {_, char})
		(breakif {char == -1})
		(l-call 'terminal_output {local, char} '(r0 r1))
		(v-call 'stream 'read_ready {stream} {_, ready})
	(loop-untilnot {ready})

	(assign {char} '(r0))
	(pop-scope)
	(return)

(vp-label 'terminal_input)
	;inputs
	;r0 = local
	;r1 = char input

	(ptr 'local 'string 'last 'stream)
	(ulong 'length 'notsame)
	(uint 'char 'state)

	(push-scope)
	(assign '(r0 r1) {local, char})

	;echo char to terminal
	(l-call 'terminal_output {local, char} '(r0 r1))

	;buffer char
	(assign {char} {*local->local_bufp})
	(assign {local->local_bufp - &local->local_buffer} {length})

	;send line ?
	(vpif {char == 10 || char == 13})
		;what state ?
		(f-call 'master 'get_state {local->local_master} {_, state})
		(vpif {state == stream_mail_state_stopped})
			;push new history entry if not same as last entry
			(breakifnot {length})
			(f-call 'string 'create_from_buffer {&local->local_buffer, length} {string})
			(d-call 'vector 'get_length {local->local_history} {_, local->local_history_index})
			(vpifnot {local->local_history_index})
			(vp-label 'new_entry)
				(f-call 'vector 'push_back {local->local_history, string})
				(assign {local->local_history_index + 1} {local->local_history_index})
			(else)
				(f-call 'vector 'ref_back {local->local_history} {_, last})
				(f-call 'string 'same {string, last} {_, notsame})
				(f-call 'string 'deref {last})
				(gotoif {notsame} 'new_entry)
				(f-call 'string 'deref {string})
			(endif)

			;start new pipe
			(f-call 'master 'start {local->local_master, &local->local_buffer, length})
			(f-call 'master 'get_state {local->local_master} {_, state})
			(breakif {state != stream_mail_state_started})
			(f-call 'string 'create_from_cstr {"Busy"} {string})
			(f-call 'window 'set_status {local->local_window, string})
		(else)
			;feed active pipe
			(f-call 'master 'get_input {local->local_master} {_, stream})
			(f-call 'stream 'write {stream, &local->local_buffer, length})
			(f-call 'stream 'write_char {stream, 10})
			(v-call 'stream 'write_flush {stream})
		(endif)
		(assign {&local->local_buffer} {local->local_bufp})
	(elseif {char == 128})
		;backspace
		(vpif {length})
			(assign {local->local_bufp - 1} {local->local_bufp})
		(endif)
	(elseif {char == 129})
		;cursor up
		(f-call 'master 'get_state {local->local_master} {_, state})
		(vpif {state == stream_mail_state_stopped})
			(d-call 'vector 'get_length {local->local_history} {_, length})
			(breakifnot {length})
			(vpif {local->local_history_index})
				(assign {local->local_history_index - 1} {local->local_history_index})
			(endif)
			(d-call 'vector 'ref_element {local->local_history, local->local_history_index} {_, string})
			(f-call 'sys_mem 'copy {&string->string_data, &local->local_buffer, string->string_length} {_, local->local_bufp})
			(f-call 'stream 'create {string, 0, &string->string_data, string->string_length} {stream})
			(l-call 'pipe_output {local, stream} '(r0 r1))
			(f-call 'stream 'deref {stream})
		(endif)
	(elseif {char == 130})
		;cursor down
		(f-call 'master 'get_state {local->local_master} {_, state})
		(vpif {state == stream_mail_state_stopped})
			(d-call 'vector 'get_length {local->local_history} {_, length})
			(assign {local->local_history_index + 1} {local->local_history_index})
			(vpif {local->local_history_index > length})
				(assign {length} {local->local_history_index})
			(endif)
			(vpif {local->local_history_index == length})
				(f-call 'string 'create_from_cstr {""} {string})
			(else)
				(d-call 'vector 'ref_element {local->local_history, local->local_history_index} {_, string})
			(endif)
			(f-call 'sys_mem 'copy {&string->string_data, &local->local_buffer, string->string_length} {_, local->local_bufp})
			(f-call 'stream 'create {string, 0, &string->string_data, string->string_length} {stream})
			(l-call 'pipe_output {local, stream} '(r0 r1))
			(f-call 'stream 'deref {stream})
		(endif)
	(elseif {char == 27})
		;esc
		(f-call 'master 'get_state {local->local_master} {_, state})
		(vpif {state == stream_mail_state_started})
			;feed active pipe, then EOF
			(f-call 'master 'get_input {local->local_master} {_, stream})
			(f-call 'stream 'write {stream, &local->local_buffer, length})
			(v-call 'stream 'write_flush {stream})
			(assign {&local->local_buffer} {local->local_bufp})

			;send stopping
			(f-call 'stream_msg_out 'set_state {stream, stream_mail_state_stopping})
			(v-call 'stream 'write_next {stream})
			(v-call 'stream 'write_flush {stream})
		(endif)
	(elseif {char >= 32 && char < 127})
		;next char
		(assign {local->local_bufp + 1} {local->local_bufp})
	(endif)
	(pop-scope)
	(return)

(vp-label 'terminal_output)
	;inputs
	;r0 = local
	;r1 = char output

	(ptr 'local 'label 'string 'line_string 'new_line_string)
	(ulong 'length 'char)

	(push-scope)
	(assign '(r0 r1) {local, char})
	(vpif {char == 13})
		(assign {10} {char})
	(endif)
	(vpif {char == 129 || char == 130})
		;cursor up/down
		(f-call 'vdu 'print_char {local->local_vdu, 129})
	(else)
		;print char
		(f-call 'vdu 'print_char {local->local_vdu, char})
	(endif)
	(pop-scope)
	(return)

(def-func-end)
