(import 'inc/func.inc)
(import 'inc/gui.inc)
(import 'inc/string.inc)
(import 'class/class_window.inc)
(import 'class/class_flow.inc)
(import 'class/class_label.inc)
(import 'class/class_string.inc)
(import 'class/class_vector.inc)
(import 'class/class_stream_msg_out.inc)
(import 'class/class_master.inc)

(def-func 'apps/terminal/app)

(equate 'buffer_size 120)

	(def-struct 'shared)
		(ptr 'shared_master 'shared_panel 'shared_history 'shared_window)
		(ulong 'shared_history_index)
		(pubyte 'shared_bufp)
		(struct 'shared_buffer 'buffer)
	(def-struct-end)

	(struct 'myapp 'obj)
	(struct 'shared 'shared)
	(struct 'buffer 'buffer)
	(ptr 'msg 'stream 'window_panel 'label 'string 'mymailbox 'mailbox)
	(ulong 'owner 'length)
	(long 'state)
	(int 'width 'height)

	;init app vars
	(push-scope)
	(func-path 'class 'obj)
	(func-call 'obj 'init '(& myapp, @ _function_) '(_))
	(func-call 'master 'create '() '(shared . shared_master))
	(func-call 'vector 'create '() '(shared . shared_history))
	(assign '(0) '(shared . shared_history_index))

	;create my window
	(func-call 'window 'create '() '(shared . shared_window))
	(func-call 'window 'get_panel '(shared . shared_window) '(window_panel))
	(func-call 'string 'create_from_cstr '("Terminal") '(string))
	(func-call 'window 'set_title '(shared . shared_window, string))
	(func-call 'string 'create_from_cstr '("Ready") '(string))
	(func-call 'window 'set_status '(shared . shared_window, string))

	;add my app panel
	(func-call 'flow 'create '() '(shared . shared_panel))
	(func-call 'flow 'set_flow_flags '(shared . shared_panel, flow_flag_down | flow_flag_fillw))
	(func-call 'flow 'add_back '(shared . shared_panel, window_panel))

	;add term lines to my app panel
	(assign '(40) '(length))
	(loop-while '((length)))
		(assign '(length - 1) '(length))
		(func-call 'label 'create '() '(label))
		(func-call 'string 'create_from_cstr '(">") '(string))
		(func-call 'label 'set_text '(label, string))
		(func-call 'label 'set_color '(label, 0xff000000))
		(func-call 'label 'set_text_color '(label, 0xff00ff00))
		(func-call 'label 'set_font '(label, "fonts/Hack-Regular.ttf", 16))
		(func-call 'label 'add_back '(label, shared . shared_panel))
	(loop-end)

	;set to pref size
	(virt-call 'window 'pref_size '(shared . shared_window) '(width, height))
	(func-call 'window 'change '(shared . shared_window, 0, 0, 640, height))

	;set window owner
	(func-call 'sys_task 'tcb '() '(owner))
	(func-call 'window 'set_owner '(shared . shared_window, owner))

	;add to screen and dirty
	(func-call 'gui_gui 'add '(shared . shared_window))
	(func-call 'window 'dirty_all '(shared . shared_window))

	;set up term buffer
	(assign '(& shared . shared_buffer) '(shared . shared_bufp))

	;app event loop
	(func-call 'sys_task 'mailbox '() '(mymailbox, _))
	(loop-start)
		;select on multiple mailboxes
		(func-call 'master 'select '(shared . shared_master, mymailbox) '(mailbox))

		;which mailbox has mail ?
		(vpif '((mailbox == mymailbox)))
			;dispatch event to view and terminal
			(func-call 'sys_mail 'read '(mailbox) '(msg))
			(virt-call 'view 'event '(msg -> ev_msg_view, msg))
			(vpif '((msg -> ev_msg_type == ev_type_key && msg -> ev_msg_keycode > 0)))
				(local-call 'terminal_input '(& shared, msg -> ev_msg_key) '(r0, r1))
			(endif)
			(func-call 'sys_mem 'free '(msg))
		(else)
			;output from a pipe element
			(func-call 'master 'get_stream '(shared . shared_master, mailbox) '(stream))
			(local-call 'pipe_output '(& shared, stream) '(r0, r1) '(r0) '(state))
			(vpif '((state == -1)))
				;EOF
				(func-call 'master 'stop '(shared . shared_master))
				(func-call 'string 'create_from_cstr '("Ready") '(string))
				(func-call 'window 'set_status '(shared . shared_window, string))
			(endif)
		(endif)
		(func-call 'sys_task 'yield)
	(loop-end)

	;clean up
	(func-call 'vector 'deref '(shared . shared_history))
	(func-call 'master 'deref '(shared . shared_master))
	(func-call 'window 'deref '(shared . shared_window))
	(virt-call 'obj 'deinit '(& myapp))
	(pop-scope)
	(return)

(vp-label 'pipe_output)
	;inputs
	;r0 = shared
	;r1 = stream
	;outputs
	;r0 = -1 if EOF

	(ptr 'shared 'stream)
	(long 'char)
	(ulong 'ready)

	(push-scope)
	(retire '(r0, r1) '(shared, stream))

	(loop-start)
		(func-call 'stream 'read_char '(stream) '(char))
		(breakif '((char == -1)))
		(local-call 'terminal_output '(shared, char) '(r0, r1))
		(virt-call 'stream 'read_ready '(stream) '(ready))
	(loop-untilnot '((ready)))

	(expr '(char) '(r0))
	(pop-scope)
	(return)

(vp-label 'terminal_input)
	;inputs
	;r0 = shared
	;r1 = char input

	(ptr 'shared 'string 'last 'stream)
	(ulong 'length 'notsame)
	(ubyte 'char 'state)

	(push-scope)
	(retire '(r0, r1) '(shared, char))

	;echo char to terminal
	(local-call 'terminal_output '(shared, char) '(r0, r1))

	;buffer char
	(assign '(char) '(* shared -> shared_bufp))
	(assign '(shared -> shared_bufp - & shared -> shared_buffer) '(length))

	;send line ?
	(vpif '((char == 10 || char == 13)))
		;what state ?
		(func-call 'master 'get_state '(shared -> shared_master) '(state))
		(vpif '((state == stream_mail_state_stopped)))
			;push new history entry if not same as last entry
			(breakifnot '(length))
			(func-call 'string 'create_from_buffer '(& shared -> shared_buffer, length) '(string))
			(devirt-call 'vector 'get_length '(shared -> shared_history) '(shared -> shared_history_index))
			(vpifnot '(shared -> shared_history_index))
			(vp-label 'new_entry)
				(func-call 'vector 'push_back '(shared -> shared_history, string))
				(assign '(shared -> shared_history_index + 1) '(shared -> shared_history_index))
			(else)
				(func-call 'vector 'ref_back '(shared -> shared_history) '(last))
				(func-call 'string 'compare '(string, last) '(notsame))
				(func-call 'string 'deref '(last))
				(gotoif '((notsame)) 'new_entry)
				(func-call 'string 'deref '(string))
			(endif)

			;start new pipe
			(func-call 'master 'start '(shared -> shared_master, & shared -> shared_buffer, length))
			(func-call 'master 'get_state '(shared -> shared_master) '(state))
			(breakif '((state != stream_mail_state_started)))
			(func-call 'string 'create_from_cstr '("Busy") '(string))
			(func-call 'window 'set_status '(shared -> shared_window, string))
		(else)
			;feed active pipe
			(func-call 'master 'get_input '(shared -> shared_master) '(stream))
			(func-call 'stream 'write '(stream, & shared -> shared_buffer, length))
			(func-call 'stream 'write_char '(stream, 10))
			(virt-call 'stream 'write_flush '(stream))
		(endif)
		(assign '(& shared -> shared_buffer) '(shared -> shared_bufp))
	(vpelseif '((char == 128)))
		;backspace
		(vpif '((length)))
			(assign '(shared -> shared_bufp - 1) '(shared -> shared_bufp))
		(endif)
	(vpelseif '((char == 129)))
		;cursor up
		(devirt-call 'vector 'get_length '(shared -> shared_history) '(length))
		(breakifnot '(length))
		(vpif '((shared -> shared_history_index)))
			(assign '(shared -> shared_history_index - 1) '(shared -> shared_history_index))
		(endif)
		(devirt-call 'vector 'ref_element '(shared -> shared_history, shared -> shared_history_index) '(string))
		(func-call 'sys_mem 'copy '(& string -> string_data, & shared -> shared_buffer, string -> string_length) '(_, shared -> shared_bufp))
		(func-call 'stream 'create '(string, 0, & string -> string_data, string -> string_length) '(stream))
		(local-call 'pipe_output '(shared, stream) '(r0, r1))
	(vpelseif '((char == 130)))
		;cursor down
		(devirt-call 'vector 'get_length '(shared -> shared_history) '(length))
		(assign '(shared -> shared_history_index + 1) '(shared -> shared_history_index))
		(vpif '((shared -> shared_history_index > length)))
			(assign '(length) '(shared -> shared_history_index))
		(endif)
		(vpif '((shared -> shared_history_index == length)))
			(func-call 'string 'create_from_cstr '("") '(string))
		(else)
			(devirt-call 'vector 'ref_element '(shared -> shared_history, shared -> shared_history_index) '(string))
		(endif)
		(func-call 'sys_mem 'copy '(& string -> string_data, & shared -> shared_buffer, string -> string_length) '(_, shared -> shared_bufp))
		(func-call 'stream 'create '(string, 0, & string -> string_data, string -> string_length) '(stream))
		(local-call 'pipe_output '(shared, stream) '(r0, r1))
	(vpelseif '((char == 27)))
		;esc
		(func-call 'master 'get_state '(shared -> shared_master) '(state))
		(vpif '((state == stream_mail_state_started)))
			;feed active pipe, then EOF
			(func-call 'master 'get_input '(shared -> shared_master) '(stream))
			(func-call 'stream 'write '(stream, & shared -> shared_buffer, length))
			(virt-call 'stream 'write_flush '(stream))
			(assign '(& shared -> shared_buffer) '(shared -> shared_bufp))

			;send stopping
			(func-call 'stream_msg_out 'set_state '(stream, stream_mail_state_stopping))
			(virt-call 'stream 'write_next '(stream))
			(virt-call 'stream 'write_flush '(stream))
		(endif)
	(vpelseif '((char >= 32 && char < 127)))
		;next char
		(assign '(shared -> shared_bufp + 1) '(shared -> shared_bufp))
	(endif)
	(pop-scope)
	(return)

(vp-label 'terminal_output)
	;inputs
	;r0 = shared
	;r1 = char output

	(ptr 'shared 'label 'string 'line_string 'new_line_string)
	(ulong 'length 'char)

	(push-scope)
	(retire '(r0, r1) '(shared, char))
	(vpif '((char == 10 || char == 13)))
		;scroll lines
		(func-call 'flow 'get_first '(shared -> shared_panel) '(label))
		(func-call 'label 'add_back '(label, shared -> shared_panel))
		(virt-call 'flow 'layout '(shared -> shared_panel))
		(func-call 'string 'create_from_cstr '(">") '(string))
		(func-call 'label 'set_text '(label, string))
		(func-call 'flow 'dirty_all '(shared -> shared_panel))
	(vpelseif '((char == 128)))
		;backspace
		(func-call 'flow 'get_last '(shared -> shared_panel) '(label))
		(func-call 'label 'get_text '(label) '(line_string))
		(devirt-call 'string 'get_length '(line_string) '(length))
		(vpif '((length > 1)))
			(assign '(length - 1) '(length))
		(endif)
		(func-call 'string 'create_from_buffer '(& line_string -> string_data, length) '(new_line_string))
		(func-call 'string 'deref '(line_string))
		(func-call 'label 'set_text '(label, new_line_string))
		(func-call 'label 'dirty '(label))
	(vpelseif '((char == 129 || char == 130)))
		;cursor up/down
		(func-call 'flow 'get_last '(shared -> shared_panel) '(label))
		(func-call 'string 'create_from_cstr '(">") '(string))
		(func-call 'label 'set_text '(label, string))
		(func-call 'label 'dirty '(label))
	(vpelseif '((char >= 32 && char < 127)))
		;append char
		(func-call 'flow 'get_last '(shared -> shared_panel) '(label))
		(func-call 'string 'create_from_cstr '(& char) '(string))
		(func-call 'label 'get_text '(label) '(line_string))
		(func-call 'string 'append '(line_string, string) '(new_line_string))
		(func-call 'string 'deref '(line_string))
		(func-call 'string 'deref '(string))
		(func-call 'label 'set_text '(label, new_line_string))
		(func-call 'label 'dirty '(label))
	(endif)
	(pop-scope)
	(return)

(def-func-end)
