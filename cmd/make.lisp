;import settings
(run 'apps/cmd.lisp)
(run 'cmd/asm.inc)

(defun make-doc ()
	(defun trimmed (_)
		(sym (trim-start (trim-end _ ")") "'")))
	(print "Scanning source files...")
	(defq *imports* (list 'make.inc) classes (list) functions (list) docs (list) state 'x)
	(each-mergeable (lambda (_)
		(each-line _ (lambda (_)
			(when (eql state 'y)
				(defq s (trim-start (trim-start _ " ") (char 9)))
				(if (and (ge (length s) 1) (eql (elem 0 s) ";"))
					(push (elem -2 docs) (slice 1 -1 s))
					(setq state 'x)))
			(when (and (eql state 'x) (ge (length _) 10) (eql "(" (elem 0 _)))
				(defq s (split _ " ") _ (elem 0 s))
				(cond
					((eql _ "(import")
						(insert-sym *imports* (trimmed (elem 1 s))))
					((eql _ "(def-class")
						(push classes (list (trimmed (elem 1 s))
							(if (eq 3 (length s)) (trimmed (elem 2 s)) 'null))))
					((eql _ "(def-method")
						(push (elem -2 classes) (list (trimmed (elem 1 s)) (trimmed (elem 2 s)))))
					((eql _ "(def-func")
						(setq state 'y)
						(push docs (list))
						(push functions (trimmed (elem 1 s))))
					((eql _ "(defcfun")
						(setq state 'y)
						(push docs (list))
						(push functions (trimmed (elem 1 s))))))))) *imports*)
	(sort (lambda (x y)
		(cmp (elem 0 x) (elem 0 y))) classes)
	(defq stream (string-stream (cat "")))
	(write-line stream "# Classes")
	(each (lambda ((class super &rest methods))
		(write-line stream (cat "## " class))
		(write-line stream (cat "Super Class: " super))
		(each (lambda ((method function))
			(write-line stream (cat "### " class "::" method " -> " function))
			(when (and (defq i (find function functions))
					(ne 0 (length (elem i docs))))
				(write-line stream "```")
				(each (lambda (_)
					(write-line stream _)) (elem i docs))
				(write-line stream "```"))) methods)) classes)
	(save (str stream) 'doc/CLASSES.md)
	(print "-> doc/CLASSES.md"))

;initialize pipe details and command args, abort on error
(when (defq slave (create-slave))
	(defq args (map sym (slot get_args slave)) all (find 'all args)
		boot (find 'boot args) platforms (find 'platforms args) doc (find 'doc args))
	(cond
		((and boot all platforms) (remake-all-platforms))
		((and boot all) (remake-all))
		((and boot platforms) (remake-platforms))
		((and all platforms) (make-all-platforms))
		(all (make-all))
		(platforms (make-platforms))
		(boot (remake))
		(doc (make-doc))
		(t (make))))
