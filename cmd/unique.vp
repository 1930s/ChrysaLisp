(import 'inc/func.inc)
(import 'class/string/string.inc)
(import 'class/stream/stream.inc)
(import 'class/vector/vector.inc)
(import 'class/slave/slave.inc)
(import 'class/unordered_set/unordered_set.inc)

(def-func 'cmd/unique)

	(defcvar 'buffer_size 256)

	(ptr 'slave 'arg 'args 'stream 'set)
	(uint 'argc 'index)
	(int 'length)
	(struct 'buffer 'buffer)

	;init app vars
	(push-scope)

	;initialize pipe details and command args, abort on error
	(f-call 'slave 'create {} {slave})
	(vpif {slave})
		;create string set
		(f-call 'unordered_set 'create (cat {@} (f-path 'string 'same) {, 31}) {set})

		;arg 1 is command name
		(f-call 'slave 'get_args {slave} {_, args})
		(d-call 'vector 'get_length {args} {_, argc})
		(vpif {argc != 1})
			;from command line
			(assign {1} {index})
			(loop-while {index != argc})
				(f-call 'vector 'get_element {args, index} {_, arg})
				(f-call 'unordered_set 'insert {set, arg})
				(assign {index + 1} {index})
			(loop-end)
		(else)
			;from stdin
			(loop-start)
				(f-call 'stream 'read_line {slave->slave_stdin, &buffer, buffer_size} {_, length})
				(breakif {length == -1})
				(f-call 'string 'create_from_buffer {&buffer, length} {arg})
				(f-call 'unordered_set 'insert {set, arg})
				(f-call 'string 'deref {arg})
			(loop-end)
		(endif)

		;output string set
		(f-call 'unordered_set 'for_each {set, $callback, slave})
		(f-call 'unordered_set 'deref {set})

		;clean up
		(f-call 'slave 'deref {slave})
	(endif)
	(pop-scope)
	(return)

(vp-label 'callback)
	;inputs
	;r0 = predicate data pointer
	;r1 = element iterator
	;outputs
	;r1 = 0 if break, else not

	(pptr 'iter)
	(ptr 'pdata)

	(push-scope)
	(f-entry 'vector 'callback {pdata, iter})

	(f-call 'stream 'write {pdata->slave_stdout, &(*iter)->string_data, (*iter)->string_length})
	(f-call 'stream 'write_char {pdata->slave_stdout, char_lf})

	(f-exit 'vector 'callback '(-1))
	(pop-scope)
	(return)

(def-func-end)
