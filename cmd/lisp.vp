(import 'inc/func.inc)
(import 'class/class_slave.inc)
(import 'class/class_vector.inc)
(import 'class/class_stream.inc)
(import 'class/class_stream_str.inc)
(import 'class/class_string.inc)
(import 'class/class_lisp.inc)

(def-func 'cmd/lisp (mul 1024 8))

	(ptr 'slave 'lisp 'args 'arg 'stream 'file 'repl_args 'value)
	(ushort 'argc 'index)
	(ulong 'length)

	(const 'char_lf 10)

	;init app vars
	(push-scope)

	;initialize pipe details and command args, abort on error
	(f-call 'slave 'create {} {slave})
	(vpif {slave})
		;create lisp class and repl args
		(f-call 'lisp 'create {slave->slave_stdin, slave->slave_stdout, slave->slave_stderr} {lisp})
		(f-call 'vector 'create {} {repl_args})

		;run any lisp.lisp
		(f-call 'string 'create_from_file {"cmd/lisp.lisp"} {file})
		(vpif {file})
			;REPL from file stream
			(f-call 'stream_str 'create {file} {stream})
			(f-call 'vector 'push_back {repl_args, stream})
			(f-call 'lisp 'func_repl {lisp, repl_args} {value})
			(vpif {value->obj_vtable == @class/class_error})
				(f-call 'lisp 'repl_print {lisp, lisp->lisp_stderr, value})
				(f-call 'stream 'write_char {lisp->lisp_stderr, char_lf})
				(v-call 'stream 'write_flush {lisp->lisp_stderr})
			(endif)
			(f-call 'ref 'deref {value})
			(f-call 'vector 'clear {repl_args})
		(endif)

		;run any files given as args
		(f-call 'slave 'get_args {slave} {args})
		(d-call 'vector 'get_length {args} {argc})
		(assign {1} {index})
		(loop-while {index != argc})
			(f-call 'stream 'write_cstr {slave->slave_stdout, "Press Esc/Enter to exit lisp"})
			(f-call 'stream 'write_char {slave->slave_stdout, char_lf})

			(f-call 'vector 'get_element {args, index} {arg})
			(f-call 'string 'create_from_file {&arg->string_data} {file})
			(vpif {file})
				;REPL from file stream
				(f-call 'stream_str 'create {file} {stream})
				(f-call 'vector 'push_back {repl_args, stream})
				(f-call 'lisp 'func_repl {lisp, repl_args} {value})
				(vpif {value->obj_vtable == @class/class_error})
					(f-call 'lisp 'repl_print {lisp, lisp->lisp_stderr, value})
					(f-call 'stream 'write_char {lisp->lisp_stderr, char_lf})
					(v-call 'stream 'write_flush {lisp->lisp_stderr})
				(endif)
				(f-call 'ref 'deref {value})
				(f-call 'vector 'clear {repl_args})
			(endif)
			(assign {index + 1} {index})
		(loop-end)

		;REPL from stdin
		(f-call 'ref 'ref {lisp->lisp_stdin})
		(f-call 'vector 'push_back {repl_args, lisp->lisp_stdin})
		(loop-start)
			(f-call 'lisp 'func_repl {lisp, repl_args} {value})
			(breakif {value->obj_vtable != @class/class_error})
			(v-call 'stream 'write_flush {lisp->lisp_stdout})
			(v-call 'stream 'write_flush {lisp->lisp_stderr})
			(loop-start)
				(f-call 'stream 'available {lisp->lisp_stdin} {length})
				(breakifnot {length})
				(f-call 'stream 'read_char {lisp->lisp_stdin} {length})
			(loop-end)
			(f-call 'ref 'deref {value})
		(loop-end)
		(f-call 'ref 'deref {value})

		;clean up
		(f-call 'vector 'deref {repl_args})
		(f-call 'lisp 'deref {lisp})
		(f-call 'slave 'deref {slave})
	(endif)

	(pop-scope)
	(return)

(def-func-end)
