(import 'sys/func.inc)
(import 'class/slave/slave.inc)
(import 'class/vector/vector.inc)
(import 'class/stream/stream.inc)
(import 'class/stream_str/stream_str.inc)
(import 'class/symbol/symbol.inc)
(import 'class/lisp/lisp.inc)

(def-func 'cmd/lisp 8192)

	(ptr 'slave 'lisp 'args 'repl_args 'value 'script)
	(uint 'argc)
	(union
		'(uint 'index)
		'(int 'length))

	;init app vars
	(push-scope)

	;initialize pipe details and command args, abort on error
	(f-call 'slave 'create {} {slave})
	(vpif {slave})
		;create lisp class and repl args
		(f-call 'lisp 'create {slave->slave_stdin, slave->slave_stdout, slave->slave_stderr} {lisp})
		(f-call 'vector 'create {} {repl_args})

		;run any files given as args else lisp.lisp
		(f-call 'slave 'get_args {slave} {_, args})
		(d-call 'vector 'get_length {args} {_, argc})
		(vpif {argc <= 1})
			;run any lisp.lisp, and print sign on
			(f-call 'string 'create_from_cstr {"cmd/asm.inc"} {script})
			(l-call 'run_file {lisp, repl_args, script})
			(f-call 'string 'deref {script})
			(f-call 'stream 'write_cstr {lisp->lisp_stdout, "ChrysaLisp 1.2"})
			(f-call 'stream 'write_char {lisp->lisp_stdout, char_lf})
			(f-call 'stream 'write_cstr {lisp->lisp_stdout, "Press ESC/Enter to exit."})
			(f-call 'stream 'write_char {lisp->lisp_stdout, char_lf})
			(v-call 'stream 'write_flush {lisp->lisp_stdout})
		(else)
			;run any files given as args
			(assign {1} {index})
			(loop-while {index != argc})
				(f-call 'vector 'get_element {args, index} {_, script})
				(l-call 'run_file {lisp, repl_args, script})
				(assign {index + 1} {index})
			(loop-end)
		(endif)

		;REPL from stdin
		(f-call 'ref 'ref {lisp->lisp_stdin})
		(f-call 'string 'create_from_cstr {"stdin"} {value})
		(f-call 'vector 'push_back {repl_args, lisp->lisp_stdin})
		(f-call 'vector 'push_back {repl_args, value})
		(loop-start)
			(f-call 'lisp 'func_repl {lisp, repl_args} {_, value})
			(breakif (cat {value->obj_vtable != @} (f-path 'class 'error)))
			(v-call 'stream 'write_flush {lisp->lisp_stdout})
			(v-call 'stream 'write_flush {lisp->lisp_stderr})
			(loop-start)
				(f-call 'stream 'available {lisp->lisp_stdin} {_, length})
				(breakifnot {length})
				(f-call 'stream 'read_char {lisp->lisp_stdin} {_, length})
			(loop-end)
			(f-call 'ref 'deref {value})
		(loop-end)
		(f-call 'ref 'deref {value})

		;clean up
		(f-call 'vector 'deref {repl_args})
		(f-call 'lisp 'deref {lisp})
		(f-call 'slave 'deref {slave})
	(endif)

	(pop-scope)
	(return)

(vp-label 'run_file)
	;inputs
	;r0 = lisp object
	;r1 = repl args vector
	;r2 = filename string

	(ptr 'lisp 'repl_args 'name)
	(union
		'(ptr 'stream)
		'(ptr 'file)
		'(ptr 'value))

	(push-scope)
	(l-entry {lisp, repl_args, name})

	(f-call 'string 'create_from_file {&name->string_data} {file})
	(vpif {file})
		;REPL from file stream
		(f-call 'ref 'ref {name})
		(f-call 'stream_str 'create {file} {stream})
		(f-call 'vector 'push_back {repl_args, stream})
		(f-call 'vector 'push_back {repl_args, name})
		(f-call 'lisp 'func_repl {lisp, repl_args} {_, value})
		(vpif (cat {value->obj_vtable == @} (f-path 'class 'error)))
			(f-call 'lisp 'repl_print {lisp, lisp->lisp_stderr, value})
			(f-call 'stream 'write_char {lisp->lisp_stderr, char_lf})
			(v-call 'stream 'write_flush {lisp->lisp_stderr})
		(endif)
		(f-call 'ref 'deref {value})
		(d-call 'vector 'clear {repl_args})
	(endif)

	(pop-scope)
	(return)

(def-func-end)
