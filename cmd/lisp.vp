(import 'inc/func.inc)
(import 'class/class_slave.inc)
(import 'class/class_vector.inc)
(import 'class/class_stream.inc)
(import 'class/class_stream_str.inc)
(import 'class/class_string.inc)
(import 'class/class_lisp.inc)

(def-func 'cmd/lisp (mul 1024 8))

	(ptr 'slave 'lisp 'args 'arg 'stream 'file 'repl_args 'value)
	(ushort 'argc 'index)

	;init app vars
	(push-scope)

	;initialize pipe details and command args, abort on error
	(func-call 'slave 'create {} {slave})
	(vpif {slave})
		;create lisp class and repl args
		(func-call 'lisp 'create {slave->slave_stdin, slave->slave_stdout, slave->slave_stderr} {lisp})
		(func-call 'vector 'create {} {repl_args})

		;run any lisp.lisp
		(func-call 'string 'create_from_file {"cmd/lisp.lisp"} {file})
		(vpif {file})
			;REPL from file stream
			(func-call 'stream_str 'create {file} {stream})
			(func-call 'vector 'push_back {repl_args, stream})
			(func-call 'lisp 'func_repl {lisp, repl_args} {value})
			(func-call 'ref 'deref {value})
			(func-call 'vector 'clear {repl_args})
		(endif)

		;run any files given as args
		(func-call 'slave 'get_args {slave} {args})
		(devirt-call 'vector 'get_length {args} {argc})
		(assign {1} {index})
		(loop-while {index != argc})
			(func-call 'vector 'get_element {args, index} {arg})
			(func-call 'string 'create_from_file {&arg->string_data} {file})
			(vpif {file})
				;REPL from file stream
				(func-call 'stream_str 'create {file} {stream})
				(func-call 'vector 'push_back {repl_args, stream})
				(func-call 'lisp 'func_repl {lisp, repl_args} {value})
				(func-call 'ref 'deref {value})
				(func-call 'vector 'clear {repl_args})
			(endif)
			(assign {index + 1} {index})
		(loop-end)

		;REPL from stdin
		(func-call 'ref 'ref {lisp->lisp_stdin})
		(func-call 'vector 'push_back {repl_args, lisp->lisp_stdin})
		(func-call 'lisp 'func_repl {lisp, repl_args} {value})
		(func-call 'ref 'deref {value})

		;clean up
		(func-call 'vector 'deref {repl_args})
		(func-call 'lisp 'deref {lisp})
		(func-call 'slave 'deref {slave})
	(endif)

	(pop-scope)
	(return)

(def-func-end)
