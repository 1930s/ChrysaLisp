(import 'sys/func.inc)
(import 'class/slave/slave.inc)
(import 'class/vector/vector.inc)
(import 'class/stream/stream.inc)
(import 'class/stream_str/stream_str.inc)
(import 'class/symbol/symbol.inc)
(import 'class/lisp/lisp.inc)

(def-func 'cmd/lisp 8192)

	(ptr 'slave 'lisp 'args 'arg 'stream 'file 'repl_args 'value)
	(uint 'argc)
	(union
		'(uint 'index)
		'(int 'length))

	;init app vars
	(push-scope)

	;initialize pipe details and command args, abort on error
	(f-call 'slave 'create {} {slave})
	(vpif {slave})
		;create lisp class and repl args
		(f-call 'lisp 'create {slave->slave_stdin, slave->slave_stdout, slave->slave_stderr} {lisp})
		(f-call 'vector 'create {} {repl_args})

		;run any lisp.lisp
		(f-call 'string 'create_from_file {"cmd/lisp.lisp"} {file})
		(vpif {file})
			;REPL from file stream
			(f-call 'stream_str 'create {file} {stream})
			(f-call 'string 'create_from_cstr {"cmd/lisp.lisp"} {file})
			(f-call 'vector 'push_back {repl_args, stream})
			(f-call 'vector 'push_back {repl_args, file})
			(f-call 'lisp 'func_repl {lisp, repl_args} {_, value})
			(vpif (cat {value->obj_vtable == @} (f-path 'class 'error)))
				(f-call 'lisp 'repl_print {lisp, lisp->lisp_stderr, value})
				(f-call 'stream 'write_char {lisp->lisp_stderr, char_lf})
				(v-call 'stream 'write_flush {lisp->lisp_stderr})
			(endif)
			(f-call 'ref 'deref {value})
			(d-call 'vector 'clear {repl_args})
		(endif)

		;run any files given as args
		(f-call 'slave 'get_args {slave} {_, args})
		(d-call 'vector 'get_length {args} {_, argc})
		(assign {1} {index})
		(loop-while {index != argc})
			(f-call 'vector 'get_element {args, index} {_, arg})
			(f-call 'string 'create_from_file {&arg->string_data} {file})
			(vpif {file})
				;REPL from file stream
				(f-call 'ref 'ref {arg})
				(f-call 'stream_str 'create {file} {stream})
				(f-call 'vector 'push_back {repl_args, stream})
				(f-call 'vector 'push_back {repl_args, arg})
				(f-call 'lisp 'func_repl {lisp, repl_args} {_, value})
				(vpif (cat {value->obj_vtable == @} (f-path 'class 'error)))
					(f-call 'lisp 'repl_print {lisp, lisp->lisp_stderr, value})
					(f-call 'stream 'write_char {lisp->lisp_stderr, char_lf})
					(v-call 'stream 'write_flush {lisp->lisp_stderr})
				(endif)
				(f-call 'ref 'deref {value})
				(d-call 'vector 'clear {repl_args})
			(endif)
			(assign {index + 1} {index})
		(loop-end)

		;REPL from stdin
		(f-call 'ref 'ref {lisp->lisp_stdin})
		(f-call 'string 'create_from_cstr {"stdin"} {file})
		(f-call 'vector 'push_back {repl_args, lisp->lisp_stdin})
		(f-call 'vector 'push_back {repl_args, file})
		(loop-start)
			(f-call 'lisp 'func_repl {lisp, repl_args} {_, value})
			(breakif (cat {value->obj_vtable != @} (f-path 'class 'error)))
			(v-call 'stream 'write_flush {lisp->lisp_stdout})
			(v-call 'stream 'write_flush {lisp->lisp_stderr})
			(loop-start)
				(f-call 'stream 'available {lisp->lisp_stdin} {_, length})
				(breakifnot {length})
				(f-call 'stream 'read_char {lisp->lisp_stdin} {_, length})
			(loop-end)
			(f-call 'ref 'deref {value})
		(loop-end)
		(f-call 'ref 'deref {value})

		;clean up
		(f-call 'vector 'deref {repl_args})
		(f-call 'lisp 'deref {lisp})
		(f-call 'slave 'deref {slave})
	(endif)

	(pop-scope)
	(return)

(def-func-end)
