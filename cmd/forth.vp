(import 'inc/func.inc)
(import 'class/class_string.inc)
(import 'class/class_stream.inc)
(import 'class/class_vector.inc)
(import 'class/class_slave.inc)

(def-func 'cmd/forth)

(defcvar 'buffer_size 120)

	(ptr 'slave 'stream 'vector 'string)
	(ulong 'length)
	(struct 'buffer 'buffer)

	;init app vars
	(push-scope)

	;initialize pipe details and command args, abort on error
	(func-call 'slave 'create {} {slave})
	(vpif {slave})
		;set up input stream stack
		(func-call 'string 'create_from_file {"cmd/forth.f"} {string})
		(func-call 'stream 'create {string, 0, & string->string_data, string->string_length} {stream})
		(func-call 'vector 'create {} {vector})
		(func-call 'vector 'push_back {vector, stream})

		;app event loop
		(loop-start)
			;priority to stack input
			;this allows forth to push include files on this input stack
			(loop-start)
				(devirt-call 'vector 'get_length {vector} {length})
				(breakifnot {length})
				(func-call 'vector 'ref_back {vector} {stream})
				(func-call 'vector 'pop_back {vector})
				(loop-start)
					(func-call 'stream 'read_line {stream, & buffer, buffer_size} {length})
					(breakif {length == -1})
					(local-call 'input {slave, &buffer, length} '(r0, r1, r2))
				(loop-end)
				(func-call 'stream 'deref {stream})
			(loop-end)

			;read stdin, exit if EOF
			(func-call 'stream 'read_line {slave->slave_stdin, & buffer, buffer_size} {length})
			(breakif {length == -1})
			(local-call 'input {slave, &buffer, length} '(r0, r1, r2))
		(loop-end)

		;clean up
		(func-call 'vector 'deref {vector})
		(func-call 'slave 'deref {slave})
	(endif)
	(pop-scope)
	(return)

(vp-label 'input)
	;inputs
	;r0 = slave
	;r1 = buffer
	;r2 = length

	(const 'char_lf 10)

	(ptr 'slave 'buffer)
	(ulong 'length)

	(push-scope)
	(retire '(r0 r1 r2) {slave, buffer, length})

	(func-call 'stream 'write {slave->slave_stdout, buffer, length})
	(func-call 'stream 'write_char {slave->slave_stdout, char_lf})
	(virt-call 'stream 'write_flush {slave->slave_stdout})
	(func-call 'sys_task 'yield)

	(pop-scope)
	(return)

%if 0
;;;;;;;;;;
; forth vm
;;;;;;;;;;

%xdefine t1 r0
%xdefine t2 r1
%xdefine t3 r2
%xdefine sp r3
%xdefine rp r4

%macro loadsp 1-2 0
	vp_cpy [ sp + (%2 * long_size) ] , %1
%endmacro

%macro storesp 1-2 0
	vp_cpy %1, [ sp + (%2 * long_size) ] 
%endmacro

%macro decsp 0-1 1
	vp_sub (%1 * long_size), sp
%endmacro

%macro incsp 0-1 1
	vp_add (%1 * long_size), sp
%endmacro

%macro pushsp 1
	decsp
	storesp %1
%endmacro

%macro popsp 1
	loadsp %1
	incsp
%endmacro

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; dictionary building macros
;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;format of dictionary entry flag byte
(defcvar 'F_IMMED 0x80)
(defcvar 'F_HIDDEN 0x20)
(defcvar 'F_LENMASK 0x1f)

;format of header
(def-struct 'header)
	(long 'header_link)
	(ubyte 'header_nsize)
	(offset 'header_name)
(def-struct-end)

;format of header backwards from code entry point
(def-struct 'xt)
	(long 'xt_compile)
	(long 'xt_length)
	(long 'xt_body)
(def-struct-end)

%macro defword 4
	%push newword
	%strlen %%l %1
	align long_size
dic_%3:
	dq %$code_end - dic_%3	; LATEST list link
	db %%l + %2			; flags + length byte
	db %1				; the name
	dq %3 - $			; body pointer
	dq %$code_end - %3	; code length
	dq %4 - $			; compile action word
%3:
%endm					; assembler code follows

%macro defword_end 0
%$(vp-label 'code_end)
	%pop
%endm

%macro defvar 4
	defword %1, %2, %3, word_inline_comma
		vp_rel var_%3, t1
		pushsp t1
		(vp-ret)
	defword_end
	align long_size
var_%3:
	dq %4
%endm

%macro defconst 4
	defword %1, %2, %3, word_inline_comma
		vp_cpy %4, t1
		pushsp t1
		(vp-ret)
	defword_end
%endm

;;;;;;;;;;;;;;
; memory words
;;;;;;;;;;;;;;

defword "@", 0, word_fetch, word_inline_comma
	;( a -- [ a ])
	loadsp t1
	vp_cpy [ t1 ] , t1
	storesp t1
	(vp-ret)
defword_end

defword "c@", 0, word_fetchbyte, word_inline_comma
	;( a -- [ a ]  . b )
	loadsp t1
	vp_cpy_ub [ t1 ] , t1
	storesp t1
	(vp-ret)
defword_end

defword "!", 0, word_store, word_inline_comma
	;( a b -- )
	popsp t1
	popsp t2
	vp_cpy t1, [ t2 ] 
	(vp-ret)
defword_end

defword "c!", 0, word_storebyte, word_inline_comma
	;( a b -- )
	popsp t1
	popsp t2
	vp_cpy_b t1, [ t2 ] 
	(vp-ret)
defword_end

;;;;;;;;;;;
; alu words
;;;;;;;;;;;

defword "+", 0, word_add, word_inline_comma
	;( a b -- (a + b))
	popsp t1
	loadsp t2
	vp_add t1, t2
	storesp t2
	(vp-ret)
defword_end

defword "-", 0, word_sub, word_inline_comma
	;( a b -- (a - b))
	popsp t1
	loadsp t2
	vp_sub t1, t2
	storesp t2
	(vp-ret)
defword_end

defword "*", 0, word_mull, word_inline_comma
	;( a b -- (a * b))
	popsp t1
	loadsp t2
	(vp-mul-cr t1 t2)
	storesp t2
	(vp-ret)
defword_end

defword "/", 0, word_div, word_inline_comma
	;( a b -- (a / b))
	popsp t2
	loadsp t1
	vp_xor t3, t3
	vp_div t2, t3, t1
	storesp t1
	(vp-ret)
defword_end

defword "mod", 0, word_mod, word_inline_comma
	;( a b -- (a % b))
	popsp t2
	loadsp t1
	vp_xor t3, t3
	vp_div t2, t3, t1
	storesp t3
	(vp-ret)
defword_end

;;;;;;;;;;;;;;;;;;;
; stack order words
;;;;;;;;;;;;;;;;;;;

defword "dup", 0, word_dup, word_inline_comma
	;( a -- a a )
	loadsp t1
	pushsp t1
	(vp-ret)
defword_end

defword "swap", 0, word_swap, word_inline_comma
	;( a b -- b a )
	loadsp t1
	loadsp t2, 1
	storesp t1, 1
	storesp t2
	(vp-ret)
defword_end

defword "drop", 0, word_drop, word_inline_comma
	;( a -- )
	incsp
	(vp-ret)
defword_end

defword "over", 0, word_over, word_inline_comma
	;( a b -- a b a )
	loadsp t1, 1
	pushsp t1
	(vp-ret)
defword_end

defword "rot", 0, word_rot, word_inline_comma
	;( a b c -- b c a )
	loadsp t1, 2
	loadsp t2, 1
	loadsp t3
	storesp t2, 2
	storesp t3, 1
	storesp t1
	(vp-ret)
defword_end

defword "-rot", 0, word_nrot, word_inline_comma
	;( a b c -- c a b )
	loadsp t1, 2
	loadsp t2, 1
	loadsp t3
	storesp t3, 2
	storesp t1, 1
	storesp t2
	(vp-ret)
defword_end

defword "?dup", 0, word_qdup, word_inline_comma
	;( a -- a a | 0 )
	loadsp t1
	(vpif '(t1 != 0))
		pushsp t1
	(endif)
	(vp-ret)
defword_end

defword "!?dup", 0, word_nqdup, word_inline_comma
	;( a -- a a | 0 )
	loadsp t1
	(vpif '(t1 == 0))
		pushsp t1
	(endif)
	(vp-ret)
defword_end

defword "nip", 0, word_nip, word_inline_comma
	;( a b -- b )
	loadsp t1
	incsp
	storesp t1
	(vp-ret)
defword_end

defword "tuck", 0, word_tuck, word_inline_comma
	;( a b -- b a b )
	loadsp t1, 1
	loadsp t2
	decsp
	storesp t2, 2
	storesp t1, 1
	storesp t2
	(vp-ret)
defword_end

defword "pick", 0, word_pick, word_inline_comma
	;( a0 .. an n -- a0 .. an a0 )
	popsp t1
	loadsp t2, t1
	pushsp t2
	(vp-ret)
defword_end

;;;;;;;;;;;;;;;
; compile words
;;;;;;;;;;;;;;;

defword "call,", 0, word_call_comma, word_call_comma
	(vp-ret)
defword_end

defword "inline,", 0, word_inline_comma, word_call_comma
	(vp-ret)
defword_end
%(endif)

(def-func-end)
