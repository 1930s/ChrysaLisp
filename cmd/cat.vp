(import 'inc/func.inc)
(import 'class/string/string.inc)
(import 'class/stream/stream.inc)
(import 'class/stream_str/stream_str.inc)
(import 'class/vector/vector.inc)
(import 'class/slave/slave.inc)

(def-func 'cmd/cat)

	(defcvar 'buffer_size 120)

	(ptr 'slave 'arg 'args 'stream)
	(ulong 'argc 'index 'length)
	(struct 'buffer 'buffer)

	;init app vars
	(push-scope)

	;initialize pipe details and command args, abort on error
	(f-call 'slave 'create {} {slave})
	(vpif {slave})
		;cat files to stdout, arg 1 is command name
		(f-call 'slave 'get_args {slave} {args})
		(d-call 'vector 'get_length {args} {argc})
		(vpif {argc != 1})
			;names from command line
			(assign {1} {index})
			(loop-while {index != argc})
				(d-call 'vector 'ref_element {args, index} {arg})
				(l-call 'cat_string {slave, arg, &buffer} '(r0 r1 r2))
				(assign {index + 1} {index})
			(loop-end)
		(else)
			;names from stdin
			(loop-start)
				(f-call 'stream 'read_line {slave->slave_stdin, &buffer, buffer_size} {length})
				(breakif {length == -1})
				(f-call 'string 'create_from_buffer {&buffer, length} {arg})
				(l-call 'cat_string {slave, arg, &buffer} '(r0 r1 r2))
			(loop-end)
		(endif)

		;clean up
		(f-call 'slave 'deref {slave})
	(endif)
	(pop-scope)
	(return)

(vp-label 'cat_string)
	;r0 = slave
	;r1 = arg string
	;r2 = buffer

	(const 'char_lf 10)

	(ptr 'slave 'arg 'buffer 'file 'stream)
	(ulong 'length)

	(push-scope)
	(assign '(r0 r1 r2) {slave, arg, buffer})

	(f-call 'string 'create_from_file {&arg->string_data} {file})
	(f-call 'string 'deref {arg})
	(vpif {file})
		(f-call 'stream_str 'create {file} {stream})
		(loop-start)
			(f-call 'stream 'read_line {stream, buffer, buffer_size} {length})
			(breakif {length == -1})
			(f-call 'stream 'write {slave->slave_stdout, buffer, length})
			(f-call 'stream 'write_char {slave->slave_stdout, char_lf})
			(f-call 'sys_task 'yield)
		(loop-end)
		(v-call 'stream 'write_flush {slave->slave_stdout})
		(f-call 'stream 'deref {stream})
	(endif)

	(pop-scope)
	(return)

(def-func-end)
