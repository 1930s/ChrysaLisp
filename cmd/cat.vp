(import 'inc/func.inc)
(import 'class/class_string.inc)
(import 'class/class_stream.inc)
(import 'class/class_stream_str.inc)
(import 'class/class_vector.inc)
(import 'class/class_slave.inc)

(def-func 'cmd/cat)

(defcvar 'buffer_size 120)

	(ptr 'slave 'arg 'args 'stream)
	(ulong 'argc 'index 'length)
	(struct 'buffer 'buffer)

	;init app vars
	(push-scope)

	;initialize pipe details and command args, abort on error
	(func-call 'slave 'create '() '(slave))
	(vpif '((slave)))
		;cat files to stdout, arg 1 is command name
		(func-call 'slave 'get_args '(slave) '(args))
		(devirt-call 'vector 'get_length '(args) '(argc))
		(vpif '((argc != 1)))
			;names from command line
			(assign '(1) '(index))
			(loop-while '((index != argc)))
				(devirt-call 'vector 'ref_element '(args, index) '(arg))
				(local-call 'cat_string '(slave, arg, &buffer) '(r0, r1, r2))
				(assign '(index + 1) '(index))
			(loop-end)
		(else)
			;names from stdin
			(loop-start)
				(func-call 'stream 'read_line '(slave -> slave_stdin, & buffer, buffer_size) '(length))
				(breakif '((length == -1)))
				(func-call 'string 'create_from_buffer '(& buffer, length) '(arg))
				(local-call 'cat_string '(slave, arg, &buffer) '(r0, r1, r2))
			(loop-end)
		(endif)

		;clean up
		(func-call 'slave 'deref '(slave))
	(endif)
	(pop-scope)
	(return)

(vp-label 'cat_string)
	;r0 = slave
	;r1 = arg string
	;r2 = buffer

	(const 'char_lf 10)

	(ptr 'slave 'arg 'buffer 'file 'stream)
	(ulong 'length)

	(push-scope)
	(retire '(r0, r1, r2) '(slave, arg, buffer))

	(func-call 'string 'create_from_file '(& arg -> string_data) '(file))
	(func-call 'string 'deref '(arg))
	(vpif '((file)))
		(func-call 'stream_str 'create '(file) '(stream))
		(loop-start)
			(func-call 'stream 'read_line '(stream, buffer, buffer_size) '(length))
			(breakif '((length == -1)))
			(func-call 'stream 'write '(slave -> slave_stdout, buffer, length))
			(func-call 'stream 'write_char '(slave -> slave_stdout, char_lf))
			(func-call 'sys_task 'yield)
		(loop-end)
		(virt-call 'stream 'write_flush '(slave -> slave_stdout))
		(func-call 'stream 'deref '(stream))
	(endif)

	(pop-scope)
	(return)

(def-func-end)
