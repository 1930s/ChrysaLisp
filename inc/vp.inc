;;;;;;;;;;;;;;;;;
; VP Instructions
;;;;;;;;;;;;;;;;;

(equate 'r0 'r0 'r1 'r1 'r2 'r2 'r3 'r3 'r4 'r4 'r5 'r5 'r6 'r6 'r7 'r7 'r8 'r8
	'r9 'r9 'r10 'r10 'r11 'r11 'r12 'r12 'r13 'r13 'r14 'r14 'r15 'r15)

(defcompilefun reg (r)
	(defq c 0 n nil l '(r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15))
	(while (and (not n) (lt c (length l)))
		(if (eql (elem c l) r) (setq n c) (setq c (inc c)))) n)

(defcompilefun type (i)
	(cond
		((reg i) 'r)
		(t 'c)))

(defcompilefun vp-label (s) (emit `(emit-label ',s)) (equate s 0))
(defcompilefun vp-align (&rest b) (emit `(emit-align ~b)))
(defcompilefun vp-string (&rest b) (emit `(emit-string ~b)))
(defcompilefun vp-byte (&rest b) (emit `(emit-byte ~b)))
(defcompilefun vp-short (&rest b) (emit `(emit-short ~b)))
(defcompilefun vp-int (&rest b) (emit `(emit-int ~b)))
(defcompilefun vp-long (&rest b) (emit `(emit-long ~b)))

(defcompilefun vp-jmpif (b l)
	(defq d (elem 0 b) o (elem 1 b) s (elem 2 b) c (type s))
	(cond
		((eql c 'c) (vp-cmp-cr s d))
		((eql c 'r) (vp-cmp-rr s d))
		((eql c 'i) (vp-cmp-ir (elem 0 s) (elem 1 s) d))
		((eql c 'd) (vp-cmp-dr (elem 0 s) (elem 1 s) d))
		(t (print "no such type: " c)))
	(cond
		((eql o '==) (vp-beq l))
		((eql o '!=) (vp-bne l))
		((eql o '<) (vp-blt l))
		((eql o '>) (vp-bgt l))
		((eql o '<=) (vp-ble l))
		((eql o '=>) (vp-bge l))
		(t (print "no such comparator: " o))))

(defcompilefun vp-jmpifnot (b l)
	(defq d (elem 0 b) o (elem 1 b) s (elem 2 b) c (type s))
	(cond
		((eql c 'c) (vp-cmp-cr s d))
		((eql c 'r) (vp-cmp-rr s d))
		((eql c 'i) (vp-cmp-ir (elem 0 s) (elem 1 s) d))
		((eql c 'd) (vp-cmp-dr (elem 0 s) (elem 1 s) d))
		(t (print "no such type: " c)))
	(cond
		((eql o '==) (vp-bne l))
		((eql o '!=) (vp-beq l))
		((eql o '<) (vp-bge l))
		((eql o '>) (vp-ble l))
		((eql o '<=) (vp-bgt l))
		((eql o '=>) (vp-blt l))
		(t (print "no such comparator: " o))))

(defcompilefun vp-beq (l) (emit `(emit-beq ,l)))
(defcompilefun vp-bne (l) (emit `(emit-bne ,l)))
(defcompilefun vp-blt (l) (emit `(emit-blt ,l)))
(defcompilefun vp-ble (l) (emit `(emit-ble ,l)))
(defcompilefun vp-bgt (l) (emit `(emit-bgt ,l)))
(defcompilefun vp-bge (l) (emit `(emit-bge ,l)))

(defcompilefun vp-push (&rest b) (emit `(emit-push ~b)))
(defcompilefun vp-pop (&rest b) (emit `(emit-pop ~b)))

(defcompilefun vp-call (&rest b) (emit `(emit-call ~b)))
(defcompilefun vp-call-r (&rest b) (emit `(emit-call-r ~b)))
(defcompilefun vp-call-i (&rest b) (emit `(emit-call-i ~b)))
(defcompilefun vp-call-d (&rest b) (emit `(emit-call-d ~b)))
(defcompilefun vp-call-p (&rest b) (emit `(emit-call-p ~b)))

(defcompilefun vp-jmp (&rest b) (emit `(emit-jmp ~b)))
(defcompilefun vp-jmp-r (&rest b) (emit `(emit-jmp-r ~b)))
(defcompilefun vp-jmp-i (&rest b) (emit `(emit-jmp-i ~b)))
(defcompilefun vp-jmp-d (&rest b) (emit `(emit-jmp-d ~b)))
(defcompilefun vp-jmp-p (&rest b) (emit `(emit-jmp-p ~b)))

(defcompilefun vp-lea-i (&rest b) (emit `(emit-lea-i ~b)))
(defcompilefun vp-lea-d (&rest b) (emit `(emit-lea-d ~b)))
(defcompilefun vp-lea-p (&rest b) (emit `(emit-lea-p ~b)))

(defcompilefun vp-cpy-cr (&rest b) (emit `(emit-cpy-cr ~b)))
(defcompilefun vp-cpy-rr (&rest b) (emit `(emit-cpy-rr ~b)))
(defcompilefun vp-cpy-ir (&rest b) (emit `(emit-cpy-ir ~b)))
(defcompilefun vp-cpy-dr (&rest b) (emit `(emit-cpy-dr ~b)))
(defcompilefun vp-cpy-pr (&rest b) (emit `(emit-cpy-pr ~b)))
(defcompilefun vp-cpy-ri (&rest b) (emit `(emit-cpy-ri ~b)))
(defcompilefun vp-cpy-rd (&rest b) (emit `(emit-cpy-rd ~b)))
(defcompilefun vp-cpy-rp (&rest b) (emit `(emit-cpy-rp ~b)))

(defcompilefun vp-cpy-ir-b (&rest b) (emit `(emit-cpy-ir-b ~b)))
(defcompilefun vp-cpy-dr-b (&rest b) (emit `(emit-cpy-dr-b ~b)))
(defcompilefun vp-cpy-ir-ub (&rest b) (emit `(emit-cpy-ir-ub ~b)))
(defcompilefun vp-cpy-dr-ub (&rest b) (emit `(emit-cpy-dr-ub ~b)))
(defcompilefun vp-cpy-ir-s (&rest b) (emit `(emit-cpy-ir-s ~b)))
(defcompilefun vp-cpy-dr-s (&rest b) (emit `(emit-cpy-dr-s ~b)))
(defcompilefun vp-cpy-ir-us (&rest b) (emit `(emit-cpy-ir-us ~b)))
(defcompilefun vp-cpy-dr-us (&rest b) (emit `(emit-cpy-dr-us ~b)))
(defcompilefun vp-cpy-ir-i (&rest b) (emit `(emit-cpy-ir-i ~b)))
(defcompilefun vp-cpy-dr-i (&rest b) (emit `(emit-cpy-dr-i ~b)))
(defcompilefun vp-cpy-ir-ui (&rest b) (emit `(emit-cpy-ir-ui ~b)))
(defcompilefun vp-cpy-dr-ui (&rest b) (emit `(emit-cpy-dr-ui ~b)))

(defcompilefun vp-cpy-ri-b (&rest b) (emit `(emit-cpy-ri-b ~b)))
(defcompilefun vp-cpy-rd-b (&rest b) (emit `(emit-cpy-rd-b ~b)))
(defcompilefun vp-cpy-ri-s (&rest b) (emit `(emit-cpy-ri-s ~b)))
(defcompilefun vp-cpy-rd-s (&rest b) (emit `(emit-cpy-rd-s ~b)))
(defcompilefun vp-cpy-ri-i (&rest b) (emit `(emit-cpy-ri-i ~b)))
(defcompilefun vp-cpy-rd-i (&rest b) (emit `(emit-cpy-rd-i ~b)))

(defcompilefun vp-add-cr (&rest b) (emit `(emit-add-cr ~b)))
(defcompilefun vp-add-rr (&rest b) (emit `(emit-add-rr ~b)))
(defcompilefun vp-add-ir (&rest b) (emit `(emit-add-ir ~b)))
(defcompilefun vp-add-dr (&rest b) (emit `(emit-add-dr ~b)))

(defcompilefun vp-sub-cr (&rest b) (emit `(emit-sub-cr ~b)))
(defcompilefun vp-sub-rr (&rest b) (emit `(emit-sub-rr ~b)))
(defcompilefun vp-sub-ir (&rest b) (emit `(emit-sub-ir ~b)))
(defcompilefun vp-sub-dr (&rest b) (emit `(emit-sub-dr ~b)))

(defcompilefun vp-cmp-cr (&rest b) (emit `(emit-cmp-cr ~b)))
(defcompilefun vp-cmp-rr (&rest b) (emit `(emit-cmp-rr ~b)))
(defcompilefun vp-cmp-ir (&rest b) (emit `(emit-cmp-ir ~b)))
(defcompilefun vp-cmp-dr (&rest b) (emit `(emit-cmp-dr ~b)))

(defcompilefun vp-mul-cr (&rest b) (emit `(emit-mul-cr ~b)))
(defcompilefun vp-mul-rr (&rest b) (emit `(emit-mul-rr ~b)))
(defcompilefun vp-mul-ir (&rest b) (emit `(emit-mul-ir ~b)))
(defcompilefun vp-mul-dr (&rest b) (emit `(emit-mul-dr ~b)))

(defcompilefun vp-and-cr (&rest b) (emit `(emit-and-cr ~b)))
(defcompilefun vp-and-rr (&rest b) (emit `(emit-and-rr ~b)))
(defcompilefun vp-and-ir (&rest b) (emit `(emit-and-ir ~b)))
(defcompilefun vp-and-dr (&rest b) (emit `(emit-and-dr ~b)))

(defcompilefun vp-or-cr (&rest b) (emit `(emit-or-cr ~b)))
(defcompilefun vp-or-rr (&rest b) (emit `(emit-or-rr ~b)))
(defcompilefun vp-or-ir (&rest b) (emit `(emit-or-ir ~b)))
(defcompilefun vp-or-dr (&rest b) (emit `(emit-or-dr ~b)))

(defcompilefun vp-xor-cr (&rest b) (emit `(emit-xor-cr ~b)))
(defcompilefun vp-xor-rr (&rest b) (emit `(emit-xor-rr ~b)))
(defcompilefun vp-xor-ir (&rest b) (emit `(emit-xor-ir ~b)))
(defcompilefun vp-xor-dr (&rest b) (emit `(emit-xor-dr ~b)))

(defcompilefun vp-shl-cr (&rest b) (emit `(emit-shl-cr ~b)))
(defcompilefun vp-shl-rr (&rest b) (emit `(emit-shl-rr ~b)))
(defcompilefun vp-shr-cr (&rest b) (emit `(emit-shr-cr ~b)))
(defcompilefun vp-shr-rr (&rest b) (emit `(emit-shr-rr ~b)))
(defcompilefun vp-asr-cr (&rest b) (emit `(emit-asr-cr ~b)))
(defcompilefun vp-asr-rr (&rest b) (emit `(emit-asr-rr ~b)))

(defcompilefun vp-ret () (emit '(emit-ret)))
(defcompilefun vp-inc (r) (emit `(emit-inc ,r)))
(defcompilefun vp-dec (r) (emit `(emit-dec ,r)))
(defcompilefun vp-xchg-rr (&rest b) (emit `(emit-xchg-rr ~b)))
(defcompilefun vp-ext-rr (&rest b) (emit `(emit-ext-rr ~b)))
(defcompilefun vp-div-rrr (&rest b) (emit `(emit-div-rrr ~b)))
(defcompilefun vp-div-rrr-u (&rest b) (emit `(emit-div-rrr-u ~b)))

;;;;;;;;;;;;;
; Emit Buffer
;;;;;;;;;;;;;

(defcompilefun emit (f)
	(push *emit-buffer* f))

(defcompilefun emit-passes ()
	(defq *out-buffer-cnt* 0 *out-buffer-size* 0)
	(while (lt *out-buffer-cnt* 1)
		(setq *out-buffer* (list))
		(each eval *emit-buffer*)
		(setq *out-buffer-cnt* (if (eq *out-buffer-size* (length *out-buffer*))
			(inc *out-buffer-cnt*)
			(progn (setq *out-buffer-size* (length *out-buffer*)) 0)))))

(defcompilefun print-emit-buffer ()
	(defq i 0)
	(while (lt i (length *emit-buffer*))
		(print i " -> " (elem i *emit-buffer*))
		(setq i (inc i))))

(defcompilefun print-out-buffer (c)
	(defq i 0)
	(while (lt i (length *out-buffer*))
		(when (eq (mod i c) 0)
			(prin-base i 16 4) (prin " : "))
		(prin-base (elem i *out-buffer*) 16 2) (prin " ")
		(setq i (inc i))
		(if (eq (mod i c) 0)
			(print)))
	(print))

(defcompilefun emit-label (s)
	(set s (length *out-buffer*)))

(defcompilefun emit-byte (&rest b)
	(each (lambda (x)
		(push *out-buffer* (bit-and x 0xff))) b))

(defcompilefun emit-short (&rest b)
	(each (lambda (x)
		(emit-byte x (bit-shr x 8))) b))

(defcompilefun emit-int (&rest b)
	(each (lambda (x)
		(emit-short x (bit-shr x 16))) b))

(defcompilefun emit-long (&rest b)
	(each (lambda (x)
		(emit-int x (bit-shr x 32))) b))

(defcompilefun emit-string (s)
	(each (lambda (x)
		(emit-byte (code x))) s))

(defcompilefun emit-align (a &optional b)
	(defq n (align (length *out-buffer*) a) b (if b b 0))
	(while (ne (length *out-buffer*) n)
		(emit-byte b)))

;;;;;;;;;;;;;;;;;;;;
; x64 Emit Functions
;;;;;;;;;;;;;;;;;;;;

(defcompilefun emit-rr (o s d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte (add 0x48 (bit-shl sh 2) dh) o (add 0xc0 (bit-shl sl 3) dl)))

(defcompilefun emit-dr (o s1 s2 d)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte (add 0x48 (bit-shl dh 2) (bit-shl s2h 1) s1h) o)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-byte (add 0x04 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-byte (add 0x44 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcompilefun emit-dr-bs (o s1 s2 d)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte (add 0x48 (bit-shl dh 2) (bit-shl s2h 1) s1h) 0xf o)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-byte (add 0x04 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-byte (add 0x44 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcompilefun emit-ir (o s c d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte (add 0x48 (bit-shl dh 2) sh) o)
	(cond
		((and (eq c 0) (ne s 5) (ne s 13))
			(emit-byte (add (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24)))
		((le -0x80 c 0x7f)
			(emit-byte (add 0x40 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24))
			(emit-byte c))
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x80 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24))
			(emit-int c))
		(t (print "emit-ir constant out of range: " c))))

(defcompilefun emit-ir-bs (o s c d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte (add 0x48 (bit-shl dh 2) sh) 0x0f o)
	(cond
		((and (eq c 0) (ne s 5) (ne s 13))
			(emit-byte (add (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24)))
		((le -0x80 c 0x7f)
			(emit-byte (add 0x40 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24))
			(emit-byte c))
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x80 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24))
			(emit-int c))
		(t (print "emit-ir-bs constant out of range: " c))))

(defcompilefun emit-pr (o c d)
	(defq d (reg d) dl (bit-and 7 d) dh (bit-shr d 3) c (sub c 7))
	(cond
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x48 (bit-shl dh 2)) o (add 0x5 (bit-shl dl 3)))
			(emit-int c))
		(t (print "emit-pr constant out of range: " c))))

(defcompilefun emit-shift-cr (o c d)
	(defq d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte (add 0x48 dh))
	(cond
		((eq c 1)
			(emit-byte 0xd1 (add o dl)))
		((le c 0xff)
			(emit-byte 0xc1 (add o dl) c))
		(t (print "emit-shift-cr constant out of range: " c))))

(defcompilefun emit-shift-rr (o s d)
	(cond
		((eql s r1)
			(defq d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
			(emit-byte (add 0x48 dh) 0xd3 (add o dl)))
		((eql d r1)
			(defq sn (reg s) sl (bit-and 7 sn) sh (bit-shr sn 3))
			(emit-xchg-rr s d)
			(emit-byte (add 0x48 sh) 0xd3 (add o sl))
			(emit-xchg-rr s d))
		(t
			(emit-push d s r0 r1)
			(emit-cpy-ir r4 24 r0)
			(emit-cpy-ir r4 16 r1)
			(emit-byte 0x48 0xd3 o)
			(emit-cpy-ri r0 r4 24)
			(emit-pop d s r0 r1))))

(defcompilefun emit-call-jump (o c)
	(emit-byte o)
	(emit-int (sub c 5)))

(defcompilefun emit-call-jump-p (o c)
	(emit-byte 0xff o)
	(emit-int (sub c 6)))

(defcompilefun emit-call-jump-r (o d)
	(defq d (reg d) dl (bit-and 7 d))
	(if (ge d 8) (emit-byte 0x41))
	(emit-byte 0xff (add o dl)))

(defcompilefun emit-call-jump-i (o d c)
	(defq d (reg d) dl (bit-and 7 d))
	(if (ge d 8) (emit-byte 0x41))
	(emit-byte 0xff)
	(cond
		((and (eq c 0) (ne d 5) (ne d 13))
			(emit-byte (add o dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24)))
		((le -0x80 c 0x7f)
			(emit-byte (add 0x40 o dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24))
			(emit-byte c))
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x80 o dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24))
			(emit-int c))
		(t (print "emit-call-jump-i constant out of range: " c))))

(defcompilefun emit-call-jump-d (o d1 d2)
	(defq d1 (reg d1) d1l (bit-and 7 d1) d1h (bit-shr d1 3)
		d2 (reg d2) d2l (bit-and 7 d2) d2h (bit-shr d2 3))
	(if (or (ge d1 8) (ge d2 8)) (emit-byte (add 0x40 (bit-shl d2h 1) d1h)))
	(emit-byte 0xff)
	(if (or (eq d1 5) (eq d1 13)) (emit-byte (add o 0x44) (add (bit-shl d2l 3) d1l) 0)
		(emit-byte (add o 0x04) (add (bit-shl d2l 3) d1l))))

(defcompilefun emit-push (&rest b)
	(each (lambda (r)
		(setq r (reg r))
		(if (ge r 8)
			(emit-byte 0x41 (add 0x48 r))
			(emit-byte (add 0x50 r)))) b))

(defcompilefun emit-pop (&rest b)
	(each-rev (lambda (r)
		(setq r (reg r))
		(if (ge r 8)
			(emit-byte 0x41 (add 0x50 r))
			(emit-byte (add 0x58 r)))) b))

(defcompilefun emit-branch (o c)
	(setq c (sub c 2))
	(cond
		((le -0x80 c 0x7f)
			(emit-byte o c))
		((le -0x80000000 (sub c 4) 0x7fffffff)
			(emit-byte 0xf (add 0x10 o))
			(emit-int (sub c 4)))
		(t (print "emit-branch constant out of range: " c))))

(defcompilefun emit-beq (l) (emit-branch 0x74 (sub l (length *out-buffer*))))
(defcompilefun emit-bne (l) (emit-branch 0x75 (sub l (length *out-buffer*))))
(defcompilefun emit-blt (l) (emit-branch 0x7c (sub l (length *out-buffer*))))
(defcompilefun emit-ble (l) (emit-branch 0x7e (sub l (length *out-buffer*))))
(defcompilefun emit-bgt (l) (emit-branch 0x7f (sub l (length *out-buffer*))))
(defcompilefun emit-bge (l) (emit-branch 0x7d (sub l (length *out-buffer*))))

(defcompilefun emit-call (l) (emit-call-jump 0xe8 (sub l (length *out-buffer*))))
(defcompilefun emit-call-r (r) (emit-call-jump-r 0xd0 r))
(defcompilefun emit-call-i (d c) (emit-call-jump-i 0x10 d c))
(defcompilefun emit-call-d (d1 d2) (emit-call-jump-d 0x10 d1 d2))
(defcompilefun emit-call-p (l) (emit-call-jump-p 0x15 (sub l (length *out-buffer*))))

(defcompilefun emit-jmp (l) (emit-call-jump 0xe9 (sub l (length *out-buffer*))))
(defcompilefun emit-jmp-r (r) (emit-call-jump-r 0xe0 r))
(defcompilefun emit-jmp-i (d c) (emit-call-jump-i 0x20 d c))
(defcompilefun emit-jmp-d (d1 d2) (emit-call-jump-d 0x20 d1 d2))
(defcompilefun emit-jmp-p (l) (emit-call-jump-p 0x25 (sub l (length *out-buffer*))))

(defcompilefun emit-lea-i (s c d) (emit-ir 0x8d s c d))
(defcompilefun emit-lea-d (s1 s2 d) (emit-dr 0x8d s1 s2 d))
(defcompilefun emit-lea-p (l d) (emit-pr 0x8d (sub l (length *out-buffer*)) d))

(defcompilefun emit-cpy-cr (c r)
	(defq r (reg r) rl (bit-and r 7) rh (bit-shr r 3))
	(cond
		((le -0x80000000 c 0x7fffffff)
			(if (ge r 8) (emit-byte 0x41))
			(emit-byte (add 0xb8 rl))
			(emit-int c))
		(t
			(emit-byte (add 0x48 rh) (add 0xb8 rl))
			(emit-long c))))

(defcompilefun emit-cpy-rr (s d) (unless (eql s d) (emit-rr 0x89 s d)))
(defcompilefun emit-cpy-ir (s c d) (emit-ir 0x8b s c d))
(defcompilefun emit-cpy-dr (s1 s2 d) (emit-dr 0x8b s1 s2 d))
(defcompilefun emit-cpy-pr (l d) (emit-pr 0x8b (sub l (length *out-buffer*)) d))

(defcompilefun emit-cpy-ri (s d c)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(cond
		((and (eq c 0) (ne d 5) (ne d 13))
			(emit-byte (add 0x48 (bit-shl sh 2) dh) 0x89 (add (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24)))
		((le -0x80 c 0x7f)
			(emit-byte (add 0x48 (bit-shl sh 2) dh) 0x89 (add 0x40 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24))
			(emit-byte c))
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x48 (bit-shl sh 2) dh) 0x89 (add 0x80 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24))
			(emit-int c))
		(t (print "emit-cpy-ri constant out of range: " c))))

(defcompilefun emit-cpy-rd (d s1 s2)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte (add 0x48 (bit-shl dh 2) (bit-shl s2h 1) s1h) 0x89)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-byte (add 0x04 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-byte (add 0x44 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcompilefun emit-cpy-rp (d c)
	(defq d (reg d) dl (bit-and 7 d) dh (bit-shr d 3) c (sub c (length *out-buffer*) 7))
	(cond
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x48 (bit-shl dh 2)) 0x89 (add 0x5 (bit-shl dl 3)))
			(emit-int c))
		(t (print "emit-cpy-rp constant out of range: " c))))

(defcompilefun emit-cpy-ir-b (s c d) (emit-ir-bs 0xbe s c d))
(defcompilefun emit-cpy-dr-b (s1 s2 d) (emit-dr-bs 0xbe s1 s2 d))
(defcompilefun emit-cpy-ir-ub (s c d) (emit-ir-bs 0xb6 s c d))
(defcompilefun emit-cpy-dr-ub (s1 s2 d) (emit-dr-bs 0xb6 s1 s2 d))
(defcompilefun emit-cpy-ir-s (s c d) (emit-ir-bs 0xbf s c d))
(defcompilefun emit-cpy-dr-s (s1 s2 d) (emit-dr-bs 0xbf s1 s2 d))
(defcompilefun emit-cpy-ir-us (s c d) (emit-ir-bs 0xb7 s c d))
(defcompilefun emit-cpy-dr-us (s1 s2 d) (emit-dr-bs 0xb7 s1 s2 d))

(defcompilefun emit-cpy-ir-i (s c d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte (add 0x48 (bit-shl dh 2) sh) 0x63)
	(cond
		((and (eq c 0) (ne s 5) (ne s 13))
			(emit-byte (add (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24)))
		((le -0x80 c 0x7f)
			(emit-byte (add 0x40 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24))
			(emit-byte c))
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x80 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24))
			(emit-int c))
		(t (print "emit-cpy-ir-i constant out of range: " c))))

(defcompilefun emit-cpy-dr-i (s1 s2 d)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte (add 0x48 (bit-shl dh 2) (bit-shl s2h 1) s1h) 0x63)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-byte (add 0x04 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-byte (add 0x44 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcompilefun emit-cpy-ir-ui (s c d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(if (or (ge s 8) (ge d 8)) (emit-byte (add 0x40 (bit-shl dh 2) sh)))
	(emit-byte 0x8b)
	(cond
		((and (eq c 0) (ne s 5) (ne s 13))
			(emit-byte (add (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24)))
		((le -0x80 c 0x7f)
			(emit-byte (add 0x40 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24))
			(emit-byte c))
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x80 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24))
			(emit-int c))
		(t (print "emit-cpy-ir-ui constant out of range: " c))))

(defcompilefun emit-cpy-dr-ui (s1 s2 d)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(if (or (ge s1 8) (ge s2 8) (ge d 8)) (emit-byte (add 0x40 (bit-shl dh 2) (bit-shl s2h 1) s1h)))
	(emit-byte 0x8b)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-byte (add 0x04 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-byte (add 0x44 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcompilefun emit-cpy-ri-b (s d c)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(if (or (ge s 4) (ge d 8)) (emit-byte (add 0x40 (bit-shl sh 2) dh)))
	(emit-byte 0x88)
	(cond
		((and (eq c 0) (ne d 5) (ne d 13))
			(emit-byte (add (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24)))
		((le -0x80 c 0x7f)
			(emit-byte (add 0x40 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24))
			(emit-byte c))
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x80 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24))
			(emit-int c))
		(t (print "emit-cpy-ri-b constant out of range: " c))))

(defcompilefun emit-cpy-rd-b (r s1 s2)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(if (or (ge s1 8) (ge s2 8) (ge r 4)) (emit-byte (add 0x40 (bit-shl rh 2) (bit-shl s2h 1) s1h)))
	(emit-byte 0x88)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-byte (add 0x04 (bit-shl rl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-byte (add 0x44 (bit-shl rl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcompilefun emit-cpy-ri-s (s d c)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte 0x66)
	(if (or (ge s 8) (ge d 8)) (emit-byte (add 0x40 (bit-shl sh 2) dh)))
	(emit-byte 0x89)
	(cond
		((and (eq c 0) (ne d 5) (ne d 13))
			(emit-byte (add (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24)))
		((le -0x80 c 0x7f)
			(emit-byte (add 0x40 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24))
			(emit-byte c))
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x80 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24))
			(emit-int c))
		(t (print "emit-cpy-ri-s constant out of range: " c))))

(defcompilefun emit-cpy-rd-s (r s1 s2)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-byte 0x66)
	(if (or (ge s1 8) (ge s2 8) (ge r 8)) (emit-byte (add 0x40 (bit-shl rh 2) (bit-shl s2h 1) s1h)))
	(emit-byte 0x89)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-byte (add 0x04 (bit-shl rl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-byte (add 0x44 (bit-shl rl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcompilefun emit-cpy-ri-i (s d c)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(if (or (ge s 8) (ge d 8)) (emit-byte (add 0x40 (bit-shl sh 2) dh)))
	(emit-byte 0x89)
	(cond
		((and (eq c 0) (ne d 5) (ne d 13))
			(emit-byte (add (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24)))
		((le -0x80 c 0x7f)
			(emit-byte (add 0x40 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24))
			(emit-byte c))
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x80 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-byte 0x24))
			(emit-int c))
		(t (print "emit-cpy-ri-i constant out of range: " c))))

(defcompilefun emit-cpy-rd-i (r s1 s2)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(if (or (ge s1 8) (ge s2 8) (ge r 8)) (emit-byte (add 0x40 (bit-shl rh 2) (bit-shl s2h 1) s1h)))
	(emit-byte 0x89)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-byte (add 0x04 (bit-shl rl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-byte (add 0x44 (bit-shl rl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcompilefun emit-add-cr (c r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-byte (add 0x48 rh))
	(cond
		((le -0x80 c 0x7f)
			(emit-byte 0x83 (add 0xc0 rl) c))
		((le -0x80000000 c 0x7fffffff)
			(if (eq r 0)
				(emit-byte 0x05)
				(emit-byte 0x81 (add 0xc0 rl)))
			(emit-int c))
		(t (print "emit-add-cr constant out of range: " c))))

(defcompilefun emit-add-rr (s d) (emit-rr 0x01 s d))
(defcompilefun emit-add-ir (s c d) (emit-ir 0x03 s c d))
(defcompilefun emit-add-dr (s1 s2 d) (emit-dr 0x03 s1 s2 d))

(defcompilefun emit-sub-cr (c r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-byte (add 0x48 rh))
	(cond
		((le -0x80 c 0x7f)
			(emit-byte 0x83 (add 0xe8 rl) c))
		((le -0x80000000 c 0x7fffffff)
			(if (eq r 0)
				(emit-byte 0x2d)
				(emit-byte 0x81 (add 0xe8 rl)))
			(emit-int c))
		(t (print "emit-sub-cr constant out of range: " c))))

(defcompilefun emit-sub-rr (s d) (emit-rr 0x29 s d))
(defcompilefun emit-sub-ir (s c d) (emit-ir 0x2b s c d))
(defcompilefun emit-sub-dr (s1 s2 d) (emit-dr 0x2b s1 s2 d))

(defcompilefun emit-cmp-cr (c r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-byte (add 0x48 rh))
	(cond
		((le -0x80 c 0x7f)
			(emit-byte 0x83 (add 0xf8 rl) c))
		((le -0x80000000 c 0x7fffffff)
			(if (eq r 0)
				(emit-byte 0x3d)
				(emit-byte 0x81 (add 0xf8 rl)))
			(emit-int c))
		(t (print "emit-cmp-cr constant out of range: " c))))

(defcompilefun emit-cmp-rr (s d) (emit-rr 0x39 s d))
(defcompilefun emit-cmp-ir (s c d) (emit-ir 0x3b s c d))
(defcompilefun emit-cmp-dr (s1 s2 d) (emit-dr 0x3b s1 s2 d))

(defcompilefun emit-and-cr (c r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-byte (add 0x48 rh))
	(cond
		((le -0x80 c 0x7f)
			(emit-byte 0x83 (add 0xe0 rl) c))
		((le -0x80000000 c 0x7fffffff)
			(if (eq r 0)
				(emit-byte 0x25)
				(emit-byte 0x81 (add 0xe0 rl)))
			(emit-int c))
		(t (print "emit-and-cr constant out of range: " c))))

(defcompilefun emit-and-rr (s d) (unless (eql s d) (emit-rr 0x21 s d)))
(defcompilefun emit-and-ir (s c d) (emit-ir 0x23 s c d))
(defcompilefun emit-and-dr (s1 s2 d) (emit-dr 0x23 s1 s2 d))

(defcompilefun emit-or-cr (c r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-byte (add 0x48 rh))
	(cond
		((le -0x80 c 0x7f)
			(emit-byte 0x83 (add 0xc8 rl) c))
		((le -0x80000000 c 0x7fffffff)
			(if (eq r 0)
				(emit-byte 0x0d)
				(emit-byte 0x81 (add 0xc8 rl)))
			(emit-int c))
		(t (print "emit-or-cr constant out of range: " c))))

(defcompilefun emit-or-rr (s d) (unless (eql s d) (emit-rr 0x09 s d)))
(defcompilefun emit-or-ir (s c d) (emit-ir 0x0b s c d))
(defcompilefun emit-or-dr (s1 s2 d) (emit-dr 0x0b s1 s2 d))

(defcompilefun emit-xor-cr (c r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-byte (add 0x48 rh))
	(cond
		((le -0x80 c 0x7f)
			(emit-byte 0x83 (add 0xf0 rl) c))
		((le -0x80000000 c 0x7fffffff)
			(if (eq r 0)
				(emit-byte 0x35)
				(emit-byte 0x81 (add 0xf0 rl)))
			(emit-int c))
		(t (print "emit-xor-cr constant out of range: " c))))

(defcompilefun emit-xor-rr (s d) (emit-rr 0x31 s d))
(defcompilefun emit-xor-ir (s c d) (emit-ir 0x33 s c d))
(defcompilefun emit-xor-dr (s1 s2 d) (emit-dr 0x33 s1 s2 d))

(defcompilefun emit-shl-cr (c r) (emit-shift-cr 0xe0 c r))
(defcompilefun emit-shl-rr (s d) (emit-shift-rr 0xe0 s d))
(defcompilefun emit-shr-cr (c r) (emit-shift-cr 0xe8 c r))
(defcompilefun emit-shr-rr (s d) (emit-shift-rr 0xe8 s d))
(defcompilefun emit-asr-cr (c r) (emit-shift-cr 0xf8 c r))
(defcompilefun emit-asr-rr (s d) (emit-shift-rr 0xf8 s d))

(defcompilefun emit-mul-cr (c r)
	(defq r (reg r) rl (bit-and r 7) rh (bit-shr r 3))
	(cond
		((eq -1 c)
			(emit-byte (add 0x48 rh) 0xf7 (add 0xd8 rl)))
		((le -0x80 c 0x7f)
			(emit-byte (add 0x48 (bit-shl rh 2) rh) 0x6b (add 0xc0 rl (bit-shl rl 3)) c))
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x48 (bit-shl rh 2) rh) 0x69 (add 0xc0 rl (bit-shl rl 3)))
			(emit-int c))
		(t (print "emit-mul-cr constant out of range: " c))))

(defcompilefun emit-mul-rr (s d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte (add 0x48 (bit-shl dh 2) sh) 0x0f 0xaf (add 0xc0 (bit-shl dl 3) sl)))

(defcompilefun emit-mul-ir (s c d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte (add 0x48 (bit-shl dh 2) sh) 0x0f 0xaf)
	(cond
		((and (eq c 0) (ne s 5) (ne s 13))
			(emit-byte (add (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24)))
		((le -0x80 c 0x7f)
			(emit-byte (add 0x40 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24))
			(emit-byte c))
		((le -0x80000000 c 0x7fffffff)
			(emit-byte (add 0x80 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-byte 0x24))
			(emit-int c))
		(t (print "emit-mul-ir constant out of range: " c))))

(defcompilefun emit-mul-dr (s1 s2 d)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-byte (add 0x48 (bit-shl dh 2) (bit-shl s2h 1) s1h) 0x0f 0xaf)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-byte (add 0x04 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-byte (add 0x44 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcompilefun emit-ret () (emit-byte 0xc3))

(defcompilefun emit-inc (r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-byte (add 0x48 rh) 0xff (add 0xc0 rl)))

(defcompilefun emit-dec (r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-byte (add 0x48 rh) 0xff (add 0xc8 rl)))

(defcompilefun emit-xchg-rr (s d)
	(unless (eql s d)
		(if (eql s r0) (setq s d d r0))
		(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
			d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
		(if (eq d 0)
			(emit-byte (add 0x48 sh) (add 0x90 sl))
			(emit-byte (add 0x48 (bit-shl sh 2) dh) 0x87 (add 0xc0 (bit-shl sl 3) dl)))))

(defcompilefun emit-ext-rr (s d)
	(if (and (eql s r0) (eql d r2))
		(emit-byte 0x48 0x99)
		(progn
			(emit-xor-rr d d)
			(emit-cmp-cr 0 s)
			(emit-branch 0x7d 5)
			(emit-dec d))))

(defcompilefun emit-div-rrr (s d1 d2)
	(cond
		((and (eql d1 r2) (eql d2 r0))
			(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3))
			(emit-byte (add 0x48 sh) 0xF7 (add 0xF8 sl)))
		((and (eql d1 r0) (eql d2 r2) (not (eql s r0)) (not (eql s r2)))
			(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3))
			(emit-byte 0x48 0x92 (add 0x48 sh) 0xF7 (add 0xF8 sl) 0x48 0x92))
		(t
			(emit-push d2 d1 s r2 r1 r0)
			(emit-cpy-ir r4 24 r1)
			(emit-cpy-ir r4 32 r2)
			(emit-cpy-ir r4 40 r0)
			(emit-byte 0x48 0xF7 0xF9)
			(emit-cpy-ri r2 r4 32)
			(emit-cpy-ri r0 r4 40)
			(emit-pop d2 d1 s r2 r1 r0))))

(defcompilefun emit-div-rrr-u (s d1 d2)
	(cond
		((and (eql d1 r2) (eql d2 r0))
			(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3))
			(emit-byte (add 0x48 sh) 0xF7 (add 0xF0 sl)))
		((and (eql d1 r0) (eql d2 r2) (not (eql s r0)) (not (eql s r2)))
			(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3))
			(emit-byte 0x48 0x92 (add 0x48 sh) 0xF7 (add 0xF0 sl) 0x48 0x92))
		(t
			(emit-push d2 d1 s r2 r1 r0)
			(emit-cpy-ir r4 24 r1)
			(emit-cpy-ir r4 32 r2)
			(emit-cpy-ir r4 40 r0)
			(emit-byte 0x48 0xF7 0xF1)
			(emit-cpy-ri r2 r4 32)
			(emit-cpy-ri r0 r4 40)
			(emit-pop d2 d1 s r2 r1 r0))))
