;;;;;;;;;;;;;;;;;
; VP Instructions
;;;;;;;;;;;;;;;;;

(defcvar 'r0 'r0 'r1 'r1 'r2 'r2 'r3 'r3 'r4 'r4 'r5 'r5 'r6 'r6 'r7 'r7 'r8 'r8
	'r9 'r9 'r10 'r10 'r11 'r11 'r12 'r12 'r13 'r13 'r14 'r14 'r15 'r15
	'*distance* nil)

(defcfun reg (r)
	(defq c -1 n nil l '(r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15))
	(while (and (not n) (lt (setq c (inc c)) 16))
		(if (eql (elem c l) r) (setq n c))) n)

(defcfun type (o)
	(defq i (obj? o))
	(cond
		((not i) i)
		((eql i 'class/class_symbol)
			(cond
				((reg o) 'r)
				(t 'c)))
		((eql i 'class/class_vector)
			(setq i (elem 0 o))
			(cond
				((reg i)
					(if (reg (elem 1 o)) 'd 'i))
				((eql i '@) i)
				((eql i '$) i)
				((eql i '&)
					(if (reg (elem 1 o))
						(if (reg (elem 2 o)) '&d '&i) nil))
				(t 'c)))
		((eql i 'class/class_string) 's)
		((eql i 'class/class_boxed_long) 'c)
		(t nil)))

(defcfun label-sym (s)
	(sym (cat "_lb_" (str s))))

(defcfun vp-label (s) (setq s (label-sym s)) (emit `(emit-label ',s)) (defcvar s 0))
(defcfun vp-align (&rest b) (emit `(emit-align ~b)))
(defcfun vp-string (&rest b) (emit `(emit-string ~b)))
(defcfun vp-byte (&rest b) (emit `(emit-byte ~b)))
(defcfun vp-short (&rest b) (emit `(emit-short ~b)))
(defcfun vp-int (&rest b) (emit `(emit-int ~b)))
(defcfun vp-long (&rest b) (emit `(emit-long ~b)))

(defcfun vp-jmpif (b l)
	(defq d (elem 0 b) o (elem 1 b) s (elem 2 b) c (type s))
	(cond
		((eql c 'c) (vp-cmp-cr s d))
		((eql c 'r) (vp-cmp-rr s d))
		((eql c 'i) (vp-cmp-ir (elem 0 s) (elem 1 s) d))
		((eql c 'd) (vp-cmp-dr (elem 0 s) (elem 1 s) d))
		(t (print "no such type: " c)))
	(cond
		((eql o '==) (vp-beq l))
		((eql o '!=) (vp-bne l))
		((eql o '<) (vp-blt l))
		((eql o '>) (vp-bgt l))
		((eql o '<=) (vp-ble l))
		((eql o '>=) (vp-bge l))
		(t (print "no such comparator: " o))))

(defcfun vp-jmpifnot (b l)
	(defq d (elem 0 b) o (elem 1 b) s (elem 2 b) c (type s))
	(cond
		((eql c 'c) (vp-cmp-cr s d))
		((eql c 'r) (vp-cmp-rr s d))
		((eql c 'i) (vp-cmp-ir (elem 0 s) (elem 1 s) d))
		((eql c 'd) (vp-cmp-dr (elem 0 s) (elem 1 s) d))
		(t (print "no such type: " c)))
	(cond
		((eql o '==) (vp-bne l))
		((eql o '!=) (vp-beq l))
		((eql o '<) (vp-bge l))
		((eql o '>) (vp-ble l))
		((eql o '<=) (vp-bgt l))
		((eql o '>=) (vp-blt l))
		(t (print "no such comparator: " o))))

(defcfun vp-beq (l) (emit `(emit-beq ,(label-sym l) ,(dec (length (push *distance* 0))))))
(defcfun vp-bne (l) (emit `(emit-bne ,(label-sym l) ,(dec (length (push *distance* 0))))))
(defcfun vp-blt (l) (emit `(emit-blt ,(label-sym l) ,(dec (length (push *distance* 0))))))
(defcfun vp-ble (l) (emit `(emit-ble ,(label-sym l) ,(dec (length (push *distance* 0))))))
(defcfun vp-bgt (l) (emit `(emit-bgt ,(label-sym l) ,(dec (length (push *distance* 0))))))
(defcfun vp-bge (l) (emit `(emit-bge ,(label-sym l) ,(dec (length (push *distance* 0))))))

(defcfun vp-push (&rest b) (emit `(emit-push ~b)))
(defcfun vp-pop (&rest b) (emit `(emit-pop ~b)))

(defcfun vp-call (l) (emit `(emit-call ,(label-sym l))))
(defcfun vp-call-r (&rest b) (emit `(emit-call-r ~b)))
(defcfun vp-call-i (&rest b) (emit `(emit-call-i ~b)))
(defcfun vp-call-d (&rest b) (emit `(emit-call-d ~b)))
(defcfun vp-call-p (l) (emit `(emit-call-p ,(label-sym l))))

(defcfun vp-jmp (l) (emit `(emit-jmp ,(label-sym l) ,(dec (length (push *distance* 0))))))
(defcfun vp-jmp-r (&rest b) (emit `(emit-jmp-r ~b)))
(defcfun vp-jmp-i (&rest b) (emit `(emit-jmp-i ~b)))
(defcfun vp-jmp-d (&rest b) (emit `(emit-jmp-d ~b)))
(defcfun vp-jmp-p (l) (emit `(emit-jmp-p ,(label-sym l))))

(defcfun vp-lea-i (&rest b) (emit `(emit-lea-i ~b)))
(defcfun vp-lea-d (&rest b) (emit `(emit-lea-d ~b)))
(defcfun vp-lea-p (l r) (emit `(emit-lea-p ,(label-sym l) ,r)))

(defcfun vp-cpy-cr (&rest b) (emit `(emit-cpy-cr ~b)))
(defcfun vp-cpy-rr (&rest b) (emit `(emit-cpy-rr ~b)))
(defcfun vp-cpy-ir (&rest b) (emit `(emit-cpy-ir ~b)))
(defcfun vp-cpy-dr (&rest b) (emit `(emit-cpy-dr ~b)))
(defcfun vp-cpy-pr (l r) (emit `(emit-cpy-pr ,(label-sym l) ,r)))
(defcfun vp-cpy-ri (&rest b) (emit `(emit-cpy-ri ~b)))
(defcfun vp-cpy-rd (&rest b) (emit `(emit-cpy-rd ~b)))
(defcfun vp-cpy-rp (r l) (emit `(emit-cpy-rp ,r ,(label-sym l))))

(defcfun vp-cpy-ir-b (&rest b) (emit `(emit-cpy-ir-b ~b)))
(defcfun vp-cpy-dr-b (&rest b) (emit `(emit-cpy-dr-b ~b)))
(defcfun vp-cpy-ir-ub (&rest b) (emit `(emit-cpy-ir-ub ~b)))
(defcfun vp-cpy-dr-ub (&rest b) (emit `(emit-cpy-dr-ub ~b)))
(defcfun vp-cpy-ir-s (&rest b) (emit `(emit-cpy-ir-s ~b)))
(defcfun vp-cpy-dr-s (&rest b) (emit `(emit-cpy-dr-s ~b)))
(defcfun vp-cpy-ir-us (&rest b) (emit `(emit-cpy-ir-us ~b)))
(defcfun vp-cpy-dr-us (&rest b) (emit `(emit-cpy-dr-us ~b)))
(defcfun vp-cpy-ir-i (&rest b) (emit `(emit-cpy-ir-i ~b)))
(defcfun vp-cpy-dr-i (&rest b) (emit `(emit-cpy-dr-i ~b)))
(defcfun vp-cpy-ir-ui (&rest b) (emit `(emit-cpy-ir-ui ~b)))
(defcfun vp-cpy-dr-ui (&rest b) (emit `(emit-cpy-dr-ui ~b)))

(defcfun vp-cpy-ri-b (&rest b) (emit `(emit-cpy-ri-b ~b)))
(defcfun vp-cpy-rd-b (&rest b) (emit `(emit-cpy-rd-b ~b)))
(defcfun vp-cpy-ri-s (&rest b) (emit `(emit-cpy-ri-s ~b)))
(defcfun vp-cpy-rd-s (&rest b) (emit `(emit-cpy-rd-s ~b)))
(defcfun vp-cpy-ri-i (&rest b) (emit `(emit-cpy-ri-i ~b)))
(defcfun vp-cpy-rd-i (&rest b) (emit `(emit-cpy-rd-i ~b)))

(defcfun vp-add-cr (&rest b) (emit `(emit-add-cr ~b)))
(defcfun vp-add-rr (&rest b) (emit `(emit-add-rr ~b)))
(defcfun vp-add-ir (&rest b) (emit `(emit-add-ir ~b)))
(defcfun vp-add-dr (&rest b) (emit `(emit-add-dr ~b)))

(defcfun vp-sub-cr (&rest b) (emit `(emit-sub-cr ~b)))
(defcfun vp-sub-rr (&rest b) (emit `(emit-sub-rr ~b)))
(defcfun vp-sub-ir (&rest b) (emit `(emit-sub-ir ~b)))
(defcfun vp-sub-dr (&rest b) (emit `(emit-sub-dr ~b)))

(defcfun vp-cmp-cr (&rest b) (emit `(emit-cmp-cr ~b)))
(defcfun vp-cmp-rr (&rest b) (emit `(emit-cmp-rr ~b)))
(defcfun vp-cmp-ir (&rest b) (emit `(emit-cmp-ir ~b)))
(defcfun vp-cmp-dr (&rest b) (emit `(emit-cmp-dr ~b)))

(defcfun vp-mul-cr (&rest b) (emit `(emit-mul-cr ~b)))
(defcfun vp-mul-rr (&rest b) (emit `(emit-mul-rr ~b)))
(defcfun vp-mul-ir (&rest b) (emit `(emit-mul-ir ~b)))
(defcfun vp-mul-dr (&rest b) (emit `(emit-mul-dr ~b)))

(defcfun vp-and-cr (&rest b) (emit `(emit-and-cr ~b)))
(defcfun vp-and-rr (&rest b) (emit `(emit-and-rr ~b)))
(defcfun vp-and-ir (&rest b) (emit `(emit-and-ir ~b)))
(defcfun vp-and-dr (&rest b) (emit `(emit-and-dr ~b)))

(defcfun vp-or-cr (&rest b) (emit `(emit-or-cr ~b)))
(defcfun vp-or-rr (&rest b) (emit `(emit-or-rr ~b)))
(defcfun vp-or-ir (&rest b) (emit `(emit-or-ir ~b)))
(defcfun vp-or-dr (&rest b) (emit `(emit-or-dr ~b)))

(defcfun vp-xor-cr (&rest b) (emit `(emit-xor-cr ~b)))
(defcfun vp-xor-rr (&rest b) (emit `(emit-xor-rr ~b)))
(defcfun vp-xor-ir (&rest b) (emit `(emit-xor-ir ~b)))
(defcfun vp-xor-dr (&rest b) (emit `(emit-xor-dr ~b)))

(defcfun vp-shl-cr (&rest b) (emit `(emit-shl-cr ~b)))
(defcfun vp-shl-rr (&rest b) (emit `(emit-shl-rr ~b)))
(defcfun vp-shr-cr (&rest b) (emit `(emit-shr-cr ~b)))
(defcfun vp-shr-rr (&rest b) (emit `(emit-shr-rr ~b)))
(defcfun vp-asr-cr (&rest b) (emit `(emit-asr-cr ~b)))
(defcfun vp-asr-rr (&rest b) (emit `(emit-asr-rr ~b)))

(defcfun vp-ret () (emit '(emit-ret)))
(defcfun vp-inc (r) (emit `(emit-inc ,r)))
(defcfun vp-dec (r) (emit `(emit-dec ,r)))
(defcfun vp-xchg-rr (&rest b) (emit `(emit-xchg-rr ~b)))
(defcfun vp-ext-rr (s d) (emit `(emit-ext-rr ,s ,d ,(dec (length (push *distance* 0))))))
(defcfun vp-div-rrr (&rest b) (emit `(emit-div-rrr ~b)))
(defcfun vp-div-rrr-u (&rest b) (emit `(emit-div-rrr-u ~b)))
(defcfun vp-syscall () (emit `(emit-syscall)))

;;;;;;;;;;;;;
; Emit Buffer
;;;;;;;;;;;;;

(defcvar '*emit-buffer* nil '*out-buffer* nil '*pc* nil '*shift* nil '*word* nil)

(defcfun reset-out-buffer ()
	(setq *out-buffer* (list) *pc* 0 *shift* 0 *word* 0))

(defcfun emit (f)
	(push *emit-buffer* f))

(defcfun emit-done (x y)
	(cond
		((eq (length x) 0))
		((ne (length x) (length y)))
		(t (every eq x y))))

(defcfun emit-passes ()
	(defq *pass* 0 *old-out-buffer* (list))
	(reset-out-buffer)
	(until (emit-done *out-buffer* *old-out-buffer*)
		(setq *old-out-buffer* *out-buffer*)
		(reset-out-buffer)
		(eval *emit-buffer*)
		(setq *pass* (inc *pass*))))

(defcfun print-emit-buffer ()
	(defq i 0)
	(while (lt i (length *emit-buffer*))
		(print i " -> " (elem i *emit-buffer*))
		(setq i (inc i))))

(defcfun emit-label (s)
	(set s *pc*))

(defcfun emit-bytes (&rest b)
	(defq s *shift* w *word* o *out-buffer* i -1 j (length b))
	(while (lt (setq i (inc i)) j)
		(setq w (add w (bit-shl (elem i b) s)) s (add s 8))
		(when (eq s 64)
			(push o w)
			(setq w 0 s 0)))
	(setq *pc* (add *pc* j) *shift* s *word* w))

(defcfun emit-byte (&rest b)
	(each (lambda (x)
		(emit-bytes (bit-and x 0xff))) b))

(defcfun emit-short (&rest b)
	(each (lambda (x)
		(emit-bytes (bit-and x 0xff) (bit-and (bit-shr x 8) 0xff))) b))

(defcfun emit-int (&rest b)
	(each (lambda (x)
		(emit-bytes (bit-and x 0xff) (bit-and (bit-shr x 8) 0xff)
			(bit-and (bit-shr x 16) 0xff) (bit-and (bit-shr x 24) 0xff))) b))

(defcfun emit-long (&rest b)
	(each (lambda (x)
		(emit-bytes (bit-and x 0xff) (bit-and (bit-shr x 8) 0xff)
			(bit-and (bit-shr x 16) 0xff) (bit-and (bit-shr x 24) 0xff)
			(bit-and (bit-shr x 32) 0xff) (bit-and (bit-shr x 40) 0xff)
			(bit-and (bit-shr x 48) 0xff) (bit-shr x 56))) b))

(defcfun emit-string (s)
	(each (lambda (x)
		(emit-bytes (code x))) s))

(defcfun emit-align (a &optional b)
	(when (ne *pass* 0)
		(defq n (align *pc* a) b (if b (bit-and b 0xff) 0))
		(while (lt *pc* n)
			(emit-bytes b))))

;;;;;;;;;;;;;;;;;;;;
; x64 Emit Functions
;;;;;;;;;;;;;;;;;;;;

(defcfun emit-rr (o s d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes (add 0x48 (bit-shl sh 2) dh) o (add 0xc0 (bit-shl sl 3) dl)))

(defcfun emit-dr (o s1 s2 d)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes (add 0x48 (bit-shl dh 2) (bit-shl s2h 1) s1h) o)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-bytes (add 0x04 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-bytes (add 0x44 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcfun emit-dr-bs (o s1 s2 d)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes (add 0x48 (bit-shl dh 2) (bit-shl s2h 1) s1h) 0xf o)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-bytes (add 0x04 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-bytes (add 0x44 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcfun emit-ir (o s c d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes (add 0x48 (bit-shl dh 2) sh) o)
	(cond
		((and (eq c 0) (ne s 5) (ne s 13))
			(emit-bytes (add (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24)))
		((le -0x80 c 0x7f)
			(emit-bytes (add 0x40 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24))
			(emit-bytes (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x80 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24))
			(emit-int c))
		(t (print "emit-ir constant out of range: " c))))

(defcfun emit-ir-bs (o s c d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes (add 0x48 (bit-shl dh 2) sh) 0x0f o)
	(cond
		((and (eq c 0) (ne s 5) (ne s 13))
			(emit-bytes (add (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24)))
		((le -0x80 c 0x7f)
			(emit-bytes (add 0x40 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24))
			(emit-bytes (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x80 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24))
			(emit-int c))
		(t (print "emit-ir-bs constant out of range: " c))))

(defcfun emit-pr (o c d)
	(defq d (reg d) dl (bit-and 7 d) dh (bit-shr d 3) c (sub c 7))
	(cond
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x48 (bit-shl dh 2)) o (add 0x5 (bit-shl dl 3)))
			(emit-int c))
		(t (print "emit-pr constant out of range: " c))))

(defcfun emit-shift-cr (o c d)
	(defq d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes (add 0x48 dh))
	(cond
		((eq c 1)
			(emit-bytes 0xd1 (add o dl)))
		((le c 0xff)
			(emit-bytes 0xc1 (add o dl) (bit-and c 0xff)))
		(t (print "emit-shift-cr constant out of range: " c))))

(defcfun emit-shift-rr (o s d)
	(cond
		((eql s r1)
			(defq d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
			(emit-bytes (add 0x48 dh) 0xd3 (add o dl)))
		((eql d r1)
			(defq sn (reg s) sl (bit-and 7 sn) sh (bit-shr sn 3))
			(emit-xchg-rr s d)
			(emit-bytes (add 0x48 sh) 0xd3 (add o sl))
			(emit-xchg-rr s d))
		(t
			(emit-push d s r0 r1)
			(emit-cpy-ir r4 24 r0)
			(emit-cpy-ir r4 16 r1)
			(emit-bytes 0x48 0xd3 o)
			(emit-cpy-ri r0 r4 24)
			(emit-pop d s r0 r1))))

(defcfun emit-call-jump-p (o c)
	(emit-bytes 0xff o)
	(emit-int (sub c 6)))

(defcfun emit-call-jump-r (o d)
	(defq d (reg d) dl (bit-and 7 d))
	(if (ge d 8) (emit-bytes 0x41))
	(emit-bytes 0xff (add o dl)))

(defcfun emit-call-jump-i (o d c)
	(defq d (reg d) dl (bit-and 7 d))
	(if (ge d 8) (emit-bytes 0x41))
	(emit-bytes 0xff)
	(cond
		((and (eq c 0) (ne d 5) (ne d 13))
			(emit-bytes (add o dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24)))
		((le -0x80 c 0x7f)
			(emit-bytes (add 0x40 o dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24))
			(emit-bytes (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x80 o dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24))
			(emit-int c))
		(t (print "emit-call-jump-i constant out of range: " c))))

(defcfun emit-call-jump-d (o d1 d2)
	(defq d1 (reg d1) d1l (bit-and 7 d1) d1h (bit-shr d1 3)
		d2 (reg d2) d2l (bit-and 7 d2) d2h (bit-shr d2 3))
	(if (or (ge d1 8) (ge d2 8)) (emit-bytes (add 0x40 (bit-shl d2h 1) d1h)))
	(emit-bytes 0xff)
	(if (or (eq d1 5) (eq d1 13)) (emit-bytes (add o 0x44) (add (bit-shl d2l 3) d1l) 0)
		(emit-bytes (add o 0x04) (add (bit-shl d2l 3) d1l))))

(defcfun emit-push (&rest b)
	(each (lambda (r)
		(setq r (reg r))
		(if (ge r 8)
			(emit-bytes 0x41 (add 0x48 r))
			(emit-bytes (add 0x50 r)))) b))

(defcfun emit-pop (&rest b)
	(each-rev (lambda (r)
		(setq r (reg r))
		(if (ge r 8)
			(emit-bytes 0x41 (add 0x50 r))
			(emit-bytes (add 0x58 r)))) b))

(defcfun emit-branch (o c d)
	(defq m (elem d *distance*))
	(if (ne *pass* 0) (if (gt (abs c) (abs m)) (elem-set d *distance* (setq m c))))
	(cond
		((le -0x80 (sub m 2) 0x7f)
			(emit-bytes o (bit-and (sub c 2) 0xff)))
		((le -0x80000000 (sub m 6) 0x7fffffff)
			(emit-bytes 0xf (add 0x10 o))
			(emit-int (sub c 6)))
		(t (print "emit-branch constant out of range: " c))))

(defcfun emit-syscall ()
	(emit-bytes 0xf 0x5))

(defcfun emit-beq (l d) (emit-branch 0x74 (sub l *pc*) d))
(defcfun emit-bne (l d) (emit-branch 0x75 (sub l *pc*) d))
(defcfun emit-blt (l d) (emit-branch 0x7c (sub l *pc*) d))
(defcfun emit-ble (l d) (emit-branch 0x7e (sub l *pc*) d))
(defcfun emit-bgt (l d) (emit-branch 0x7f (sub l *pc*) d))
(defcfun emit-bge (l d) (emit-branch 0x7d (sub l *pc*) d))

(defcfun emit-call (l)
	(defq c (sub l *pc* 5))
	(cond
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes 0xe8)
			(emit-int c))
		(t (print "emit-call constant out of range: " c))))

(defcfun emit-call-r (r) (emit-call-jump-r 0xd0 r))
(defcfun emit-call-i (d c) (emit-call-jump-i 0x10 d c))
(defcfun emit-call-d (d1 d2) (emit-call-jump-d 0x10 d1 d2))
(defcfun emit-call-p (l) (emit-call-jump-p 0x15 (sub l *pc*)))

(defcfun emit-jmp (l d)
	(defq m (elem d *distance*) c (sub l *pc*))
	(if (ne *pass* 0) (if (gt (abs c) (abs m)) (elem-set d *distance* (setq m c))))
	(cond
		((le -0x80 (sub m 2) 0x7f)
			(emit-bytes (add 0x2 0xe9) (bit-and (sub c 2) 0xff)))
		((le -0x80000000 (sub m 5) 0x7fffffff)
			(emit-bytes 0xe9)
			(emit-int (sub c 5)))
		(t (print "emit-jmp constant out of range: " c))))

(defcfun emit-jmp-r (r) (emit-call-jump-r 0xe0 r))
(defcfun emit-jmp-i (d c) (emit-call-jump-i 0x20 d c))
(defcfun emit-jmp-d (d1 d2) (emit-call-jump-d 0x20 d1 d2))
(defcfun emit-jmp-p (l) (emit-call-jump-p 0x25 (sub l *pc*)))

(defcfun emit-lea-i (s c d) (emit-ir 0x8d s c d))
(defcfun emit-lea-d (s1 s2 d) (emit-dr 0x8d s1 s2 d))
(defcfun emit-lea-p (l d) (emit-pr 0x8d (sub l *pc*) d))

(defcfun emit-cpy-cr (c r)
	(defq rn (reg r) rl (bit-and rn 7) rh (bit-shr rn 3))
	(cond
		((eq 0 c)
			(emit-xor-rr r r))
		((le 0 c 0xffffffff)
			(if (ge rn 8) (emit-bytes 0x41))
			(emit-bytes (add 0xb8 rl))
			(emit-int c))
		((le -0x80000000 c -1)
			(emit-bytes (add 0x48 rh) 0xc7 (add 0xc0 rl))
			(emit-int c))
		(t
			(emit-bytes (add 0x48 rh) (add 0xb8 rl))
			(emit-long c))))

(defcfun emit-cpy-rr (s d) (unless (eql s d) (emit-rr 0x89 s d)))
(defcfun emit-cpy-ir (s c d) (emit-ir 0x8b s c d))
(defcfun emit-cpy-dr (s1 s2 d) (emit-dr 0x8b s1 s2 d))
(defcfun emit-cpy-pr (l d) (emit-pr 0x8b (sub l *pc*) d))

(defcfun emit-cpy-ri (s d c)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(cond
		((and (eq c 0) (ne d 5) (ne d 13))
			(emit-bytes (add 0x48 (bit-shl sh 2) dh) 0x89 (add (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24)))
		((le -0x80 c 0x7f)
			(emit-bytes (add 0x48 (bit-shl sh 2) dh) 0x89 (add 0x40 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24))
			(emit-bytes (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x48 (bit-shl sh 2) dh) 0x89 (add 0x80 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24))
			(emit-int c))
		(t (print "emit-cpy-ri constant out of range: " c))))

(defcfun emit-cpy-rd (d s1 s2)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes (add 0x48 (bit-shl dh 2) (bit-shl s2h 1) s1h) 0x89)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-bytes (add 0x04 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-bytes (add 0x44 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcfun emit-cpy-rp (d c)
	(defq d (reg d) dl (bit-and 7 d) dh (bit-shr d 3) c (sub c *pc* 7))
	(cond
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x48 (bit-shl dh 2)) 0x89 (add 0x5 (bit-shl dl 3)))
			(emit-int c))
		(t (print "emit-cpy-rp constant out of range: " c))))

(defcfun emit-cpy-ir-b (s c d) (emit-ir-bs 0xbe s c d))
(defcfun emit-cpy-dr-b (s1 s2 d) (emit-dr-bs 0xbe s1 s2 d))
(defcfun emit-cpy-ir-ub (s c d) (emit-ir-bs 0xb6 s c d))
(defcfun emit-cpy-dr-ub (s1 s2 d) (emit-dr-bs 0xb6 s1 s2 d))
(defcfun emit-cpy-ir-s (s c d) (emit-ir-bs 0xbf s c d))
(defcfun emit-cpy-dr-s (s1 s2 d) (emit-dr-bs 0xbf s1 s2 d))
(defcfun emit-cpy-ir-us (s c d) (emit-ir-bs 0xb7 s c d))
(defcfun emit-cpy-dr-us (s1 s2 d) (emit-dr-bs 0xb7 s1 s2 d))

(defcfun emit-cpy-ir-i (s c d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes (add 0x48 (bit-shl dh 2) sh) 0x63)
	(cond
		((and (eq c 0) (ne s 5) (ne s 13))
			(emit-bytes (add (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24)))
		((le -0x80 c 0x7f)
			(emit-bytes (add 0x40 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24))
			(emit-bytes (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x80 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24))
			(emit-int c))
		(t (print "emit-cpy-ir-i constant out of range: " c))))

(defcfun emit-cpy-dr-i (s1 s2 d)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes (add 0x48 (bit-shl dh 2) (bit-shl s2h 1) s1h) 0x63)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-bytes (add 0x04 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-bytes (add 0x44 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcfun emit-cpy-ir-ui (s c d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(if (or (ge s 8) (ge d 8)) (emit-bytes (add 0x40 (bit-shl dh 2) sh)))
	(emit-bytes 0x8b)
	(cond
		((and (eq c 0) (ne s 5) (ne s 13))
			(emit-bytes (add (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24)))
		((le -0x80 c 0x7f)
			(emit-bytes (add 0x40 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24))
			(emit-bytes (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x80 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24))
			(emit-int c))
		(t (print "emit-cpy-ir-ui constant out of range: " c))))

(defcfun emit-cpy-dr-ui (s1 s2 d)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(if (or (ge s1 8) (ge s2 8) (ge d 8)) (emit-bytes (add 0x40 (bit-shl dh 2) (bit-shl s2h 1) s1h)))
	(emit-bytes 0x8b)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-bytes (add 0x04 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-bytes (add 0x44 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcfun emit-cpy-ri-b (s d c)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(if (or (ge s 4) (ge d 8)) (emit-bytes (add 0x40 (bit-shl sh 2) dh)))
	(emit-bytes 0x88)
	(cond
		((and (eq c 0) (ne d 5) (ne d 13))
			(emit-bytes (add (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24)))
		((le -0x80 c 0x7f)
			(emit-bytes (add 0x40 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24))
			(emit-bytes (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x80 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24))
			(emit-int c))
		(t (print "emit-cpy-ri-b constant out of range: " c))))

(defcfun emit-cpy-rd-b (r s1 s2)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(if (or (ge s1 8) (ge s2 8) (ge r 4)) (emit-bytes (add 0x40 (bit-shl rh 2) (bit-shl s2h 1) s1h)))
	(emit-bytes 0x88)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-bytes (add 0x04 (bit-shl rl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-bytes (add 0x44 (bit-shl rl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcfun emit-cpy-ri-s (s d c)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes 0x66)
	(if (or (ge s 8) (ge d 8)) (emit-bytes (add 0x40 (bit-shl sh 2) dh)))
	(emit-bytes 0x89)
	(cond
		((and (eq c 0) (ne d 5) (ne d 13))
			(emit-bytes (add (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24)))
		((le -0x80 c 0x7f)
			(emit-bytes (add 0x40 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24))
			(emit-bytes (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x80 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24))
			(emit-int c))
		(t (print "emit-cpy-ri-s constant out of range: " c))))

(defcfun emit-cpy-rd-s (r s1 s2)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-bytes 0x66)
	(if (or (ge s1 8) (ge s2 8) (ge r 8)) (emit-bytes (add 0x40 (bit-shl rh 2) (bit-shl s2h 1) s1h)))
	(emit-bytes 0x89)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-bytes (add 0x04 (bit-shl rl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-bytes (add 0x44 (bit-shl rl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcfun emit-cpy-ri-i (s d c)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(if (or (ge s 8) (ge d 8)) (emit-bytes (add 0x40 (bit-shl sh 2) dh)))
	(emit-bytes 0x89)
	(cond
		((and (eq c 0) (ne d 5) (ne d 13))
			(emit-bytes (add (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24)))
		((le -0x80 c 0x7f)
			(emit-bytes (add 0x40 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24))
			(emit-bytes (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x80 (bit-shl sl 3) dl))
			(if (or (eq d 4) (eq d 12)) (emit-bytes 0x24))
			(emit-int c))
		(t (print "emit-cpy-ri-i constant out of range: " c))))

(defcfun emit-cpy-rd-i (r s1 s2)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(if (or (ge s1 8) (ge s2 8) (ge r 8)) (emit-bytes (add 0x40 (bit-shl rh 2) (bit-shl s2h 1) s1h)))
	(emit-bytes 0x89)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-bytes (add 0x04 (bit-shl rl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-bytes (add 0x44 (bit-shl rl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcfun emit-add-cr (c r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-bytes (add 0x48 rh))
	(cond
		((le -0x80 c 0x7f)
			(emit-bytes 0x83 (add 0xc0 rl) (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(if (eq r 0)
				(emit-bytes 0x05)
				(emit-bytes 0x81 (add 0xc0 rl)))
			(emit-int c))
		(t (print "emit-add-cr constant out of range: " c))))

(defcfun emit-add-rr (s d) (emit-rr 0x01 s d))
(defcfun emit-add-ir (s c d) (emit-ir 0x03 s c d))
(defcfun emit-add-dr (s1 s2 d) (emit-dr 0x03 s1 s2 d))

(defcfun emit-sub-cr (c r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-bytes (add 0x48 rh))
	(cond
		((le -0x80 c 0x7f)
			(emit-bytes 0x83 (add 0xe8 rl) (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(if (eq r 0)
				(emit-bytes 0x2d)
				(emit-bytes 0x81 (add 0xe8 rl)))
			(emit-int c))
		(t (print "emit-sub-cr constant out of range: " c))))

(defcfun emit-sub-rr (s d) (emit-rr 0x29 s d))
(defcfun emit-sub-ir (s c d) (emit-ir 0x2b s c d))
(defcfun emit-sub-dr (s1 s2 d) (emit-dr 0x2b s1 s2 d))

(defcfun emit-cmp-cr (c r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-bytes (add 0x48 rh))
	(cond
		((le -0x80 c 0x7f)
			(emit-bytes 0x83 (add 0xf8 rl) (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(if (eq r 0)
				(emit-bytes 0x3d)
				(emit-bytes 0x81 (add 0xf8 rl)))
			(emit-int c))
		(t (print "emit-cmp-cr constant out of range: " c))))

(defcfun emit-cmp-rr (s d) (emit-rr 0x39 s d))
(defcfun emit-cmp-ir (s c d) (emit-ir 0x3b s c d))
(defcfun emit-cmp-dr (s1 s2 d) (emit-dr 0x3b s1 s2 d))

(defcfun emit-and-cr (c r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-bytes (add 0x48 rh))
	(cond
		((le -0x80 c 0x7f)
			(emit-bytes 0x83 (add 0xe0 rl) (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(if (eq r 0)
				(emit-bytes 0x25)
				(emit-bytes 0x81 (add 0xe0 rl)))
			(emit-int c))
		(t (print "emit-and-cr constant out of range: " c))))

(defcfun emit-and-rr (s d) (unless (eql s d) (emit-rr 0x21 s d)))
(defcfun emit-and-ir (s c d) (emit-ir 0x23 s c d))
(defcfun emit-and-dr (s1 s2 d) (emit-dr 0x23 s1 s2 d))

(defcfun emit-or-cr (c r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-bytes (add 0x48 rh))
	(cond
		((le -0x80 c 0x7f)
			(emit-bytes 0x83 (add 0xc8 rl) (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(if (eq r 0)
				(emit-bytes 0x0d)
				(emit-bytes 0x81 (add 0xc8 rl)))
			(emit-int c))
		(t (print "emit-or-cr constant out of range: " c))))

(defcfun emit-or-rr (s d) (unless (eql s d) (emit-rr 0x09 s d)))
(defcfun emit-or-ir (s c d) (emit-ir 0x0b s c d))
(defcfun emit-or-dr (s1 s2 d) (emit-dr 0x0b s1 s2 d))

(defcfun emit-xor-cr (c r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-bytes (add 0x48 rh))
	(cond
		((le -0x80 c 0x7f)
			(emit-bytes 0x83 (add 0xf0 rl) (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(if (eq r 0)
				(emit-bytes 0x35)
				(emit-bytes 0x81 (add 0xf0 rl)))
			(emit-int c))
		(t (print "emit-xor-cr constant out of range: " c))))

(defcfun emit-xor-rr (s d) (emit-rr 0x31 s d))
(defcfun emit-xor-ir (s c d) (emit-ir 0x33 s c d))
(defcfun emit-xor-dr (s1 s2 d) (emit-dr 0x33 s1 s2 d))

(defcfun emit-shl-cr (c r) (emit-shift-cr 0xe0 c r))
(defcfun emit-shl-rr (s d) (emit-shift-rr 0xe0 s d))
(defcfun emit-shr-cr (c r) (emit-shift-cr 0xe8 c r))
(defcfun emit-shr-rr (s d) (emit-shift-rr 0xe8 s d))
(defcfun emit-asr-cr (c r) (emit-shift-cr 0xf8 c r))
(defcfun emit-asr-rr (s d) (emit-shift-rr 0xf8 s d))

(defcfun emit-mul-cr (c r)
	(defq r (reg r) rl (bit-and r 7) rh (bit-shr r 3))
	(cond
		((eq -1 c)
			(emit-bytes (add 0x48 rh) 0xf7 (add 0xd8 rl)))
		((le -0x80 c 0x7f)
			(emit-bytes (add 0x48 (bit-shl rh 2) rh) 0x6b (add 0xc0 rl (bit-shl rl 3)) (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x48 (bit-shl rh 2) rh) 0x69 (add 0xc0 rl (bit-shl rl 3)))
			(emit-int c))
		(t (print "emit-mul-cr constant out of range: " c))))

(defcfun emit-mul-rr (s d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes (add 0x48 (bit-shl dh 2) sh) 0x0f 0xaf (add 0xc0 (bit-shl dl 3) sl)))

(defcfun emit-mul-ir (s c d)
	(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes (add 0x48 (bit-shl dh 2) sh) 0x0f 0xaf)
	(cond
		((and (eq c 0) (ne s 5) (ne s 13))
			(emit-bytes (add (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24)))
		((le -0x80 c 0x7f)
			(emit-bytes (add 0x40 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24))
			(emit-bytes (bit-and c 0xff)))
		((le -0x80000000 c 0x7fffffff)
			(emit-bytes (add 0x80 (bit-shl dl 3) sl))
			(if (or (eq s 4) (eq s 12)) (emit-bytes 0x24))
			(emit-int c))
		(t (print "emit-mul-ir constant out of range: " c))))

(defcfun emit-mul-dr (s1 s2 d)
	(defq s1 (reg s1) s1l (bit-and 7 s1) s1h (bit-shr s1 3)
		s2 (reg s2) s2l (bit-and 7 s2) s2h (bit-shr s2 3)
		d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
	(emit-bytes (add 0x48 (bit-shl dh 2) (bit-shl s2h 1) s1h) 0x0f 0xaf)
	(cond
		((and (ne s1 5) (ne s1 13))
			(emit-bytes (add 0x04 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l)))
		(t
			(emit-bytes (add 0x44 (bit-shl dl 3)) (add (bit-shl s2l 3) s1l) 0))))

(defcfun emit-ret () (emit-bytes 0xc3))

(defcfun emit-inc (r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-bytes (add 0x48 rh) 0xff (add 0xc0 rl)))

(defcfun emit-dec (r)
	(defq r (reg r) rl (bit-and 7 r) rh (bit-shr r 3))
	(emit-bytes (add 0x48 rh) 0xff (add 0xc8 rl)))

(defcfun emit-xchg-rr (s d)
	(unless (eql s d)
		(if (eql s r0) (setq s d d r0))
		(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3)
			d (reg d) dl (bit-and 7 d) dh (bit-shr d 3))
		(if (eq d 0)
			(emit-bytes (add 0x48 sh) (add 0x90 sl))
			(emit-bytes (add 0x48 (bit-shl sh 2) dh) 0x87 (add 0xc0 (bit-shl sl 3) dl)))))

(defcfun emit-ext-rr (s d b)
	(if (and (eql s r0) (eql d r2))
		(emit-bytes 0x48 0x99)
		(progn
			(emit-xor-rr d d)
			(emit-cmp-cr 0 s)
			(emit-branch 0x7d 5 b)
			(emit-dec d))))

(defcfun emit-div-rrr (s d1 d2)
	(cond
		((and (eql d1 r2) (eql d2 r0))
			(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3))
			(emit-bytes (add 0x48 sh) 0xF7 (add 0xF8 sl)))
		((and (eql d1 r0) (eql d2 r2) (not (eql s r0)) (not (eql s r2)))
			(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3))
			(emit-bytes 0x48 0x92 (add 0x48 sh) 0xF7 (add 0xF8 sl) 0x48 0x92))
		(t
			(emit-push d2 d1 s r2 r1 r0)
			(emit-cpy-ir r4 24 r1)
			(emit-cpy-ir r4 32 r2)
			(emit-cpy-ir r4 40 r0)
			(emit-bytes 0x48 0xF7 0xF9)
			(emit-cpy-ri r2 r4 32)
			(emit-cpy-ri r0 r4 40)
			(emit-pop d2 d1 s r2 r1 r0))))

(defcfun emit-div-rrr-u (s d1 d2)
	(cond
		((and (eql d1 r2) (eql d2 r0))
			(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3))
			(emit-bytes (add 0x48 sh) 0xF7 (add 0xF0 sl)))
		((and (eql d1 r0) (eql d2 r2) (not (eql s r0)) (not (eql s r2)))
			(defq s (reg s) sl (bit-and 7 s) sh (bit-shr s 3))
			(emit-bytes 0x48 0x92 (add 0x48 sh) 0xF7 (add 0xF0 sl) 0x48 0x92))
		(t
			(emit-push d2 d1 s r2 r1 r0)
			(emit-cpy-ir r4 24 r1)
			(emit-cpy-ir r4 32 r2)
			(emit-cpy-ir r4 40 r0)
			(emit-bytes 0x48 0xF7 0xF1)
			(emit-cpy-ri r2 r4 32)
			(emit-cpy-ri r0 r4 40)
			(emit-pop d2 d1 s r2 r1 r0))))
